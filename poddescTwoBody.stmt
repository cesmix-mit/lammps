module name=poddescTwoBody, target=x86-64-linux-sse41
external_plus_metadata func poddescTwoBody (rijs, besselparams, nbesselpars, bdegree, adegree, npairs, nrbfmax, rin, rcut, Phi, ns, coeff2, ti, tj, nrbf2, k3, k4, q4, pq, pn3, pc3, pa4, pb4, pc4, elemindex, nrbf3, nrbf4, nelements, nd23, nd33, nd34, n32, n23, n33, n43, n34, n44, nabf3, nabf4, nrbf23, nrbf33, nrbf34, nrbf44, nabf23, nabf33, nabf34, nabf44, coeff3, coeff23, coeff33, coeff4, coeff34, coeff44, fij_o, e_o, e3_o) {
assert((uint64)reinterpret((halide_buffer_t *)tj.buffer) != (uint64)0, halide_error_buffer_argument_is_null("tj"))
assert((uint64)reinterpret((halide_buffer_t *)ti.buffer) != (uint64)0, halide_error_buffer_argument_is_null("ti"))
assert((uint64)reinterpret((halide_buffer_t *)rijs.buffer) != (uint64)0, halide_error_buffer_argument_is_null("rijs"))
assert((uint64)reinterpret((halide_buffer_t *)pq.buffer) != (uint64)0, halide_error_buffer_argument_is_null("pq"))
assert((uint64)reinterpret((halide_buffer_t *)pn3.buffer) != (uint64)0, halide_error_buffer_argument_is_null("pn3"))
assert((uint64)reinterpret((halide_buffer_t *)pc4.buffer) != (uint64)0, halide_error_buffer_argument_is_null("pc4"))
assert((uint64)reinterpret((halide_buffer_t *)pc3.buffer) != (uint64)0, halide_error_buffer_argument_is_null("pc3"))
assert((uint64)reinterpret((halide_buffer_t *)pb4.buffer) != (uint64)0, halide_error_buffer_argument_is_null("pb4"))
assert((uint64)reinterpret((halide_buffer_t *)pa4.buffer) != (uint64)0, halide_error_buffer_argument_is_null("pa4"))
assert((uint64)reinterpret((halide_buffer_t *)fij_o.buffer) != (uint64)0, halide_error_buffer_argument_is_null("fij_o"))
assert((uint64)reinterpret((halide_buffer_t *)elemindex.buffer) != (uint64)0, halide_error_buffer_argument_is_null("elemindex"))
assert((uint64)reinterpret((halide_buffer_t *)e_o.buffer) != (uint64)0, halide_error_buffer_argument_is_null("e_o"))
assert((uint64)reinterpret((halide_buffer_t *)e3_o.buffer) != (uint64)0, halide_error_buffer_argument_is_null("e3_o"))
assert((uint64)reinterpret((halide_buffer_t *)coeff4.buffer) != (uint64)0, halide_error_buffer_argument_is_null("coeff4"))
assert((uint64)reinterpret((halide_buffer_t *)coeff33.buffer) != (uint64)0, halide_error_buffer_argument_is_null("coeff33"))
assert((uint64)reinterpret((halide_buffer_t *)coeff3.buffer) != (uint64)0, halide_error_buffer_argument_is_null("coeff3"))
assert((uint64)reinterpret((halide_buffer_t *)coeff23.buffer) != (uint64)0, halide_error_buffer_argument_is_null("coeff23"))
assert((uint64)reinterpret((halide_buffer_t *)coeff2.buffer) != (uint64)0, halide_error_buffer_argument_is_null("coeff2"))
assert((uint64)reinterpret((halide_buffer_t *)besselparams.buffer) != (uint64)0, halide_error_buffer_argument_is_null("besselparams"))
assert((uint64)reinterpret((halide_buffer_t *)Phi.buffer) != (uint64)0, halide_error_buffer_argument_is_null("Phi"))
let Phi = (void *)_halide_buffer_get_host((halide_buffer_t *)Phi.buffer)
let Phi.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)Phi.buffer)
let Phi.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)Phi.buffer)
let Phi.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)Phi.buffer)
let Phi.min.0 = _halide_buffer_get_min((halide_buffer_t *)Phi.buffer, 0)
let Phi.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)Phi.buffer, 0)
let Phi.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)Phi.buffer, 0)
let Phi.min.1 = _halide_buffer_get_min((halide_buffer_t *)Phi.buffer, 1)
let Phi.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)Phi.buffer, 1)
let Phi.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)Phi.buffer, 1)
let besselparams = (void *)_halide_buffer_get_host((halide_buffer_t *)besselparams.buffer)
let besselparams.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)besselparams.buffer)
let besselparams.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)besselparams.buffer)
let besselparams.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)besselparams.buffer)
let besselparams.min.0 = _halide_buffer_get_min((halide_buffer_t *)besselparams.buffer, 0)
let besselparams.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)besselparams.buffer, 0)
let besselparams.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)besselparams.buffer, 0)
let coeff2 = (void *)_halide_buffer_get_host((halide_buffer_t *)coeff2.buffer)
let coeff2.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)coeff2.buffer)
let coeff2.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)coeff2.buffer)
let coeff2.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)coeff2.buffer)
let coeff2.min.0 = _halide_buffer_get_min((halide_buffer_t *)coeff2.buffer, 0)
let coeff2.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)coeff2.buffer, 0)
let coeff2.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)coeff2.buffer, 0)
let coeff2.min.1 = _halide_buffer_get_min((halide_buffer_t *)coeff2.buffer, 1)
let coeff2.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)coeff2.buffer, 1)
let coeff2.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)coeff2.buffer, 1)
let coeff2.min.2 = _halide_buffer_get_min((halide_buffer_t *)coeff2.buffer, 2)
let coeff2.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)coeff2.buffer, 2)
let coeff2.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)coeff2.buffer, 2)
let coeff23 = (void *)_halide_buffer_get_host((halide_buffer_t *)coeff23.buffer)
let coeff23.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)coeff23.buffer)
let coeff23.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)coeff23.buffer)
let coeff23.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)coeff23.buffer)
let coeff23.min.0 = _halide_buffer_get_min((halide_buffer_t *)coeff23.buffer, 0)
let coeff23.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)coeff23.buffer, 0)
let coeff23.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)coeff23.buffer, 0)
let coeff23.min.1 = _halide_buffer_get_min((halide_buffer_t *)coeff23.buffer, 1)
let coeff23.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)coeff23.buffer, 1)
let coeff23.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)coeff23.buffer, 1)
let coeff23.min.2 = _halide_buffer_get_min((halide_buffer_t *)coeff23.buffer, 2)
let coeff23.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)coeff23.buffer, 2)
let coeff23.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)coeff23.buffer, 2)
let coeff3 = (void *)_halide_buffer_get_host((halide_buffer_t *)coeff3.buffer)
let coeff3.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)coeff3.buffer)
let coeff3.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)coeff3.buffer)
let coeff3.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)coeff3.buffer)
let coeff3.min.0 = _halide_buffer_get_min((halide_buffer_t *)coeff3.buffer, 0)
let coeff3.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)coeff3.buffer, 0)
let coeff3.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)coeff3.buffer, 0)
let coeff3.min.1 = _halide_buffer_get_min((halide_buffer_t *)coeff3.buffer, 1)
let coeff3.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)coeff3.buffer, 1)
let coeff3.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)coeff3.buffer, 1)
let coeff3.min.2 = _halide_buffer_get_min((halide_buffer_t *)coeff3.buffer, 2)
let coeff3.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)coeff3.buffer, 2)
let coeff3.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)coeff3.buffer, 2)
let coeff3.min.3 = _halide_buffer_get_min((halide_buffer_t *)coeff3.buffer, 3)
let coeff3.extent.3 = _halide_buffer_get_extent((halide_buffer_t *)coeff3.buffer, 3)
let coeff3.stride.3 = _halide_buffer_get_stride((halide_buffer_t *)coeff3.buffer, 3)
let coeff33 = (void *)_halide_buffer_get_host((halide_buffer_t *)coeff33.buffer)
let coeff33.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)coeff33.buffer)
let coeff33.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)coeff33.buffer)
let coeff33.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)coeff33.buffer)
let coeff33.min.0 = _halide_buffer_get_min((halide_buffer_t *)coeff33.buffer, 0)
let coeff33.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)coeff33.buffer, 0)
let coeff33.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)coeff33.buffer, 0)
let coeff33.min.1 = _halide_buffer_get_min((halide_buffer_t *)coeff33.buffer, 1)
let coeff33.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)coeff33.buffer, 1)
let coeff33.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)coeff33.buffer, 1)
let coeff4 = (void *)_halide_buffer_get_host((halide_buffer_t *)coeff4.buffer)
let coeff4.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)coeff4.buffer)
let coeff4.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)coeff4.buffer)
let coeff4.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)coeff4.buffer)
let coeff4.min.0 = _halide_buffer_get_min((halide_buffer_t *)coeff4.buffer, 0)
let coeff4.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)coeff4.buffer, 0)
let coeff4.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)coeff4.buffer, 0)
let coeff4.min.1 = _halide_buffer_get_min((halide_buffer_t *)coeff4.buffer, 1)
let coeff4.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)coeff4.buffer, 1)
let coeff4.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)coeff4.buffer, 1)
let coeff4.min.2 = _halide_buffer_get_min((halide_buffer_t *)coeff4.buffer, 2)
let coeff4.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)coeff4.buffer, 2)
let coeff4.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)coeff4.buffer, 2)
let coeff4.min.3 = _halide_buffer_get_min((halide_buffer_t *)coeff4.buffer, 3)
let coeff4.extent.3 = _halide_buffer_get_extent((halide_buffer_t *)coeff4.buffer, 3)
let coeff4.stride.3 = _halide_buffer_get_stride((halide_buffer_t *)coeff4.buffer, 3)
let e3_o = (void *)_halide_buffer_get_host((halide_buffer_t *)e3_o.buffer)
let e3_o.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)e3_o.buffer)
let e3_o.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)e3_o.buffer)
let e3_o.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)e3_o.buffer)
let e_o = (void *)_halide_buffer_get_host((halide_buffer_t *)e_o.buffer)
let e_o.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)e_o.buffer)
let e_o.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)e_o.buffer)
let e_o.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)e_o.buffer)
let elemindex = (void *)_halide_buffer_get_host((halide_buffer_t *)elemindex.buffer)
let elemindex.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)elemindex.buffer)
let elemindex.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)elemindex.buffer)
let elemindex.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)elemindex.buffer)
let elemindex.min.0 = _halide_buffer_get_min((halide_buffer_t *)elemindex.buffer, 0)
let elemindex.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)elemindex.buffer, 0)
let elemindex.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)elemindex.buffer, 0)
let elemindex.min.1 = _halide_buffer_get_min((halide_buffer_t *)elemindex.buffer, 1)
let elemindex.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)elemindex.buffer, 1)
let elemindex.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)elemindex.buffer, 1)
let fij_o = (void *)_halide_buffer_get_host((halide_buffer_t *)fij_o.buffer)
let fij_o.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)fij_o.buffer)
let fij_o.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)fij_o.buffer)
let fij_o.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)fij_o.buffer)
let fij_o.min.0 = _halide_buffer_get_min((halide_buffer_t *)fij_o.buffer, 0)
let fij_o.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)fij_o.buffer, 0)
let fij_o.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)fij_o.buffer, 0)
let fij_o.min.1 = _halide_buffer_get_min((halide_buffer_t *)fij_o.buffer, 1)
let fij_o.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)fij_o.buffer, 1)
let fij_o.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)fij_o.buffer, 1)
let pa4 = (void *)_halide_buffer_get_host((halide_buffer_t *)pa4.buffer)
let pa4.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)pa4.buffer)
let pa4.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)pa4.buffer)
let pa4.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)pa4.buffer)
let pa4.min.0 = _halide_buffer_get_min((halide_buffer_t *)pa4.buffer, 0)
let pa4.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)pa4.buffer, 0)
let pa4.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)pa4.buffer, 0)
let pb4 = (void *)_halide_buffer_get_host((halide_buffer_t *)pb4.buffer)
let pb4.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)pb4.buffer)
let pb4.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)pb4.buffer)
let pb4.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)pb4.buffer)
let pb4.min.0 = _halide_buffer_get_min((halide_buffer_t *)pb4.buffer, 0)
let pb4.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)pb4.buffer, 0)
let pb4.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)pb4.buffer, 0)
let pb4.min.1 = _halide_buffer_get_min((halide_buffer_t *)pb4.buffer, 1)
let pb4.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)pb4.buffer, 1)
let pb4.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)pb4.buffer, 1)
let pc3 = (void *)_halide_buffer_get_host((halide_buffer_t *)pc3.buffer)
let pc3.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)pc3.buffer)
let pc3.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)pc3.buffer)
let pc3.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)pc3.buffer)
let pc3.min.0 = _halide_buffer_get_min((halide_buffer_t *)pc3.buffer, 0)
let pc3.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)pc3.buffer, 0)
let pc3.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)pc3.buffer, 0)
let pc4 = (void *)_halide_buffer_get_host((halide_buffer_t *)pc4.buffer)
let pc4.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)pc4.buffer)
let pc4.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)pc4.buffer)
let pc4.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)pc4.buffer)
let pc4.min.0 = _halide_buffer_get_min((halide_buffer_t *)pc4.buffer, 0)
let pc4.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)pc4.buffer, 0)
let pc4.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)pc4.buffer, 0)
let pn3 = (void *)_halide_buffer_get_host((halide_buffer_t *)pn3.buffer)
let pn3.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)pn3.buffer)
let pn3.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)pn3.buffer)
let pn3.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)pn3.buffer)
let pn3.min.0 = _halide_buffer_get_min((halide_buffer_t *)pn3.buffer, 0)
let pn3.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)pn3.buffer, 0)
let pn3.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)pn3.buffer, 0)
let pq = (void *)_halide_buffer_get_host((halide_buffer_t *)pq.buffer)
let pq.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)pq.buffer)
let pq.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)pq.buffer)
let pq.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)pq.buffer)
let pq.min.0 = _halide_buffer_get_min((halide_buffer_t *)pq.buffer, 0)
let pq.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)pq.buffer, 0)
let pq.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)pq.buffer, 0)
let rijs = (void *)_halide_buffer_get_host((halide_buffer_t *)rijs.buffer)
let rijs.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)rijs.buffer)
let rijs.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)rijs.buffer)
let rijs.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)rijs.buffer)
let rijs.min.0 = _halide_buffer_get_min((halide_buffer_t *)rijs.buffer, 0)
let rijs.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)rijs.buffer, 0)
let rijs.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)rijs.buffer, 0)
let rijs.min.1 = _halide_buffer_get_min((halide_buffer_t *)rijs.buffer, 1)
let rijs.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)rijs.buffer, 1)
let rijs.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)rijs.buffer, 1)
let ti = (void *)_halide_buffer_get_host((halide_buffer_t *)ti.buffer)
let ti.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)ti.buffer)
let ti.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)ti.buffer)
let ti.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)ti.buffer)
let ti.min.0 = _halide_buffer_get_min((halide_buffer_t *)ti.buffer, 0)
let ti.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)ti.buffer, 0)
let ti.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)ti.buffer, 0)
let tj = (void *)_halide_buffer_get_host((halide_buffer_t *)tj.buffer)
let tj.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)tj.buffer)
let tj.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)tj.buffer)
let tj.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)tj.buffer)
let tj.min.0 = _halide_buffer_get_min((halide_buffer_t *)tj.buffer, 0)
let tj.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)tj.buffer, 0)
let tj.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)tj.buffer, 0)
let U.s0.m.max.s = max(nrbf3, nrbf4)
let U.s0.k.max.s = max(k3, k4)
let sumU.s0.k.max = max(k3 + -1, k4)
let rbf$1.s1.i.max.s = max(nrbf2, nrbf3)
let coeff2.min.2.required.s = min(ti[0 - (ti.min.0*ti.stride.0)], nelements)
let coeff23.extent.2.required.s = let t3302 = ti[0 - (ti.min.0*ti.stride.0)] in (min(nelements, t3302) - max(t3302, 1))
let coeff23.min.2.required.s = ti[0 - (ti.min.0*ti.stride.0)]
let coeff3.extent.2.required.s = min(((nelements + 1)*nelements)/2, (max(max(((nelements + -1)/2)*(nelements + -2), ((nelements + -1)/2)*((nelements*2) + -3)), 0) + nelements) + -1)
let coeff3.min.3.required.s = min(ti[0 - (ti.min.0*ti.stride.0)], nelements)
let coeff3.stride.3.required = max(coeff3.extent.2.required.s, 1)*(nabf3*nrbf3)
let coeff33.extent.0.required = max(((n33 + 1)*n33)/2, 1)
let coeff33.min.1.required.s = min(ti[0 - (ti.min.0*ti.stride.0)], nelements)
let coeff4.extent.2.required.s = let t3303 = ((nelements + -1)*nelements) in (let t3304 = min(t3303, min(nelements, 1) + -1) in (let t3305 = max(t3303, max(nelements, 1) + -1) in select(nelements == 1, 0, min((((nelements + 1)*nelements)*(nelements + 2))/6, (((max(max(max(t3304*2, (nelements + 1)*t3304), t3305*2), (nelements + 1)*t3305)/6) + (t3305/2)) + nelements) + -1))))
let coeff4.min.3.required = select(nelements == 1, 0, max(min(ti[0 - (ti.min.0*ti.stride.0)], nelements), 1) + -1)
let coeff4.stride.3.required = (nabf4*nrbf4)*(coeff4.extent.2.required.s + 1)
let elemindex.extent.0.required = select(nelements == 1, elemindex.extent.0, max(nelements, 1))
let elemindex.min.0.required = select(nelements == 1, elemindex.min.0, 0)
let elemindex.extent.1.required = select(nelements == 1, elemindex.extent.1, nelements)
let elemindex.min.1.required = select(nelements == 1, elemindex.min.1, 0)
let pq.extent.0.required.s = max(k3*2, k3) - min(k3, 0)
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)Phi.buffer) || (rbf$1.s1.i.max.s <= ns), halide_error_constraints_make_required_region_smaller("Input buffer Phi", 1, 0, ns + -1, 0, rbf$1.s1.i.max.s + -1))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff2.buffer) || (1 <= npairs), halide_error_constraints_make_required_region_smaller("Input buffer coeff2", 0, 0, npairs + -1, 0, 0))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff2.buffer) || (max(coeff2.min.2.required.s, 1) <= nelements), let t3306 = max(coeff2.min.2.required.s, 1) in halide_error_constraints_make_required_region_smaller("Input buffer coeff2", 2, 0, nelements + -1, t3306 + -1, t3306 + -1))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff23.buffer) || ((max(coeff23.min.2.required.s, 1) + coeff23.extent.2.required.s) <= nelements), let t3307 = max(coeff23.min.2.required.s, 1) in halide_error_constraints_make_required_region_smaller("Input buffer coeff23", 2, 0, nelements + -1, t3307 + -1, (t3307 + coeff23.extent.2.required.s) + -1))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff33.buffer) || (coeff33.extent.0.required <= (((n33 + 1)*n33)/2)), halide_error_constraints_make_required_region_smaller("Input buffer coeff33", 0, 0, (((n33 + 1)*n33)/2) + -1, 0, coeff33.extent.0.required + -1))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff33.buffer) || (max(coeff33.min.1.required.s, 1) <= nelements), let t3308 = max(coeff33.min.1.required.s, 1) in halide_error_constraints_make_required_region_smaller("Input buffer coeff33", 1, 0, nelements + -1, t3308 + -1, t3308 + -1))
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)Phi.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)Phi.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)Phi.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 2, (halide_dimension_t *)make_struct(0, ns, 1, 0, 0, ns, ns, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)besselparams.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)besselparams.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)besselparams.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 1, (halide_dimension_t *)make_struct(0, nbesselpars, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff2.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)coeff2.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)coeff2.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 3, (halide_dimension_t *)make_struct(0, npairs, nrbf2, 0, 0, nrbf2, 1, 0, 0, nelements, npairs*nrbf2, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff23.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)coeff23.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)coeff23.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 3, (halide_dimension_t *)make_struct(0, n23, 1, 0, 0, n32, n23, 0, 0, nelements, n23*n32, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff3.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)coeff3.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)coeff3.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 4, (halide_dimension_t *)make_struct(0, nabf3, 1, 0, 0, nrbf3, nabf3, 0, 0, max(coeff3.extent.2.required.s, 1), nabf3*nrbf3, 0, max(coeff3.min.3.required.s, 1) + -1, 1, coeff3.stride.3.required, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff33.buffer)) {
 let t3309 = ((n33 + 1)*n33) in (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)coeff33.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)coeff33.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 2, (halide_dimension_t *)make_struct(0, t3309/2, 1, 0, 0, nelements, t3309/2, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff4.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)coeff4.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)coeff4.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 4, (halide_dimension_t *)make_struct(0, nabf4, 1, 0, 0, nrbf4, nabf4, 0, 0, coeff4.extent.2.required.s + 1, nabf4*nrbf4, 0, coeff4.min.3.required, 1, coeff4.stride.3.required, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)e3_o.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)e3_o.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)e3_o.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 0, (halide_dimension_t *)make_struct(), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)e_o.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)e_o.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)e_o.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 0, (halide_dimension_t *)make_struct(), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)elemindex.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)elemindex.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)elemindex.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 2, (halide_dimension_t *)make_struct(elemindex.min.0.required, elemindex.extent.0.required, 1, 0, elemindex.min.1.required, elemindex.extent.1.required, elemindex.extent.0.required, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)fij_o.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)fij_o.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)fij_o.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 2, (halide_dimension_t *)make_struct(0, npairs, 3, 0, 0, 3, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pa4.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)pa4.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)pa4.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(0, nabf4 + 1, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pb4.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)pb4.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)pb4.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 2, (halide_dimension_t *)make_struct(0, q4, 1, 0, 0, 3, q4, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pc3.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)pc3.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)pc3.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(0, k3, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pc4.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)pc4.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)pc4.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(0, q4, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pn3.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)pn3.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)pn3.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(0, nabf3 + 1, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pq.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)pq.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)pq.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(min(k3, 0) + 1, pq.extent.0.required.s + 1, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)rijs.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)rijs.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)rijs.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 2, (halide_dimension_t *)make_struct(0, 3, 1, 0, 0, npairs, 3, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)ti.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)ti.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)ti.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(0, 1, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)tj.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)tj.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)tj.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(0, npairs, 1, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)tj.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)ti.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)rijs.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pq.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pn3.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pc4.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pc3.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pb4.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pa4.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)fij_o.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)elemindex.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)e_o.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)e3_o.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff4.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff33.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff3.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff23.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff2.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)Phi.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)besselparams.buffer))))))))))))))))))))) {
 assert(Phi.type == (uint32)81922, halide_error_bad_type("Input buffer Phi", Phi.type, (uint32)81922))
 assert(Phi.dimensions == 2, halide_error_bad_dimensions("Input buffer Phi", Phi.dimensions, 2))
 assert(besselparams.type == (uint32)81922, halide_error_bad_type("Input buffer besselparams", besselparams.type, (uint32)81922))
 assert(besselparams.dimensions == 1, halide_error_bad_dimensions("Input buffer besselparams", besselparams.dimensions, 1))
 assert(coeff2.type == (uint32)81922, halide_error_bad_type("Input buffer coeff2", coeff2.type, (uint32)81922))
 assert(coeff2.dimensions == 3, halide_error_bad_dimensions("Input buffer coeff2", coeff2.dimensions, 3))
 assert(coeff23.type == (uint32)81922, halide_error_bad_type("Input buffer coeff23", coeff23.type, (uint32)81922))
 assert(coeff23.dimensions == 3, halide_error_bad_dimensions("Input buffer coeff23", coeff23.dimensions, 3))
 assert(coeff3.type == (uint32)81922, halide_error_bad_type("Input buffer coeff3", coeff3.type, (uint32)81922))
 assert(coeff3.dimensions == 4, halide_error_bad_dimensions("Input buffer coeff3", coeff3.dimensions, 4))
 assert(coeff33.type == (uint32)81922, halide_error_bad_type("Input buffer coeff33", coeff33.type, (uint32)81922))
 assert(coeff33.dimensions == 2, halide_error_bad_dimensions("Input buffer coeff33", coeff33.dimensions, 2))
 assert(coeff4.type == (uint32)81922, halide_error_bad_type("Input buffer coeff4", coeff4.type, (uint32)81922))
 assert(coeff4.dimensions == 4, halide_error_bad_dimensions("Input buffer coeff4", coeff4.dimensions, 4))
 assert(e3_o.type == (uint32)81922, halide_error_bad_type("Output buffer e3_o", e3_o.type, (uint32)81922))
 assert(e3_o.dimensions == 0, halide_error_bad_dimensions("Output buffer e3_o", e3_o.dimensions, 0))
 assert(e_o.type == (uint32)81922, halide_error_bad_type("Output buffer e_o", e_o.type, (uint32)81922))
 assert(e_o.dimensions == 0, halide_error_bad_dimensions("Output buffer e_o", e_o.dimensions, 0))
 assert(elemindex.type == (uint32)73728, halide_error_bad_type("Input buffer elemindex", elemindex.type, (uint32)73728))
 assert(elemindex.dimensions == 2, halide_error_bad_dimensions("Input buffer elemindex", elemindex.dimensions, 2))
 assert(fij_o.type == (uint32)81922, halide_error_bad_type("Output buffer fij_o", fij_o.type, (uint32)81922))
 assert(fij_o.dimensions == 2, halide_error_bad_dimensions("Output buffer fij_o", fij_o.dimensions, 2))
 assert(pa4.type == (uint32)73728, halide_error_bad_type("Input buffer pa4", pa4.type, (uint32)73728))
 assert(pa4.dimensions == 1, halide_error_bad_dimensions("Input buffer pa4", pa4.dimensions, 1))
 assert(pb4.type == (uint32)73728, halide_error_bad_type("Input buffer pb4", pb4.type, (uint32)73728))
 assert(pb4.dimensions == 2, halide_error_bad_dimensions("Input buffer pb4", pb4.dimensions, 2))
 assert(pc3.type == (uint32)73728, halide_error_bad_type("Input buffer pc3", pc3.type, (uint32)73728))
 assert(pc3.dimensions == 1, halide_error_bad_dimensions("Input buffer pc3", pc3.dimensions, 1))
 assert(pc4.type == (uint32)73728, halide_error_bad_type("Input buffer pc4", pc4.type, (uint32)73728))
 assert(pc4.dimensions == 1, halide_error_bad_dimensions("Input buffer pc4", pc4.dimensions, 1))
 assert(pn3.type == (uint32)73728, halide_error_bad_type("Input buffer pn3", pn3.type, (uint32)73728))
 assert(pn3.dimensions == 1, halide_error_bad_dimensions("Input buffer pn3", pn3.dimensions, 1))
 assert(pq.type == (uint32)73728, halide_error_bad_type("Input buffer pq", pq.type, (uint32)73728))
 assert(pq.dimensions == 1, halide_error_bad_dimensions("Input buffer pq", pq.dimensions, 1))
 assert(rijs.type == (uint32)81922, halide_error_bad_type("Input buffer rijs", rijs.type, (uint32)81922))
 assert(rijs.dimensions == 2, halide_error_bad_dimensions("Input buffer rijs", rijs.dimensions, 2))
 assert(ti.type == (uint32)73728, halide_error_bad_type("Input buffer ti", ti.type, (uint32)73728))
 assert(ti.dimensions == 1, halide_error_bad_dimensions("Input buffer ti", ti.dimensions, 1))
 assert(tj.type == (uint32)73728, halide_error_bad_type("Input buffer tj", tj.type, (uint32)73728))
 assert(tj.dimensions == 1, halide_error_bad_dimensions("Input buffer tj", tj.dimensions, 1))
 assert((Phi.min.0 <= 0) && (ns <= (Phi.extent.0 + Phi.min.0)), halide_error_access_out_of_bounds("Input buffer Phi", 0, 0, ns + -1, Phi.min.0, (Phi.extent.0 + Phi.min.0) + -1))
 assert(0 <= Phi.extent.0, halide_error_buffer_extents_negative("Input buffer Phi", 0, Phi.extent.0))
 assert((Phi.min.1 <= 0) && (rbf$1.s1.i.max.s <= (Phi.extent.1 + Phi.min.1)), halide_error_access_out_of_bounds("Input buffer Phi", 1, 0, rbf$1.s1.i.max.s + -1, Phi.min.1, (Phi.extent.1 + Phi.min.1) + -1))
 assert(0 <= Phi.extent.1, halide_error_buffer_extents_negative("Input buffer Phi", 1, Phi.extent.1))
 assert((besselparams.min.0 <= 0) && (nbesselpars <= (besselparams.extent.0 + besselparams.min.0)), halide_error_access_out_of_bounds("Input buffer besselparams", 0, 0, nbesselpars + -1, besselparams.min.0, (besselparams.extent.0 + besselparams.min.0) + -1))
 assert(0 <= besselparams.extent.0, halide_error_buffer_extents_negative("Input buffer besselparams", 0, besselparams.extent.0))
 assert((coeff2.min.0 <= 0) && ((max(npairs, 2) + -1) <= (coeff2.extent.0 + coeff2.min.0)), halide_error_access_out_of_bounds("Input buffer coeff2", 0, 0, max(npairs, 2) + -2, coeff2.min.0, (coeff2.extent.0 + coeff2.min.0) + -1))
 assert(0 <= coeff2.extent.0, halide_error_buffer_extents_negative("Input buffer coeff2", 0, coeff2.extent.0))
 assert((coeff2.min.1 <= 0) && (nrbf2 <= (coeff2.extent.1 + coeff2.min.1)), halide_error_access_out_of_bounds("Input buffer coeff2", 1, 0, nrbf2 + -1, coeff2.min.1, (coeff2.extent.1 + coeff2.min.1) + -1))
 assert(0 <= coeff2.extent.1, halide_error_buffer_extents_negative("Input buffer coeff2", 1, coeff2.extent.1))
 assert(let t3310 = max(coeff2.min.2.required.s, 1) in (((coeff2.min.2 + 1) <= t3310) && (t3310 <= (coeff2.extent.2 + coeff2.min.2))), let t3311 = max(coeff2.min.2.required.s, 1) in halide_error_access_out_of_bounds("Input buffer coeff2", 2, t3311 + -1, t3311 + -1, coeff2.min.2, (coeff2.extent.2 + coeff2.min.2) + -1))
 assert(0 <= coeff2.extent.2, halide_error_buffer_extents_negative("Input buffer coeff2", 2, coeff2.extent.2))
 assert((coeff23.min.0 <= 0) && (n23 <= (coeff23.extent.0 + coeff23.min.0)), halide_error_access_out_of_bounds("Input buffer coeff23", 0, 0, n23 + -1, coeff23.min.0, (coeff23.extent.0 + coeff23.min.0) + -1))
 assert(0 <= coeff23.extent.0, halide_error_buffer_extents_negative("Input buffer coeff23", 0, coeff23.extent.0))
 assert((coeff23.min.1 <= 0) && (n32 <= (coeff23.extent.1 + coeff23.min.1)), halide_error_access_out_of_bounds("Input buffer coeff23", 1, 0, n32 + -1, coeff23.min.1, (coeff23.extent.1 + coeff23.min.1) + -1))
 assert(0 <= coeff23.extent.1, halide_error_buffer_extents_negative("Input buffer coeff23", 1, coeff23.extent.1))
 assert(let t3312 = max(coeff23.min.2.required.s, 1) in (((coeff23.min.2 + 1) <= t3312) && ((t3312 + coeff23.extent.2.required.s) <= (coeff23.extent.2 + coeff23.min.2))), let t3313 = max(coeff23.min.2.required.s, 1) in halide_error_access_out_of_bounds("Input buffer coeff23", 2, t3313 + -1, (t3313 + coeff23.extent.2.required.s) + -1, coeff23.min.2, (coeff23.extent.2 + coeff23.min.2) + -1))
 assert(0 <= coeff23.extent.2, halide_error_buffer_extents_negative("Input buffer coeff23", 2, coeff23.extent.2))
 assert((coeff3.min.0 <= 0) && (nabf3 <= (coeff3.extent.0 + coeff3.min.0)), halide_error_access_out_of_bounds("Input buffer coeff3", 0, 0, nabf3 + -1, coeff3.min.0, (coeff3.extent.0 + coeff3.min.0) + -1))
 assert(0 <= coeff3.extent.0, halide_error_buffer_extents_negative("Input buffer coeff3", 0, coeff3.extent.0))
 assert((coeff3.min.1 <= 0) && (nrbf3 <= (coeff3.extent.1 + coeff3.min.1)), halide_error_access_out_of_bounds("Input buffer coeff3", 1, 0, nrbf3 + -1, coeff3.min.1, (coeff3.extent.1 + coeff3.min.1) + -1))
 assert(0 <= coeff3.extent.1, halide_error_buffer_extents_negative("Input buffer coeff3", 1, coeff3.extent.1))
 assert((coeff3.min.2 <= 0) && (max(coeff3.extent.2.required.s, 1) <= (coeff3.extent.2 + coeff3.min.2)), halide_error_access_out_of_bounds("Input buffer coeff3", 2, 0, max(coeff3.extent.2.required.s, 1) + -1, coeff3.min.2, (coeff3.extent.2 + coeff3.min.2) + -1))
 assert(0 <= coeff3.extent.2, halide_error_buffer_extents_negative("Input buffer coeff3", 2, coeff3.extent.2))
 assert(let t3314 = max(coeff3.min.3.required.s, 1) in (((coeff3.min.3 + 1) <= t3314) && (t3314 <= (coeff3.extent.3 + coeff3.min.3))), let t3315 = max(coeff3.min.3.required.s, 1) in halide_error_access_out_of_bounds("Input buffer coeff3", 3, t3315 + -1, t3315 + -1, coeff3.min.3, (coeff3.extent.3 + coeff3.min.3) + -1))
 assert(0 <= coeff3.extent.3, halide_error_buffer_extents_negative("Input buffer coeff3", 3, coeff3.extent.3))
 assert((coeff33.min.0 <= 0) && (coeff33.extent.0.required <= (coeff33.extent.0 + coeff33.min.0)), halide_error_access_out_of_bounds("Input buffer coeff33", 0, 0, coeff33.extent.0.required + -1, coeff33.min.0, (coeff33.extent.0 + coeff33.min.0) + -1))
 assert(0 <= coeff33.extent.0, halide_error_buffer_extents_negative("Input buffer coeff33", 0, coeff33.extent.0))
 assert(let t3316 = max(coeff33.min.1.required.s, 1) in (((coeff33.min.1 + 1) <= t3316) && (t3316 <= (coeff33.extent.1 + coeff33.min.1))), let t3317 = max(coeff33.min.1.required.s, 1) in halide_error_access_out_of_bounds("Input buffer coeff33", 1, t3317 + -1, t3317 + -1, coeff33.min.1, (coeff33.extent.1 + coeff33.min.1) + -1))
 assert(0 <= coeff33.extent.1, halide_error_buffer_extents_negative("Input buffer coeff33", 1, coeff33.extent.1))
 assert((coeff4.min.0 <= 0) && (nabf4 <= (coeff4.extent.0 + coeff4.min.0)), halide_error_access_out_of_bounds("Input buffer coeff4", 0, 0, nabf4 + -1, coeff4.min.0, (coeff4.extent.0 + coeff4.min.0) + -1))
 assert(0 <= coeff4.extent.0, halide_error_buffer_extents_negative("Input buffer coeff4", 0, coeff4.extent.0))
 assert((coeff4.min.1 <= 0) && (nrbf4 <= (coeff4.extent.1 + coeff4.min.1)), halide_error_access_out_of_bounds("Input buffer coeff4", 1, 0, nrbf4 + -1, coeff4.min.1, (coeff4.extent.1 + coeff4.min.1) + -1))
 assert(0 <= coeff4.extent.1, halide_error_buffer_extents_negative("Input buffer coeff4", 1, coeff4.extent.1))
 assert((coeff4.min.2 <= 0) && ((coeff4.extent.2.required.s + 1) <= (coeff4.extent.2 + coeff4.min.2)), halide_error_access_out_of_bounds("Input buffer coeff4", 2, 0, coeff4.extent.2.required.s, coeff4.min.2, (coeff4.extent.2 + coeff4.min.2) + -1))
 assert(0 <= coeff4.extent.2, halide_error_buffer_extents_negative("Input buffer coeff4", 2, coeff4.extent.2))
 assert((coeff4.min.3 <= coeff4.min.3.required) && ((coeff4.min.3.required + 1) <= (coeff4.extent.3 + coeff4.min.3)), halide_error_access_out_of_bounds("Input buffer coeff4", 3, coeff4.min.3.required, coeff4.min.3.required, coeff4.min.3, (coeff4.extent.3 + coeff4.min.3) + -1))
 assert(0 <= coeff4.extent.3, halide_error_buffer_extents_negative("Input buffer coeff4", 3, coeff4.extent.3))
 assert(let t3318 = (elemindex.extent.0 + elemindex.min.0) in ((elemindex.min.0 <= elemindex.min.0.required) && (select(nelements == 1, t3318, elemindex.extent.0.required + elemindex.min.0.required) <= t3318)), let t3319 = (elemindex.extent.0 + elemindex.min.0) in halide_error_access_out_of_bounds("Input buffer elemindex", 0, elemindex.min.0.required, select(nelements == 1, t3319, elemindex.extent.0.required + elemindex.min.0.required) + -1, elemindex.min.0, t3319 + -1))
 assert(0 <= elemindex.extent.0, halide_error_buffer_extents_negative("Input buffer elemindex", 0, elemindex.extent.0))
 assert(let t3320 = (elemindex.extent.1 + elemindex.min.1) in ((elemindex.min.1 <= elemindex.min.1.required) && (select(nelements == 1, t3320, elemindex.extent.1.required + elemindex.min.1.required) <= t3320)), let t3321 = (elemindex.extent.1 + elemindex.min.1) in halide_error_access_out_of_bounds("Input buffer elemindex", 1, elemindex.min.1.required, select(nelements == 1, t3321, elemindex.extent.1.required + elemindex.min.1.required) + -1, elemindex.min.1, t3321 + -1))
 assert(0 <= elemindex.extent.1, halide_error_buffer_extents_negative("Input buffer elemindex", 1, elemindex.extent.1))
 assert((fij_o.min.0 <= 0) && (npairs <= (fij_o.extent.0 + fij_o.min.0)), halide_error_access_out_of_bounds("Output buffer fij_o", 0, 0, npairs + -1, fij_o.min.0, (fij_o.extent.0 + fij_o.min.0) + -1))
 assert(0 <= fij_o.extent.0, halide_error_buffer_extents_negative("Output buffer fij_o", 0, fij_o.extent.0))
 assert((fij_o.min.1 <= 0) && (3 <= (fij_o.extent.1 + fij_o.min.1)), halide_error_access_out_of_bounds("Output buffer fij_o", 1, 0, 2, fij_o.min.1, (fij_o.extent.1 + fij_o.min.1) + -1))
 assert(0 <= fij_o.extent.1, halide_error_buffer_extents_negative("Output buffer fij_o", 1, fij_o.extent.1))
 assert((pa4.min.0 <= 0) && ((nabf4 + 1) <= (pa4.extent.0 + pa4.min.0)), halide_error_access_out_of_bounds("Input buffer pa4", 0, 0, nabf4, pa4.min.0, (pa4.extent.0 + pa4.min.0) + -1))
 assert(0 <= pa4.extent.0, halide_error_buffer_extents_negative("Input buffer pa4", 0, pa4.extent.0))
 assert((pb4.min.0 <= 0) && (q4 <= (pb4.extent.0 + pb4.min.0)), halide_error_access_out_of_bounds("Input buffer pb4", 0, 0, q4 + -1, pb4.min.0, (pb4.extent.0 + pb4.min.0) + -1))
 assert(0 <= pb4.extent.0, halide_error_buffer_extents_negative("Input buffer pb4", 0, pb4.extent.0))
 assert((pb4.min.1 <= 0) && (3 <= (pb4.extent.1 + pb4.min.1)), halide_error_access_out_of_bounds("Input buffer pb4", 1, 0, 2, pb4.min.1, (pb4.extent.1 + pb4.min.1) + -1))
 assert(0 <= pb4.extent.1, halide_error_buffer_extents_negative("Input buffer pb4", 1, pb4.extent.1))
 assert((pc3.min.0 <= 0) && (k3 <= (pc3.extent.0 + pc3.min.0)), halide_error_access_out_of_bounds("Input buffer pc3", 0, 0, k3 + -1, pc3.min.0, (pc3.extent.0 + pc3.min.0) + -1))
 assert(0 <= pc3.extent.0, halide_error_buffer_extents_negative("Input buffer pc3", 0, pc3.extent.0))
 assert((pc4.min.0 <= 0) && (q4 <= (pc4.extent.0 + pc4.min.0)), halide_error_access_out_of_bounds("Input buffer pc4", 0, 0, q4 + -1, pc4.min.0, (pc4.extent.0 + pc4.min.0) + -1))
 assert(0 <= pc4.extent.0, halide_error_buffer_extents_negative("Input buffer pc4", 0, pc4.extent.0))
 assert((pn3.min.0 <= 0) && ((nabf3 + 1) <= (pn3.extent.0 + pn3.min.0)), halide_error_access_out_of_bounds("Input buffer pn3", 0, 0, nabf3, pn3.min.0, (pn3.extent.0 + pn3.min.0) + -1))
 assert(0 <= pn3.extent.0, halide_error_buffer_extents_negative("Input buffer pn3", 0, pn3.extent.0))
 assert(let t3322 = min(k3, 0) in (((pq.min.0 + -1) <= t3322) && (((t3322 + pq.extent.0.required.s) + 2) <= (pq.extent.0 + pq.min.0))), let t3323 = min(k3, 0) in halide_error_access_out_of_bounds("Input buffer pq", 0, t3323 + 1, (t3323 + pq.extent.0.required.s) + 1, pq.min.0, (pq.extent.0 + pq.min.0) + -1))
 assert(0 <= pq.extent.0, halide_error_buffer_extents_negative("Input buffer pq", 0, pq.extent.0))
 assert((rijs.min.0 <= 0) && (3 <= (rijs.extent.0 + rijs.min.0)), halide_error_access_out_of_bounds("Input buffer rijs", 0, 0, 2, rijs.min.0, (rijs.extent.0 + rijs.min.0) + -1))
 assert(0 <= rijs.extent.0, halide_error_buffer_extents_negative("Input buffer rijs", 0, rijs.extent.0))
 assert((rijs.min.1 <= 0) && (npairs <= (rijs.extent.1 + rijs.min.1)), halide_error_access_out_of_bounds("Input buffer rijs", 1, 0, npairs + -1, rijs.min.1, (rijs.extent.1 + rijs.min.1) + -1))
 assert(0 <= rijs.extent.1, halide_error_buffer_extents_negative("Input buffer rijs", 1, rijs.extent.1))
 assert((ti.min.0 <= 0) && (1 <= (ti.extent.0 + ti.min.0)), halide_error_access_out_of_bounds("Input buffer ti", 0, 0, 0, ti.min.0, (ti.extent.0 + ti.min.0) + -1))
 assert(0 <= ti.extent.0, halide_error_buffer_extents_negative("Input buffer ti", 0, ti.extent.0))
 assert((tj.min.0 <= 0) && (npairs <= (tj.extent.0 + tj.min.0)), halide_error_access_out_of_bounds("Input buffer tj", 0, 0, npairs + -1, tj.min.0, (tj.extent.0 + tj.min.0) + -1))
 assert(0 <= tj.extent.0, halide_error_buffer_extents_negative("Input buffer tj", 0, tj.extent.0))
 assert(Phi.stride.0 == 1, halide_error_constraint_violated("Phi.stride.0", Phi.stride.0, "1", 1))
 assert(Phi.min.0 == 0, halide_error_constraint_violated("Phi.min.0", Phi.min.0, "0", 0))
 assert(Phi.extent.0 == ns, halide_error_constraint_violated("Phi.extent.0", Phi.extent.0, "ns", ns))
 assert(Phi.stride.1 == ns, halide_error_constraint_violated("Phi.stride.1", Phi.stride.1, "ns", ns))
 assert(Phi.min.1 == 0, halide_error_constraint_violated("Phi.min.1", Phi.min.1, "0", 0))
 assert(Phi.extent.1 == ns, halide_error_constraint_violated("Phi.extent.1", Phi.extent.1, "ns", ns))
 assert(besselparams.stride.0 == 1, halide_error_constraint_violated("besselparams.stride.0", besselparams.stride.0, "1", 1))
 assert(besselparams.min.0 == 0, halide_error_constraint_violated("besselparams.min.0", besselparams.min.0, "0", 0))
 assert(besselparams.extent.0 == nbesselpars, halide_error_constraint_violated("besselparams.extent.0", besselparams.extent.0, "nbesselpars", nbesselpars))
 assert(coeff2.stride.0 == nrbf2, halide_error_constraint_violated("coeff2.stride.0", coeff2.stride.0, "nrbf2", nrbf2))
 assert(coeff2.min.0 == 0, halide_error_constraint_violated("coeff2.min.0", coeff2.min.0, "0", 0))
 assert(coeff2.extent.0 == npairs, halide_error_constraint_violated("coeff2.extent.0", coeff2.extent.0, "npairs", npairs))
 assert(coeff2.stride.1 == 1, halide_error_constraint_violated("coeff2.stride.1", coeff2.stride.1, "1", 1))
 assert(coeff2.min.1 == 0, halide_error_constraint_violated("coeff2.min.1", coeff2.min.1, "0", 0))
 assert(coeff2.extent.1 == nrbf2, halide_error_constraint_violated("coeff2.extent.1", coeff2.extent.1, "nrbf2", nrbf2))
 assert(coeff2.stride.2 == (npairs*nrbf2), halide_error_constraint_violated("coeff2.stride.2", coeff2.stride.2, "(nrbf2*npairs)", npairs*nrbf2))
 assert(coeff2.min.2 == 0, halide_error_constraint_violated("coeff2.min.2", coeff2.min.2, "0", 0))
 assert(coeff2.extent.2 == nelements, halide_error_constraint_violated("coeff2.extent.2", coeff2.extent.2, "nelements", nelements))
 assert(coeff23.stride.0 == 1, halide_error_constraint_violated("coeff23.stride.0", coeff23.stride.0, "1", 1))
 assert(coeff23.min.0 == 0, halide_error_constraint_violated("coeff23.min.0", coeff23.min.0, "0", 0))
 assert(coeff23.extent.0 == n23, halide_error_constraint_violated("coeff23.extent.0", coeff23.extent.0, "n23", n23))
 assert(coeff23.stride.1 == n23, halide_error_constraint_violated("coeff23.stride.1", coeff23.stride.1, "n23", n23))
 assert(coeff23.min.1 == 0, halide_error_constraint_violated("coeff23.min.1", coeff23.min.1, "0", 0))
 assert(coeff23.extent.1 == n32, halide_error_constraint_violated("coeff23.extent.1", coeff23.extent.1, "n32", n32))
 assert(coeff23.stride.2 == (n23*n32), halide_error_constraint_violated("coeff23.stride.2", coeff23.stride.2, "(n23*n32)", n23*n32))
 assert(coeff23.min.2 == 0, halide_error_constraint_violated("coeff23.min.2", coeff23.min.2, "0", 0))
 assert(coeff23.extent.2 == nelements, halide_error_constraint_violated("coeff23.extent.2", coeff23.extent.2, "nelements", nelements))
 assert(coeff3.stride.0 == 1, halide_error_constraint_violated("coeff3.stride.0", coeff3.stride.0, "1", 1))
 assert(coeff33.stride.0 == 1, halide_error_constraint_violated("coeff33.stride.0", coeff33.stride.0, "1", 1))
 assert(coeff33.min.0 == 0, halide_error_constraint_violated("coeff33.min.0", coeff33.min.0, "0", 0))
 assert(coeff33.extent.0 == (((n33 + 1)*n33)/2), halide_error_constraint_violated("coeff33.extent.0", coeff33.extent.0, "((n33*(n33 + 1))/2)", ((n33 + 1)*n33)/2))
 assert(coeff33.stride.1 == (((n33 + 1)*n33)/2), halide_error_constraint_violated("coeff33.stride.1", coeff33.stride.1, "((n33*(n33 + 1))/2)", ((n33 + 1)*n33)/2))
 assert(coeff33.min.1 == 0, halide_error_constraint_violated("coeff33.min.1", coeff33.min.1, "0", 0))
 assert(coeff33.extent.1 == nelements, halide_error_constraint_violated("coeff33.extent.1", coeff33.extent.1, "nelements", nelements))
 assert(coeff4.stride.0 == 1, halide_error_constraint_violated("coeff4.stride.0", coeff4.stride.0, "1", 1))
 assert(elemindex.stride.0 == 1, halide_error_constraint_violated("elemindex.stride.0", elemindex.stride.0, "1", 1))
 assert(fij_o.stride.0 == 3, halide_error_constraint_violated("fij_o.stride.0", fij_o.stride.0, "3", 3))
 assert(fij_o.min.0 == 0, halide_error_constraint_violated("fij_o.min.0", fij_o.min.0, "0", 0))
 assert(fij_o.extent.0 == npairs, halide_error_constraint_violated("fij_o.extent.0", fij_o.extent.0, "npairs", npairs))
 assert(fij_o.stride.1 == 1, halide_error_constraint_violated("fij_o.stride.1", fij_o.stride.1, "1", 1))
 assert(fij_o.min.1 == 0, halide_error_constraint_violated("fij_o.min.1", fij_o.min.1, "0", 0))
 assert(fij_o.extent.1 == 3, halide_error_constraint_violated("fij_o.extent.1", fij_o.extent.1, "3", 3))
 assert(pa4.stride.0 == 1, halide_error_constraint_violated("pa4.stride.0", pa4.stride.0, "1", 1))
 assert(pb4.stride.0 == 1, halide_error_constraint_violated("pb4.stride.0", pb4.stride.0, "1", 1))
 assert(pc3.stride.0 == 1, halide_error_constraint_violated("pc3.stride.0", pc3.stride.0, "1", 1))
 assert(pc4.stride.0 == 1, halide_error_constraint_violated("pc4.stride.0", pc4.stride.0, "1", 1))
 assert(pn3.stride.0 == 1, halide_error_constraint_violated("pn3.stride.0", pn3.stride.0, "1", 1))
 assert(pq.stride.0 == 1, halide_error_constraint_violated("pq.stride.0", pq.stride.0, "1", 1))
 assert(rijs.stride.0 == 1, halide_error_constraint_violated("rijs.stride.0", rijs.stride.0, "1", 1))
 assert(rijs.min.0 == 0, halide_error_constraint_violated("rijs.min.0", rijs.min.0, "0", 0))
 assert(rijs.extent.0 == 3, halide_error_constraint_violated("rijs.extent.0", rijs.extent.0, "3", 3))
 assert(rijs.stride.1 == 3, halide_error_constraint_violated("rijs.stride.1", rijs.stride.1, "3", 3))
 assert(rijs.min.1 == 0, halide_error_constraint_violated("rijs.min.1", rijs.min.1, "0", 0))
 assert(rijs.extent.1 == npairs, halide_error_constraint_violated("rijs.extent.1", rijs.extent.1, "npairs", npairs))
 assert(ti.stride.0 == 1, halide_error_constraint_violated("ti.stride.0", ti.stride.0, "1", 1))
 assert(tj.stride.0 == 1, halide_error_constraint_violated("tj.stride.0", tj.stride.0, "1", 1))
 let Phi.total_extent.1 = int64(ns)*int64(ns)
 let coeff2.total_extent.1 = int64(nrbf2)*int64(npairs)
 let coeff2.total_extent.2 = coeff2.total_extent.1*int64(nelements)
 let coeff23.total_extent.1 = int64(n32)*int64(n23)
 let coeff23.total_extent.2 = coeff23.total_extent.1*int64(nelements)
 let coeff3.total_extent.1 = int64(coeff3.extent.1)*int64(coeff3.extent.0)
 let coeff3.total_extent.2 = coeff3.total_extent.1*int64(coeff3.extent.2)
 let coeff3.total_extent.3 = coeff3.total_extent.2*int64(coeff3.extent.3)
 let coeff33.total_extent.1 = int64(nelements)*int64(coeff33.extent.0)
 let coeff4.total_extent.1 = int64(coeff4.extent.1)*int64(coeff4.extent.0)
 let coeff4.total_extent.2 = coeff4.total_extent.1*int64(coeff4.extent.2)
 let coeff4.total_extent.3 = coeff4.total_extent.2*int64(coeff4.extent.3)
 let elemindex.total_extent.1 = int64(elemindex.extent.1)*int64(elemindex.extent.0)
 let pb4.total_extent.1 = int64(pb4.extent.1)*int64(pb4.extent.0)
 assert((uint64)abs(int64(ns)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("Phi", (uint64)abs(int64(ns)), (uint64)2147483647))
 assert((uint64)abs(Phi.total_extent.1) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("Phi", (uint64)abs(Phi.total_extent.1), (uint64)2147483647))
 assert(Phi.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("Phi", Phi.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(nbesselpars)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("besselparams", (uint64)abs(int64(nbesselpars)), (uint64)2147483647))
 assert((uint64)abs(int64(npairs)*int64(nrbf2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff2", (uint64)abs(int64(npairs)*int64(nrbf2)), (uint64)2147483647))
 assert((uint64)abs(int64(nrbf2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff2", (uint64)abs(int64(nrbf2)), (uint64)2147483647))
 assert(coeff2.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff2", coeff2.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(nelements)*int64(coeff2.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff2", (uint64)abs(int64(nelements)*int64(coeff2.stride.2)), (uint64)2147483647))
 assert(coeff2.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff2", coeff2.total_extent.2, (int64)2147483647))
 assert((uint64)abs(int64(n23)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff23", (uint64)abs(int64(n23)), (uint64)2147483647))
 assert((uint64)abs(coeff23.total_extent.1) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff23", (uint64)abs(coeff23.total_extent.1), (uint64)2147483647))
 assert(coeff23.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff23", coeff23.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(nelements)*int64(coeff23.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff23", (uint64)abs(int64(nelements)*int64(coeff23.stride.2)), (uint64)2147483647))
 assert(coeff23.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff23", coeff23.total_extent.2, (int64)2147483647))
 assert(uint64(coeff3.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff3", uint64(coeff3.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(coeff3.extent.1)*int64(coeff3.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff3", (uint64)abs(int64(coeff3.extent.1)*int64(coeff3.stride.1)), (uint64)2147483647))
 assert(coeff3.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff3", coeff3.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(coeff3.extent.2)*int64(coeff3.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff3", (uint64)abs(int64(coeff3.extent.2)*int64(coeff3.stride.2)), (uint64)2147483647))
 assert(coeff3.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff3", coeff3.total_extent.2, (int64)2147483647))
 assert((uint64)abs(int64(coeff3.extent.3)*int64(coeff3.stride.3)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff3", (uint64)abs(int64(coeff3.extent.3)*int64(coeff3.stride.3)), (uint64)2147483647))
 assert(coeff3.total_extent.3 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff3", coeff3.total_extent.3, (int64)2147483647))
 assert(uint64(coeff33.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff33", uint64(coeff33.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(nelements)*int64(coeff33.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff33", (uint64)abs(int64(nelements)*int64(coeff33.stride.1)), (uint64)2147483647))
 assert(coeff33.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff33", coeff33.total_extent.1, (int64)2147483647))
 assert(uint64(coeff4.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff4", uint64(coeff4.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(coeff4.extent.1)*int64(coeff4.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff4", (uint64)abs(int64(coeff4.extent.1)*int64(coeff4.stride.1)), (uint64)2147483647))
 assert(coeff4.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff4", coeff4.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(coeff4.extent.2)*int64(coeff4.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff4", (uint64)abs(int64(coeff4.extent.2)*int64(coeff4.stride.2)), (uint64)2147483647))
 assert(coeff4.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff4", coeff4.total_extent.2, (int64)2147483647))
 assert((uint64)abs(int64(coeff4.extent.3)*int64(coeff4.stride.3)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff4", (uint64)abs(int64(coeff4.extent.3)*int64(coeff4.stride.3)), (uint64)2147483647))
 assert(coeff4.total_extent.3 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff4", coeff4.total_extent.3, (int64)2147483647))
 assert(uint64(elemindex.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("elemindex", uint64(elemindex.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(elemindex.extent.1)*int64(elemindex.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("elemindex", (uint64)abs(int64(elemindex.extent.1)*int64(elemindex.stride.1)), (uint64)2147483647))
 assert(elemindex.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("elemindex", elemindex.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(npairs)*(int64)3) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("fij_o", (uint64)abs(int64(npairs)*(int64)3), (uint64)2147483647))
 assert(int64(npairs) <= (int64)715827882, halide_error_buffer_extents_too_large("fij_o", int64(npairs)*(int64)3, (int64)2147483647))
 assert(uint64(pa4.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pa4", uint64(pa4.extent.0), (uint64)2147483647))
 assert(uint64(pb4.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pb4", uint64(pb4.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(pb4.extent.1)*int64(pb4.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pb4", (uint64)abs(int64(pb4.extent.1)*int64(pb4.stride.1)), (uint64)2147483647))
 assert(pb4.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("pb4", pb4.total_extent.1, (int64)2147483647))
 assert(uint64(pc3.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pc3", uint64(pc3.extent.0), (uint64)2147483647))
 assert(uint64(pc4.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pc4", uint64(pc4.extent.0), (uint64)2147483647))
 assert(uint64(pn3.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pn3", uint64(pn3.extent.0), (uint64)2147483647))
 assert(uint64(pq.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pq", uint64(pq.extent.0), (uint64)2147483647))
 assert(uint64(ti.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("ti", uint64(ti.extent.0), (uint64)2147483647))
 assert(uint64(tj.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("tj", uint64(tj.extent.0), (uint64)2147483647))
 assert(!Phi.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer Phi"))
 assert(!besselparams.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer besselparams"))
 assert(!coeff2.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer coeff2"))
 assert(!coeff23.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer coeff23"))
 assert(!coeff3.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer coeff3"))
 assert(!coeff33.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer coeff33"))
 assert(!coeff4.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer coeff4"))
 assert(!e3_o.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer e3_o"))
 assert(!e_o.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer e_o"))
 assert(!elemindex.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer elemindex"))
 assert(!fij_o.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer fij_o"))
 assert(!pa4.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer pa4"))
 assert(!pb4.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer pb4"))
 assert(!pc3.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer pc3"))
 assert(!pc4.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer pc4"))
 assert(!pn3.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer pn3"))
 assert(!pq.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer pq"))
 assert(!rijs.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer rijs"))
 assert(!ti.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer ti"))
 assert(!tj.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer tj"))
 assert(Phi != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer Phi"))
 assert(besselparams != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer besselparams"))
 assert(coeff2 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer coeff2"))
 assert(coeff23 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer coeff23"))
 assert(coeff3 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer coeff3"))
 assert(coeff33 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer coeff33"))
 assert(coeff4 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer coeff4"))
 assert(e3_o != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer e3_o"))
 assert(e_o != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer e_o"))
 assert((elemindex != (void *)reinterpret((uint64)0)) || (nelements == 1), halide_error_host_is_null("Input buffer elemindex"))
 assert(fij_o != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer fij_o"))
 assert(pa4 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer pa4"))
 assert(pb4 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer pb4"))
 assert(pc3 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer pc3"))
 assert(pc4 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer pc4"))
 assert(pn3 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer pn3"))
 assert(pq != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer pq"))
 assert(rijs != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer rijs"))
 assert(ti != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer ti"))
 assert(tj != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer tj"))
 let tm.abfip.extent_realized.s = max(k3*3, k3 + 2)
 allocate tm[float64 * 1 * max(tm.abfip.extent_realized.s, 1) * 4]
 allocate abf4[float64 * npairs * k3 * 4]
 produce abf4 {
  for (abf4.s0.pairindex, 0, npairs) {
   for (abf4.s0.abfi, 0, k3) {
    let tm.s0.abfip.max_1 = max((k3*3) + -1, abf4.s0.abfi)
    produce tm {
     for (tm.s0.abfip, 0, tm.s0.abfip.max_1 + 1) {
      let t2781 = tm.s0.abfip*4
      for (tm.s0.c, 0, 4) {
       tm[t2781 + tm.s0.c] = 0.000000
      }
     }
     tm[0] = 1.000000
     let t2783 = abf4.s0.pairindex*3
     for (tm.s2.r136$x.rebased, 0, k3 + 1) {
      let t2384 = pq[((k3 - pq.min.0) + tm.s2.r136$x.rebased) + 1]
      let t2385 = rijs[t2783 + 2]
      let t2386 = rijs[t2783]
      let t2387 = rijs[t2783 + 1]
      let t2388 = (float64)sqrt_f64((t2385*t2385) + ((t2386*t2386) + (t2387*t2387)))
      tm[(tm.s2.r136$x.rebased*4) + 4] = tm[(max(min(pq[(tm.s2.r136$x.rebased - pq.min.0) + 1], k3*3), 1)*4) + -4]*select(1 < t2384, select(t2384 == 2, (1.000000/t2388)*t2387, select(t2384 < 3, 0.000000, (1.000000/t2388)*t2385)), (1.000000/t2388)*t2386)
     }
     let t2787 = abf4.s0.pairindex*3
     for (tm.s2.r136$x.rebased, 0, k3 + 1) {
      let t2389 = pq[((k3 - pq.min.0) + tm.s2.r136$x.rebased) + 1]
      let t2390 = 1 < t2389
      let t2391.s = min(pq[(tm.s2.r136$x.rebased - pq.min.0) + 1], k3*3)
      let t2392 = rijs[t2787 + 2]
      let t2393 = rijs[t2787]
      let t2394 = rijs[t2787 + 1]
      let t2395 = (float64)sqrt_f64((t2392*t2392) + ((t2393*t2393) + (t2394*t2394)))
      let t2673 = max(t2391.s, 1)
      tm[(tm.s2.r136$x.rebased*4) + 5] = select(t2390, 0.000000, tm[(t2673*4) + -4]) + (tm[(t2673*4) + -3]*select(t2390, select(t2389 == 2, (1.000000/t2395)*t2394, select(t2389 < 3, 0.000000, (1.000000/t2395)*t2392)), (1.000000/t2395)*t2393))
     }
     let t2790 = abf4.s0.pairindex*3
     for (tm.s2.r136$x.rebased, 0, k3 + 1) {
      let t2396 = pq[((k3 - pq.min.0) + tm.s2.r136$x.rebased) + 1]
      let t2397 = t2396 == 2
      let t2398.s = min(pq[(tm.s2.r136$x.rebased - pq.min.0) + 1], k3*3)
      let t2399 = rijs[t2790 + 2]
      let t2400 = rijs[t2790]
      let t2401 = rijs[t2790 + 1]
      let t2402 = (float64)sqrt_f64((t2399*t2399) + ((t2400*t2400) + (t2401*t2401)))
      let t2674 = max(t2398.s, 1)
      tm[(tm.s2.r136$x.rebased*4) + 6] = select(t2397, tm[(t2674*4) + -4], 0.000000) + (tm[(t2674*4) + -2]*select(1 < t2396, select(t2397, (1.000000/t2402)*t2401, select(t2396 < 3, 0.000000, (1.000000/t2402)*t2399)), (1.000000/t2402)*t2400))
     }
     let t2793 = abf4.s0.pairindex*3
     for (tm.s2.r136$x.rebased, 0, k3 + 1) {
      let t2403 = pq[((k3 - pq.min.0) + tm.s2.r136$x.rebased) + 1]
      let t2404 = t2403 < 3
      let t2405.s = min(pq[(tm.s2.r136$x.rebased - pq.min.0) + 1], k3*3)
      let t2406 = rijs[t2793 + 2]
      let t2407 = rijs[t2793]
      let t2408 = rijs[t2793 + 1]
      let t2409 = (float64)sqrt_f64((t2406*t2406) + ((t2407*t2407) + (t2408*t2408)))
      let t2675 = max(t2405.s, 1)
      tm[(tm.s2.r136$x.rebased*4) + 7] = select(t2404, 0.000000, tm[(t2675*4) + -4]) + (tm[(t2675*4) + -1]*select(1 < t2403, select(t2403 == 2, (1.000000/t2409)*t2408, select(t2404, 0.000000, (1.000000/t2409)*t2406)), (1.000000/t2409)*t2407))
     }
    }
    consume tm {
     abf4[((abf4.s0.abfi*npairs) + abf4.s0.pairindex)*4] = tm[abf4.s0.abfi*4]
     let t2410 = rijs[(abf4.s0.pairindex*3) + 2]
     let t2412 = rijs[abf4.s0.pairindex*3]
     let t2413 = rijs[(abf4.s0.pairindex*3) + 1]
     let t2415 = (float64)sqrt_f64((t2410*t2410) + ((t2412*t2412) + (t2413*t2413)))
     let t2416 = (1.000000/t2415)*((1.000000/t2415)*(1.000000/t2415))
     abf4[(((abf4.s0.abfi*npairs) + abf4.s0.pairindex)*4) + 1] = ((tm[(abf4.s0.abfi*4) + 1]*(((t2413*t2413) + (t2410*t2410))*t2416)) - (tm[(abf4.s0.abfi*4) + 2]*((t2412*t2413)*t2416))) - (tm[(abf4.s0.abfi*4) + 3]*((t2410*t2412)*t2416))
     let t2417 = rijs[(abf4.s0.pairindex*3) + 2]
     let t2419 = rijs[abf4.s0.pairindex*3]
     let t2421 = rijs[(abf4.s0.pairindex*3) + 1]
     let t2422 = (float64)sqrt_f64((t2417*t2417) + ((t2419*t2419) + (t2421*t2421)))
     let t2423 = (1.000000/t2422)*((1.000000/t2422)*(1.000000/t2422))
     abf4[(((abf4.s0.abfi*npairs) + abf4.s0.pairindex)*4) + 2] = ((tm[(abf4.s0.abfi*4) + 2]*(((t2419*t2419) + (t2417*t2417))*t2423)) - (tm[(abf4.s0.abfi*4) + 1]*((t2419*t2421)*t2423))) - (tm[(abf4.s0.abfi*4) + 3]*((t2417*t2421)*t2423))
     let t2424 = rijs[abf4.s0.pairindex*3]
     let t2425 = rijs[(abf4.s0.pairindex*3) + 1]
     let t2426 = (t2424*t2424) + (t2425*t2425)
     let t2427 = rijs[(abf4.s0.pairindex*3) + 2]
     let t2428 = (float64)sqrt_f64((t2427*t2427) + t2426)
     let t2429 = (1.000000/t2428)*((1.000000/t2428)*(1.000000/t2428))
     abf4[(((abf4.s0.abfi*npairs) + abf4.s0.pairindex)*4) + 3] = (tm[(abf4.s0.abfi*4) + 3]*(t2426*t2429)) - ((tm[(abf4.s0.abfi*4) + 2]*((t2425*t2427)*t2429)) + (tm[(abf4.s0.abfi*4) + 1]*((t2424*t2427)*t2429)))
    }
   }
  }
 }
 free tm
 allocate abf_f[float64 * adegree * npairs]
 allocate dabf_f[float64 * adegree * npairs * 3]
 produce dabf_f {
  produce abf_f {
   let t2801 = (float64)rcut - (float64)rin
   let t2802 = adegree*npairs
   let t2797 = (float64)exp_f64(-1.000000)
   let t2794 = max(npairs, 0)
   let t2795 = max(adegree, 0)
   let t2796 = 1.000000/t2801
   for (abf_f.s0.fused.pairindex, 0, t2794) {
    let t2808 = abf_f.s0.fused.pairindex*adegree
    let t2805 = 3.000000/(t2797*t2801)
    let t2803 = abf_f.s0.fused.pairindex*3
    let t2807 = (t2802*2) + t2808
    let t2806 = t2802 + t2808
    for (abf_f.s0.fused.basis function index, 0, t2795) {
     let t2430 = rijs[t2803 + 2]
     let t2431 = rijs[t2803]
     let t2432 = rijs[t2803 + 1]
     let t2433 = (float64)sqrt_f64((t2430*t2430) + ((t2431*t2431) + (t2432*t2432)))
     let t2434 = (t2433 - (float64)rin)*t2796
     let t2676 = (t2434*t2434)*t2434
     abf_f[abf_f.s0.fused.basis function index + t2808] = ((float64)exp_f64(-1.000000/(float64)sqrt_f64(((1.000000 - t2676)*(1.000000 - t2676)) + 0.000001))/t2797)*(1.000000/(float64)pow_f64(t2433, float64((abf_f.s0.fused.basis function index + 1))))
     let t2436 = rijs[t2803]
     let t2437 = rijs[t2803 + 2]
     let t2438 = rijs[t2803 + 1]
     let t2439 = (float64)sqrt_f64((t2437*t2437) + ((t2436*t2436) + (t2438*t2438)))
     let t2441 = (t2439 - (float64)rin)*t2796
     let t2444 = let t3324 = ((t2441*t2441)*t2441) in ((1.000000 - t3324)*(1.000000 - t3324))
     let t2446 = (float64)exp_f64(-1.000000/(float64)sqrt_f64(t2444 + 0.000001))
     let t2678 = t2441*t2441
     dabf_f[abf_f.s0.fused.basis function index + t2808] = ((1.000000/t2439)*t2436)*((1.000000/(float64)pow_f64(t2439, float64((abf_f.s0.fused.basis function index + 1))))*(((1.000000/(float64)pow_f64(t2444 + 0.000001, 1.500000))*(((t2678*t2805)*t2446)*((t2441*t2678) + -1.000000))) - ((1.000000/t2439)*((t2446/t2797)*(float64(abf_f.s0.fused.basis function index) + 1.000000)))))
     let t2447 = rijs[t2803 + 1]
     let t2448 = rijs[t2803 + 2]
     let t2449 = rijs[t2803]
     let t2450 = (float64)sqrt_f64((t2448*t2448) + ((t2449*t2449) + (t2447*t2447)))
     let t2452 = (t2450 - (float64)rin)*t2796
     let t2455 = let t3325 = ((t2452*t2452)*t2452) in ((1.000000 - t3325)*(1.000000 - t3325))
     let t2457 = (float64)exp_f64(-1.000000/(float64)sqrt_f64(t2455 + 0.000001))
     let t2680 = t2452*t2452
     dabf_f[abf_f.s0.fused.basis function index + t2806] = ((1.000000/t2450)*t2447)*((1.000000/(float64)pow_f64(t2450, float64((abf_f.s0.fused.basis function index + 1))))*(((1.000000/(float64)pow_f64(t2455 + 0.000001, 1.500000))*(((t2680*t2805)*t2457)*((t2452*t2680) + -1.000000))) - ((1.000000/t2450)*((t2457/t2797)*(float64(abf_f.s0.fused.basis function index) + 1.000000)))))
     let t2458 = rijs[t2803 + 2]
     let t2459 = rijs[t2803]
     let t2460 = rijs[t2803 + 1]
     let t2461 = (float64)sqrt_f64((t2458*t2458) + ((t2459*t2459) + (t2460*t2460)))
     let t2463 = (t2461 - (float64)rin)*t2796
     let t2466 = let t3326 = ((t2463*t2463)*t2463) in ((1.000000 - t3326)*(1.000000 - t3326))
     let t2468 = (float64)exp_f64(-1.000000/(float64)sqrt_f64(t2466 + 0.000001))
     let t2682 = t2463*t2463
     dabf_f[abf_f.s0.fused.basis function index + t2807] = ((1.000000/t2461)*t2458)*((1.000000/(float64)pow_f64(t2461, float64((abf_f.s0.fused.basis function index + 1))))*(((1.000000/(float64)pow_f64(t2466 + 0.000001, 1.500000))*(((t2682*t2805)*t2468)*((t2463*t2682) + -1.000000))) - ((1.000000/t2461)*((t2468/t2797)*(float64(abf_f.s0.fused.basis function index) + 1.000000)))))
    }
   }
  }
 }
 allocate drbf_f[float64 * nbesselpars * bdegree * npairs * 3]
 allocate rbf[float64 * nbesselpars * bdegree * npairs]
 produce rbf {
  produce drbf_f {
   let t2816 = (float64)rcut - (float64)rin
   let t2813 = (float64)exp_f64(-1.000000)
   let t2809 = max(npairs, 0)
   let t2810 = max(nbesselpars, 0)
   let t2811 = max(bdegree, 0)
   let t2812 = 1.000000/t2816
   let t2815 = bdegree*nbesselpars
   for (drbf_f.s0.fused.pairindex, 0, t2809) {
    let t2824 = drbf_f.s0.fused.pairindex*t2815
    let t2825 = 1.000000/t2816
    let t2818 = (float64)sqrt_f64(t2825*2.000000)
    let t2820 = 3.000000/(t2813*t2816)
    let t2822 = (drbf_f.s0.fused.pairindex + npairs)*t2815
    let t2817 = drbf_f.s0.fused.pairindex*3
    let t2823 = ((npairs*t2815)*2) + t2824
    for (drbf_f.s0.fused.basis function param, 0, t2810) {
     let t2826 = drbf_f.s0.fused.basis function param + t2824
     let t2828 = drbf_f.s0.fused.basis function param + t2823
     let t2827 = drbf_f.s0.fused.basis function param + t2822
     for (drbf_f.s0.fused.basis function index, 0, t2811) {
      let t2469 = rijs[t2817]
      let t2470 = rijs[t2817 + 2]
      let t2471 = rijs[t2817 + 1]
      let t2472 = (float64)sqrt_f64((t2470*t2470) + ((t2469*t2469) + (t2471*t2471)))
      let t2474.s = besselparams[drbf_f.s0.fused.basis function param]
      let t2476 = (float64)exp_f64(0.000000 - ((max(t2474.s, 0.001000)*(t2472 - (float64)rin))*t2812))
      let t2477 = (float64)exp_f64(0.000000 - max(t2474.s, 0.001000))
      let t2478 = ((1.000000 - t2476)/(1.000000 - t2477))*float64((drbf_f.s0.fused.basis function index + 1))
      let t2479 = (t2472 - (float64)rin)*t2812
      let t2482 = let t3327 = ((t2479*t2479)*t2479) in ((1.000000 - t3327)*(1.000000 - t3327))
      let t2483 = (float64)exp_f64(-1.000000/(float64)sqrt_f64(t2482 + 0.000001))
      let t2485 = t2483/t2813
      let t2486 = (float64)sin_f64(t2478*3.141593)
      let t2685 = t2472 - (float64)rin
      let t2686 = t2479*t2479
      drbf_f[(drbf_f.s0.fused.basis function index*nbesselpars) + t2826] = ((1.000000/t2472)*t2469)*((t2818/float64((drbf_f.s0.fused.basis function index + 1)))*(((((((max(t2474.s, 0.001000)*t2825)*t2476)/(1.000000 - t2477))*(((float64)cos_f64(t2478*3.141593)*float64((drbf_f.s0.fused.basis function index + 1)))*t2485))*3.141593)/t2685) + (((((1.000000/(float64)pow_f64(t2482 + 0.000001, 1.500000))*(((t2686*t2820)*t2483)*((t2479*t2686) + -1.000000)))*t2486)/t2685) - ((t2485*t2486)/(t2685*t2685)))))
      let t2487 = rijs[t2817 + 1]
      let t2488 = rijs[t2817 + 2]
      let t2489 = rijs[t2817]
      let t2490 = (float64)sqrt_f64((t2488*t2488) + ((t2489*t2489) + (t2487*t2487)))
      let t2492.s = besselparams[drbf_f.s0.fused.basis function param]
      let t2494 = (float64)exp_f64(0.000000 - ((max(t2492.s, 0.001000)*(t2490 - (float64)rin))*t2812))
      let t2495 = (float64)exp_f64(0.000000 - max(t2492.s, 0.001000))
      let t2496 = ((1.000000 - t2494)/(1.000000 - t2495))*float64((drbf_f.s0.fused.basis function index + 1))
      let t2497 = (t2490 - (float64)rin)*t2812
      let t2500 = let t3328 = ((t2497*t2497)*t2497) in ((1.000000 - t3328)*(1.000000 - t3328))
      let t2501 = (float64)exp_f64(-1.000000/(float64)sqrt_f64(t2500 + 0.000001))
      let t2503 = t2501/t2813
      let t2504 = (float64)sin_f64(t2496*3.141593)
      let t2689 = t2490 - (float64)rin
      let t2690 = t2497*t2497
      drbf_f[(drbf_f.s0.fused.basis function index*nbesselpars) + t2827] = ((1.000000/t2490)*t2487)*((t2818/float64((drbf_f.s0.fused.basis function index + 1)))*(((((((max(t2492.s, 0.001000)*t2825)*t2494)/(1.000000 - t2495))*(((float64)cos_f64(t2496*3.141593)*float64((drbf_f.s0.fused.basis function index + 1)))*t2503))*3.141593)/t2689) + (((((1.000000/(float64)pow_f64(t2500 + 0.000001, 1.500000))*(((t2690*t2820)*t2501)*((t2497*t2690) + -1.000000)))*t2504)/t2689) - ((t2503*t2504)/(t2689*t2689)))))
      let t2506 = rijs[t2817 + 2]
      let t2507 = rijs[t2817]
      let t2508 = rijs[t2817 + 1]
      let t2509 = (float64)sqrt_f64((t2506*t2506) + ((t2507*t2507) + (t2508*t2508)))
      let t2511.s = besselparams[drbf_f.s0.fused.basis function param]
      let t2513 = (float64)exp_f64(0.000000 - ((max(t2511.s, 0.001000)*(t2509 - (float64)rin))*t2812))
      let t2514 = (float64)exp_f64(0.000000 - max(t2511.s, 0.001000))
      let t2515 = ((1.000000 - t2513)/(1.000000 - t2514))*float64((drbf_f.s0.fused.basis function index + 1))
      let t2516 = (t2509 - (float64)rin)*t2812
      let t2519 = let t3329 = ((t2516*t2516)*t2516) in ((1.000000 - t3329)*(1.000000 - t3329))
      let t2520 = (float64)exp_f64(-1.000000/(float64)sqrt_f64(t2519 + 0.000001))
      let t2522 = t2520/t2813
      let t2523 = (float64)sin_f64(t2515*3.141593)
      let t2694 = t2509 - (float64)rin
      let t2695 = t2516*t2516
      drbf_f[(drbf_f.s0.fused.basis function index*nbesselpars) + t2828] = ((1.000000/t2509)*t2506)*((t2818/float64((drbf_f.s0.fused.basis function index + 1)))*(((((((max(t2511.s, 0.001000)*t2825)*t2513)/(1.000000 - t2514))*(((float64)cos_f64(t2515*3.141593)*float64((drbf_f.s0.fused.basis function index + 1)))*t2522))*3.141593)/t2694) + (((((1.000000/(float64)pow_f64(t2519 + 0.000001, 1.500000))*(((t2695*t2820)*t2520)*((t2516*t2695) + -1.000000)))*t2523)/t2694) - ((t2522*t2523)/(t2694*t2694)))))
      let t2526.s = besselparams[drbf_f.s0.fused.basis function param]
      let t2527 = rijs[t2817 + 2]
      let t2528 = rijs[t2817]
      let t2529 = rijs[t2817 + 1]
      let t2530.s = (float64)sqrt_f64((t2527*t2527) + ((t2528*t2528) + (t2529*t2529)))
      let t2531 = (t2530.s - (float64)rin)*t2812
      let t2698 = max(t2526.s, 0.001000)
      let t2699 = t2530.s - (float64)rin
      let t2700 = (t2531*t2531)*t2531
      rbf[(drbf_f.s0.fused.basis function index*nbesselpars) + t2826] = ((float64)sin_f64((((1.000000 - (float64)exp_f64(0.000000 - ((t2698*t2699)*t2825)))/(1.000000 - (float64)exp_f64(0.000000 - t2698)))*float64((drbf_f.s0.fused.basis function index + 1)))*3.141593)*((t2818/float64((drbf_f.s0.fused.basis function index + 1)))*((float64)exp_f64(-1.000000/(float64)sqrt_f64(((1.000000 - t2700)*(1.000000 - t2700)) + 0.000001))/t2813)))/t2699
     }
    }
   }
  }
 }
 let rbft.rbf_abf_info.min_realized.s = min(select(bdegree < 0, (nbesselpars + -1)*bdegree, 0), bdegree*nbesselpars)
 let rbft.rbf_abf_info.extent_realized = let t3330 = (bdegree < 0) in (let t3331 = ((nbesselpars + -1)*bdegree) in (let t3332 = (bdegree*nbesselpars) in (max(max(select(t3330, 0, t3331) + bdegree, ns), t3332 + adegree) - min(min(select(t3330, t3331, 0), t3332), 0))))
 allocate rbft[float64 * npairs * rbft.rbf_abf_info.extent_realized * 4]
 produce rbft {
  let t2829 = min(rbft.rbf_abf_info.min_realized.s, 0)
  let t2830 = npairs*rbft.rbf_abf_info.extent_realized
  for (rbft.s0.pairindex, 0, npairs) {
   for (rbft.s0.rbf_abf_info, 0, ns) {
    let t2831 = ((rbft.s0.rbf_abf_info - t2829)*npairs) + rbft.s0.pairindex
    for (rbft.s0.rbfty, 0, 4) {
     rbft[(rbft.s0.rbfty*t2830) + t2831] = 0.000000
    }
   }
  }
  consume rbf {
   let t2833 = min(rbft.rbf_abf_info.min_realized.s, 0)
   for (rbft.s1.r87$z, 0, npairs) {
    let t2834 = (bdegree*nbesselpars)*rbft.s1.r87$z
    for (rbft.s1.r87$w, 0, 3) {
     for (rbft.s1.r87$y, 0, bdegree) {
      let t2836 = rbft.s1.r87$y - t2833
      let t2835 = (nbesselpars*rbft.s1.r87$y) + t2834
      for (rbft.s1.r87$x, 0, nbesselpars) {
       rbft[(((bdegree*rbft.s1.r87$x) + t2836)*npairs) + rbft.s1.r87$z] = rbf[rbft.s1.r87$x + t2835]
      }
     }
    }
   }
  }
  free rbf
  consume abf_f {
   let t2837 = (bdegree*nbesselpars) - min(rbft.rbf_abf_info.min_realized.s, 0)
   for (rbft.s2.r92$x, 0, npairs) {
    for (rbft.s2.r92$y, 0, adegree) {
     let t2840 = ((rbft.s2.r92$y + t2837)*npairs) + rbft.s2.r92$x
     let t2839 = (adegree*rbft.s2.r92$x) + rbft.s2.r92$y
     for (rbft.s2.r92$z, 0, 3) {
      rbft[t2840] = abf_f[t2839]
     }
    }
   }
  }
  free abf_f
  consume drbf_f {
   let t2843 = min(rbft.rbf_abf_info.min_realized.s, 0)
   let t2842 = npairs*rbft.rbf_abf_info.extent_realized
   for (rbft.s3.r87$w, 0, 3) {
    let t2847 = bdegree*nbesselpars
    let t2844 = (npairs*t2847)*rbft.s3.r87$w
    let t2846 = (rbft.s3.r87$w + 1)*t2842
    for (rbft.s3.r87$z, 0, npairs) {
     let t2848 = (rbft.s3.r87$z*t2847) + t2844
     let t2849 = rbft.s3.r87$z + t2846
     for (rbft.s3.r87$y, 0, bdegree) {
      let t2851 = rbft.s3.r87$y - t2843
      let t2850 = (nbesselpars*rbft.s3.r87$y) + t2848
      for (rbft.s3.r87$x, 0, nbesselpars) {
       rbft[(((bdegree*rbft.s3.r87$x) + t2851)*npairs) + t2849] = drbf_f[rbft.s3.r87$x + t2850]
      }
     }
    }
   }
  }
  free drbf_f
  consume dabf_f {
   let t2852 = npairs*rbft.rbf_abf_info.extent_realized
   let t2854 = (bdegree*nbesselpars) - min(rbft.rbf_abf_info.min_realized.s, 0)
   for (rbft.s4.r92$x, 0, npairs) {
    let t2855 = adegree*rbft.s4.r92$x
    let t2857 = rbft.s4.r92$x + t2852
    for (rbft.s4.r92$y, 0, adegree) {
     let t2859 = adegree*npairs
     let t2860 = ((rbft.s4.r92$y + t2854)*npairs) + t2857
     let t2858 = rbft.s4.r92$y + t2855
     for (rbft.s4.r92$z, 0, 3) {
      rbft[(rbft.s4.r92$z*t2852) + t2860] = dabf_f[(rbft.s4.r92$z*t2859) + t2858]
     }
    }
   }
  }
  free dabf_f
 }
 let rbf$1.i.extent_realized = max(max(nrbf3, rbf$1.s1.i.max.s), nrbf2)
 allocate rbf$1[float64 * npairs * rbf$1.i.extent_realized * 4]
 produce rbf$1 {
  let t2861 = npairs*rbf$1.i.extent_realized
  for (rbf$1.s0.c, 0, 4) {
   let t2862 = rbf$1.s0.c*t2861
   for (rbf$1.s0.i, 0, rbf$1.s1.i.max.s) {
    let t2863 = (npairs*rbf$1.s0.i) + t2862
    for (rbf$1.s0.j, 0, npairs) {
     rbf$1[rbf$1.s0.j + t2863] = 0.000000
    }
   }
  }
  consume rbft {
   let t2866 = min(rbft.rbf_abf_info.min_realized.s, 0)
   let t2865 = npairs*rbft.rbf_abf_info.extent_realized
   let t2864 = npairs*rbf$1.i.extent_realized
   for (rbf$1.s1.c, 0, 4) {
    let t2868 = rbf$1.s1.c*t2865
    let t2867 = rbf$1.s1.c*t2864
    for (rbf$1.s1.i, 0, rbf$1.s1.i.max.s) {
     let t2870 = ns*rbf$1.s1.i
     let t2869 = (npairs*rbf$1.s1.i) + t2867
     for (rbf$1.s1.j, 0, npairs) {
      let t2871 = rbf$1.s1.j + t2869
      let t2872 = rbf$1.s1.j + t2868
      for (rbf$1.s1.r110$x, 0, ns) {
       rbf$1[t2871] = rbf$1[t2871] + (Phi[rbf$1.s1.r110$x + t2870]*rbft[((rbf$1.s1.r110$x - t2866)*npairs) + t2872])
      }
     }
    }
   }
  }
  free rbft
 }
 let U.m.extent_realized = max(max(U.s0.m.max.s, nrbf4), nrbf3)
 let U.k.extent_realized = max(max(U.s0.k.max.s, k4), k3)
 allocate U[float64 * npairs * U.k.extent_realized * U.m.extent_realized * 4]
 let sumU.m.extent_realized = max(max(U.s0.m.max.s, nrbf4), nrbf3)
 let sumU.k.extent_realized = max(max(k4, sumU.s0.k.max) + 1, k3)
 let sumU.n.extent_realized = let t3333 = (nelements == 1) in max(max(select(t3333, 0, nelements + -1), max(select(t3333, 0, max(nelements, 1) + -1), nelements + -1)) + 1, nelements)
 allocate sumU[float64 * sumU.n.extent_realized * sumU.k.extent_realized * sumU.m.extent_realized]
 produce sumU {
  produce U {
   let t2880 = max(nelements, 1)
   let t2874 = max(sumU.s0.k.max + 1, U.s0.k.max.s)
   let t2875 = max(nelements, npairs)
   let t2873 = max(U.s0.m.max.s, 0)
   let t2876 = min(npairs, t2880)
   let t2878 = sumU.k.extent_realized*sumU.n.extent_realized
   let t2877 = U.k.extent_realized*npairs
   for (U.s0.fused.m, 0, t2873) {
    let U.s0.fused.k.epilogue.s = min(min(U.s0.k.max.s, t2874), sumU.s0.k.max + 1)
    let t2881 = max(U.s0.fused.k.epilogue.s, 0)
    let t2882 = min(max(t2875, 1), t2876)
    let t2884 = U.s0.fused.m*t2878
    let t2883 = U.s0.fused.m*t2877
    for (U.s0.fused.k, 0, t2881) {
     let t2886 = max(t2882, 0)
     let t2888 = (U.s0.fused.k*sumU.n.extent_realized) + t2884
     let t2887 = (U.s0.fused.k*npairs) + t2883
     for (U.s0.fused.n, 0, t2886) {
      let t2889 = (U.s0.fused.n + t2887)*4
      for (U.s0.crab.rebased, 0, 3) {
       U[U.s0.crab.rebased + t2889] = 0.000000
      }
      sumU[U.s0.fused.n + t2888] = 0.000000
     }
     let U.s0.fused.n.new_max.s = max(t2875, t2882)
     let t2894 = max(t2882, 0)
     let t2890 = max(U.s0.fused.n.new_max.s, 1) - t2894
     let t2893 = (U.s0.fused.k*sumU.n.extent_realized) + (t2884 + t2894)
     let t2892 = (U.s0.fused.k*npairs) + (t2883 + t2894)
     for (U.s0.fused.n.rebased, 0, t2890) {
      if (((U.s0.fused.n.rebased + t2894) + 1) <= npairs) {
       let t2895 = (U.s0.fused.n.rebased + t2892)*4
       for (U.s0.crab.rebased, 0, 3) {
        U[U.s0.crab.rebased + t2895] = 0.000000
       }
      }
      if (((U.s0.fused.n.rebased + t2894) + 1) <= t2880) {
       sumU[U.s0.fused.n.rebased + t2893] = 0.000000
      }
     }
    }
    let U.s0.fused.k.new_max.s = max(U.s0.fused.k.epilogue.s, t2874)
    let t2901 = max(U.s0.fused.k.epilogue.s, 0)
    let t2897 = max(t2875, 1)
    let t2900 = U.s0.fused.m*t2878
    let t2899 = U.s0.fused.m*t2877
    let t2896 = max(U.s0.fused.k.new_max.s, 0) - t2901
    for (U.s0.fused.k.rebased, 0, t2896) {
     let t2906 = U.s0.fused.k.rebased + t2901
     let t2902 = (t2906 + 1) <= U.s0.k.max.s
     let t2904 = t2906 <= sumU.s0.k.max
     let t2905 = (sumU.n.extent_realized*t2906) + t2900
     let t2903 = (npairs*t2906) + t2899
     for (U.s0.fused.n, 0, t2897) {
      if (((U.s0.fused.n + 1) <= npairs) && t2902) {
       let t2907 = (U.s0.fused.n + t2903)*4
       for (U.s0.crab.rebased, 0, 3) {
        U[U.s0.crab.rebased + t2907] = 0.000000
       }
      }
      if (((U.s0.fused.n + 1) <= t2880) && t2904) {
       sumU[U.s0.fused.n + t2905] = 0.000000
      }
     }
    }
   }
   consume rbf$1 {
    consume abf4 {
     let t2912 = npairs*rbf$1.i.extent_realized
     let t2909 = U.k.extent_realized*npairs
     for (U.s1.r171$x, 0, nrbf3) {
      let t2914 = U.s1.r171$x*t2909
      let t2913 = U.s1.r171$x*npairs
      for (U.s1.r171$y, 0, k3) {
       let t2922 = U.s1.r171$y*npairs
       let t2920 = (t2912*3) + t2913
       let t2919 = (t2912*2) + t2913
       let t2918 = t2912 + t2913
       for (U.s1.r171$z, 0, npairs) {
        let t2709 = U.s1.r171$z + t2922
        U[((t2914 + t2922) + U.s1.r171$z)*4] = (abf4[(t2709*4) + 1]*rbf$1[U.s1.r171$z + t2913]) + (rbf$1[U.s1.r171$z + t2918]*abf4[t2709*4])
        let t2712 = U.s1.r171$z + t2922
        U[(((t2914 + t2922) + U.s1.r171$z)*4) + 1] = (abf4[(t2712*4) + 2]*rbf$1[U.s1.r171$z + t2913]) + (rbf$1[U.s1.r171$z + t2919]*abf4[t2712*4])
        let t2715 = U.s1.r171$z + t2922
        U[(((t2914 + t2922) + U.s1.r171$z)*4) + 2] = (abf4[(t2715*4) + 3]*rbf$1[U.s1.r171$z + t2913]) + (rbf$1[U.s1.r171$z + t2920]*abf4[t2715*4])
        U[(((t2914 + t2922) + U.s1.r171$z)*4) + 3] = 0.000000
       }
      }
     }
     if (nelements == 1) {
      let t2923 = sumU.k.extent_realized*sumU.n.extent_realized
      for (sumU.s1.r171$x, 0, nrbf3) {
       let t2924 = sumU.s1.r171$x*t2923
       let t2925 = npairs*sumU.s1.r171$x
       for (sumU.s1.r171$y, 0, k3) {
        let t2927 = npairs*sumU.s1.r171$y
        let t2926 = (sumU.n.extent_realized*sumU.s1.r171$y) + t2924
        for (sumU.s1.r171$z, 0, npairs) {
         sumU[t2926] = sumU[t2926] + (rbf$1[sumU.s1.r171$z + t2925]*abf4[(sumU.s1.r171$z + t2927)*4])
        }
       }
      }
     } else {
      let t2928 = sumU.k.extent_realized*sumU.n.extent_realized
      for (sumU.s1.r171$x, 0, nrbf3) {
       let t2929 = sumU.s1.r171$x*t2928
       let t2930 = npairs*sumU.s1.r171$x
       for (sumU.s1.r171$y, 0, k3) {
        let t2932 = npairs*sumU.s1.r171$y
        let t2931 = (sumU.n.extent_realized*sumU.s1.r171$y) + t2929
        for (sumU.s1.r171$z, 0, npairs) {
         let t2554 = max(min(tj[sumU.s1.r171$z - tj.min.0], nelements), 1) + t2931
         sumU[t2554 + -1] = sumU[t2554 + -1] + (rbf$1[sumU.s1.r171$z + t2930]*abf4[(sumU.s1.r171$z + t2932)*4])
        }
       }
      }
     }
    }
   }
   free abf4
  }
 }
 let cU.ne.extent_realized = let t3334 = max(nelements, 1) in max(select(nelements == 1, 1, t3334), t3334)
 allocate cU[float64 * cU.ne.extent_realized * k3 * nrbf3]
 produce cU {
  let t2933 = max(nelements, 1)
  for (cU.s0.rbfThree, 0, nrbf3) {
   let t2935 = (cU.ne.extent_realized*k3)*cU.s0.rbfThree
   for (cU.s0.k3var, 0, k3) {
    let t2936 = (cU.ne.extent_realized*cU.s0.k3var) + t2935
    for (cU.s0.ne, 0, t2933) {
     cU[cU.s0.ne + t2936] = 0.000000
    }
   }
  }
  consume sumU {
   let t2943 = ((nelements + 1)*nelements)/2
   let t2945 = sumU.k.extent_realized*sumU.n.extent_realized
   let t2939 = coeff3.min.3*coeff3.stride.3
   let t2940 = coeff3.min.2*coeff3.stride.2
   let t2941 = coeff3.min.1*coeff3.stride.1
   let t2938 = 0 - ti.min.0
   for (cU.s1.r239$4, 0, nrbf3) {
    let t2946 = (cU.ne.extent_realized*k3)*cU.s1.r239$4
    let t2950 = cU.s1.r239$4*t2945
    let t2948 = cU.s1.r239$4*coeff3.stride.1
    for (cU.s1.r239$y, 0, nabf3) {
     let t2951 = cU.s1.r239$y - pn3.min.0
     for (cU.s1.r239$z, 0, nelements) {
      let cU.s1.r239$w.new_min.s = min(cU.s1.r239$z, nelements)
      let t2954 = nelements - cU.s1.r239$w.new_min.s
      let t2957 = ((cU.s1.r239$z/2)*(((nelements*2) - cU.s1.r239$z) + -3)) + cU.s1.r239$w.new_min.s
      let t2958 = cU.s1.r239$z + t2950
      let t2955 = cU.s1.r239$w.new_min.s + t2946
      for (cU.s1.r239$w.rebased, 0, t2954) {
       let cU.s1.r239$x.new_min.s = min(pn3[t2951], k3)
       let cU.s1.r239_x.new_max$1.s = max(min(pn3[t2951 + 1], k3), cU.s1.r239$x.new_min.s)
       let t2964 = max(cU.s1.r239$x.new_min.s, 0)
       let t2963 = max(min(cU.s1.r239$w.rebased + t2957, t2943), 1)*coeff3.stride.2
       let t2962 = coeff3.stride.2*-1
       let t2959 = max(cU.s1.r239_x.new_max$1.s, 0) - t2964
       let t2960 = cU.s1.r239$w.rebased + t2955
       for (cU.s1.r239$x.rebased, 0, t2959) {
        let t2556 = ((cU.s1.r239$x.rebased + t2964)*cU.ne.extent_realized) + t2960
        cU[t2556] = cU[t2556] + (coeff3[(((((((((max(min(ti[t2938], nelements), 1)*coeff3.stride.3) - t2939) - t2940) - t2941) - coeff3.min.0) + t2962) - coeff3.stride.3) + t2948) + cU.s1.r239$y) + t2963]*(sumU[((cU.s1.r239$x.rebased + t2964)*sumU.n.extent_realized) + t2958]*float64(pc3[(t2964 - pc3.min.0) + cU.s1.r239$x.rebased])))
       }
      }
     }
    }
   }
  }
  consume sumU {
   let t2971 = ((nelements + 1)*nelements)/2
   let t2973 = sumU.k.extent_realized*sumU.n.extent_realized
   let t2967 = coeff3.min.3*coeff3.stride.3
   let t2968 = coeff3.min.2*coeff3.stride.2
   let t2969 = coeff3.min.1*coeff3.stride.1
   let t2966 = 0 - ti.min.0
   for (cU.s2.r239$4, 0, nrbf3) {
    let t2974 = (cU.ne.extent_realized*k3)*cU.s2.r239$4
    let t2978 = cU.s2.r239$4*t2973
    let t2976 = cU.s2.r239$4*coeff3.stride.1
    for (cU.s2.r239$y, 0, nabf3) {
     let t2979 = cU.s2.r239$y - pn3.min.0
     for (cU.s2.r239$z, 0, nelements) {
      let cU.s2.r239$w.new_min.s = min(cU.s2.r239$z, nelements)
      let t2982 = nelements - cU.s2.r239$w.new_min.s
      let t2985 = ((cU.s2.r239$z/2)*(((nelements*2) - cU.s2.r239$z) + -3)) + cU.s2.r239$w.new_min.s
      let t2983 = cU.s2.r239$z + t2974
      let t2986 = cU.s2.r239$w.new_min.s + t2978
      for (cU.s2.r239$w.rebased, 0, t2982) {
       let cU.s2.r239$x.new_min.s = min(pn3[t2979], k3)
       let cU.s2.r239$x.new_max.s = max(min(pn3[t2979 + 1], k3), cU.s2.r239$x.new_min.s)
       let t2992 = max(cU.s2.r239$x.new_min.s, 0)
       let t2990 = max(min(cU.s2.r239$w.rebased + t2985, t2971), 1)*coeff3.stride.2
       let t2989 = coeff3.stride.2*-1
       let t2987 = max(cU.s2.r239$x.new_max.s, 0) - t2992
       let t2991 = cU.s2.r239$w.rebased + t2986
       for (cU.s2.r239$x.rebased, 0, t2987) {
        let t2557 = ((cU.s2.r239$x.rebased + t2992)*cU.ne.extent_realized) + t2983
        cU[t2557] = cU[t2557] + (coeff3[(((((((((max(min(ti[t2966], nelements), 1)*coeff3.stride.3) - t2967) - t2968) - t2969) - coeff3.min.0) + t2989) - coeff3.stride.3) + t2976) + cU.s2.r239$y) + t2990]*(sumU[((cU.s2.r239$x.rebased + t2992)*sumU.n.extent_realized) + t2991]*float64(pc3[(t2992 - pc3.min.0) + cU.s2.r239$x.rebased])))
       }
      }
     }
    }
   }
  }
 }
 allocate dd2[float64 * max(nelements, 1) * nrbf2 * npairs * 3]
 allocate d2$0[float64 * max(nelements, 1) * nrbf2]
 produce d2$0 {
  produce dd2 {
   let t2993 = max(nelements, 1)
   for (d2$0.s0.m, 0, nrbf2) {
    let t2994 = d2$0.s0.m*t2993
    for (d2$0.s0.ne, 0, t2993) {
     d2$0[d2$0.s0.ne + t2994] = 0.000000
    }
   }
   let t2995 = max(nelements, 1)
   for (dd2.s0.dim, 0, 3) {
    for (dd2.s0.n, 0, npairs) {
     let t2998 = nrbf2*t2995
     let t2997 = ((npairs*t2998)*dd2.s0.dim) + (dd2.s0.n*t2998)
     for (dd2.s0.m, 0, nrbf2) {
      let t2999 = (dd2.s0.m*t2995) + t2997
      for (dd2.s0.ne, 0, t2995) {
       dd2[dd2.s0.ne + t2999] = 0.000000
      }
     }
    }
   }
   consume rbf$1 {
    let t3000 = max(nrbf2, 0)
    let t3001 = max(nelements, 1)
    let t3002 = npairs*rbf$1.i.extent_realized
    for (dd2.s1.r197$y, 0, t3000) {
     let t3008 = dd2.s1.r197$y*npairs
     let t3004 = nrbf2*t3001
     let t3003 = dd2.s1.r197$y*t3001
     let t3007 = (t3002*3) + t3008
     let t3006 = (t3002*2) + t3008
     let t3005 = t3002 + t3008
     for (dd2.s1.r197$x, 0, npairs) {
      let t2561 = max(min(tj[dd2.s1.r197$x - tj.min.0], nelements), 1) + ((dd2.s1.r197$x*t3004) + t3003)
      dd2[t2561 + -1] = dd2[t2561 + -1] + rbf$1[dd2.s1.r197$x + t3005]
      let t2564 = max(min(tj[dd2.s1.r197$x - tj.min.0], nelements), 1) + ((dd2.s1.r197$x*t3004) + ((npairs*t3004) + t3003))
      dd2[t2564 + -1] = dd2[t2564 + -1] + rbf$1[dd2.s1.r197$x + t3006]
      let t2568 = max(min(tj[dd2.s1.r197$x - tj.min.0], nelements), 1) + ((dd2.s1.r197$x*t3004) + (((npairs*t3004)*2) + t3003))
      dd2[t2568 + -1] = dd2[t2568 + -1] + rbf$1[dd2.s1.r197$x + t3007]
     }
     let t3009 = dd2.s1.r197$y*t3001
     let t3010 = dd2.s1.r197$y*npairs
     for (d2$0.s1.r197$x, 0, npairs) {
      let t2570 = max(min(tj[d2$0.s1.r197$x - tj.min.0], nelements), 1) + t3009
      d2$0[t2570 + -1] = d2$0[t2570 + -1] + rbf$1[d2$0.s1.r197$x + t3010]
     }
    }
   }
  }
 }
 allocate ind23[int32 * n23 * 2]
 produce ind23 {
  for (ind23.s0.c.rebased, 0, 2) {
   for (ind23.s0.k, 0, n23) {
    let t2571 = ind23.s0.k/nrbf2
    ind23[(ind23.s0.c.rebased*n23) + ind23.s0.k] = mux(ind23.s0.c.rebased + 1, 0, ind23.s0.k - (nrbf2*t2571), t2571)
   }
  }
 }
 allocate cf1[float64 * n32]
 produce cf1 {
  for (cf1.s0.j, 0, n32) {
   cf1[cf1.s0.j] = 0.000000
  }
  consume ind23 {
   consume d2$0 {
    let t3012 = max(nelements, 1)
    let t3013 = 0 - ti.min.0
    for (cf1.s1.j, 0, n32) {
     for (cf1.s1.r261$x, 0, n23) {
      cf1[cf1.s1.j] = cf1[cf1.s1.j] + (d2$0[ind23[cf1.s1.r261$x] + (ind23[cf1.s1.r261$x + n23]*t3012)]*coeff23[(((ti[t3013] + -1)*coeff23.stride.2) + (cf1.s1.j*n23)) + cf1.s1.r261$x])
     }
    }
   }
  }
 }
 let d3$0.kme.extent_realized = max(select(nelements == 1, 1, max(coeff3.extent.2.required.s, 1)), max(((nelements + 1)*nelements)/2, 1))
 allocate d3$0[float64 * nabf3 * nrbf3 * d3$0.kme.extent_realized]
 produce d3$0 {
  let t3015 = max(((nelements + 1)*nelements)/2, 1)
  for (d3$0.s0.kme, 0, t3015) {
   let t3017 = (nabf3*nrbf3)*d3$0.s0.kme
   for (d3$0.s0.rbfThree, 0, nrbf3) {
    let t3018 = (d3$0.s0.rbfThree*nabf3) + t3017
    for (d3$0.s0.abfThree, 0, nabf3) {
     d3$0[d3$0.s0.abfThree + t3018] = 0.000000
    }
   }
  }
  consume sumU {
   if (nelements == 1) {
    let t3019 = sumU.k.extent_realized*sumU.n.extent_realized
    for (d3$0.s1.rbfThree, 0, nrbf3) {
     let t3020 = d3$0.s1.rbfThree*t3019
     let t3021 = d3$0.s1.rbfThree*nabf3
     for (d3$0.s1.r208$y, 0, nabf3) {
      let d3$0.s1.r208$x.new_min.s = min(pn3[d3$0.s1.r208$y - pn3.min.0], k3)
      let d3$0.s1.r208$x.new_max.s = max(min(pn3[(d3$0.s1.r208$y - pn3.min.0) + 1], k3), d3$0.s1.r208$x.new_min.s)
      let t3026 = max(d3$0.s1.r208$x.new_min.s, 0)
      let t3025 = t3026 - pc3.min.0
      let t3022 = max(d3$0.s1.r208$x.new_max.s, 0) - t3026
      let t3024 = d3$0.s1.r208$y + t3021
      for (d3$0.s1.r208$x.rebased, 0, t3022) {
       let t2573 = sumU[((d3$0.s1.r208$x.rebased + t3026)*sumU.n.extent_realized) + t3020]
       d3$0[t3024] = d3$0[t3024] + ((t2573*float64(pc3[d3$0.s1.r208$x.rebased + t3025]))*t2573)
      }
     }
    }
   } else {
    let t3028 = ((nelements + 1)*nelements)/2
    let t3030 = sumU.k.extent_realized*sumU.n.extent_realized
    for (d3$0.s1.rbfThree, 0, nrbf3) {
     let t3031 = (d3$0.s1.rbfThree - nrbf3)*nabf3
     let t3033 = nabf3*nrbf3
     let t3034 = d3$0.s1.rbfThree*t3030
     for (d3$0.s1.r208$y, 0, nabf3) {
      let t3035 = d3$0.s1.r208$y - pn3.min.0
      let t3036 = d3$0.s1.r208$y + t3031
      for (d3$0.s1.r208$w, 0, nelements) {
       let d3$0.s1.r208$z.new_max.s = min(d3$0.s1.r208$w + 1, nelements)
       let t3038 = nelements*2
       for (d3$0.s1.r208$z, 0, d3$0.s1.r208$z.new_max.s) {
        let d3_0.s1.r208_x.new_min$1.s = min(pn3[t3035], k3)
        let d3_0.s1.r208_x.new_max$1.s = max(min(pn3[t3035 + 1], k3), d3_0.s1.r208_x.new_min$1.s)
        let t3045 = max(d3_0.s1.r208_x.new_min$1.s, 0)
        let t3040 = max(d3_0.s1.r208_x.new_max$1.s, 0) - t3045
        let t3041 = (max(min(((d3$0.s1.r208$z/2)*((t3038 - d3$0.s1.r208$z) + -3)) + d3$0.s1.r208$w, t3028), 1)*t3033) + t3036
        let t3044 = d3$0.s1.r208$z + t3034
        let t3043 = d3$0.s1.r208$w + t3034
        for (d3$0.s1.r208$x.rebased, 0, t3040) {
         let t2733 = (d3$0.s1.r208$x.rebased + t3045)*sumU.n.extent_realized
         d3$0[t3041] = d3$0[t3041] + (sumU[t2733 + t3043]*(sumU[t2733 + t3044]*float64(pc3[(t3045 - pc3.min.0) + d3$0.s1.r208$x.rebased])))
        }
       }
      }
     }
    }
   }
  }
 }
 allocate ind33[int32 * n33 * 3]
 produce ind33 {
  for (ind33.s0.c, 0, 3) {
   for (ind33.s0.k, 0, n33) {
    let t2578 = ind33.s0.k/(nabf3*nrbf3)
    let t2579 = ind33.s0.k - ((nabf3*t2578)*nrbf3)
    ind33[(ind33.s0.c*n33) + ind33.s0.k] = mux(ind33.s0.c, t2579 % nabf3, t2579/nabf3, t2578)
   }
  }
 }
 allocate cf133[float64 * n33]
 produce cf133 {
  for (cf133.s0.j, 0, n33) {
   cf133[cf133.s0.j] = 0.000000
  }
  consume ind33 {
   consume d3$0 {
    let t3049 = ((n33 + 1)*n33)/2
    let t3051 = nabf3*nrbf3
    let t3052 = 0 - ti.min.0
    for (cf133.s1.r286$y, 0, n33) {
     let cf133.s1.r286_x.new_min$1.s = min(cf133.s1.r286$y, n33)
     let t3054 = (((n33 + -1)*cf133.s1.r286$y) + cf133.s1.r286_x.new_min$1.s) - (((cf133.s1.r286$y + -1)*cf133.s1.r286$y)/2)
     let t3053 = n33 - cf133.s1.r286_x.new_min$1.s
     let t3055 = (n33*2) + cf133.s1.r286_x.new_min$1.s
     let t3056 = cf133.s1.r286_x.new_min$1.s + n33
     for (cf133.s1.r286$x.rebased, 0, t3053) {
      let t2581.s = min(cf133.s1.r286$x.rebased + t3054, t3049 + -1)
      let t2734 = max(t2581.s, 0)
      cf133[cf133.s1.r286$y] = cf133[cf133.s1.r286$y] + (d3$0[(ind33[cf133.s1.r286$x.rebased + t3056]*nabf3) + (ind33[cf133.s1.r286$x.rebased + cf133.s1.r286_x.new_min$1.s] + (ind33[cf133.s1.r286$x.rebased + t3055]*t3051))]*coeff33[if_then_else(t3049 < (t2734 + 1), return_second(halide_print((char *)stringify(t2734, " error!\n")), t2734), t2734) + ((max(min(ti[t3052], nelements), 1) + -1)*coeff33.stride.1)])
     }
    }
   }
  }
 }
 allocate ind32[int32 * n32 * 3]
 produce ind32 {
  for (ind32.s0.c, 0, 3) {
   for (ind32.s0.k, 0, n32) {
    let t2582 = ind32.s0.k/(nabf3*nrbf3)
    let t2583 = ind32.s0.k - ((nabf3*t2582)*nrbf3)
    ind32[(ind32.s0.c*n32) + ind32.s0.k] = mux(ind32.s0.c, t2583 % nabf3, t2583/nabf3, t2582)
   }
  }
 }
 allocate cf2[float64 * n23]
 produce cf2 {
  for (cf2.s0.i, 0, n23) {
   cf2[cf2.s0.i] = 0.000000
  }
  consume ind32 {
   consume d3$0 {
    let t3061 = nabf3*nrbf3
    let t3062 = 0 - ti.min.0
    for (cf2.s1.i, 0, n23) {
     for (cf2.s1.r268$x, 0, n32) {
      cf2[cf2.s1.i] = cf2[cf2.s1.i] + (d3$0[(ind32[cf2.s1.r268$x + n32]*nabf3) + (ind32[cf2.s1.r268$x] + (ind32[(n32*2) + cf2.s1.r268$x]*t3061))]*coeff23[(cf2.s1.r268$x*n23) + (((ti[t3062] + -1)*coeff23.stride.2) + cf2.s1.i)])
     }
    }
   }
  }
 }
 allocate cf233[float64 * n33]
 produce cf233 {
  for (cf233.s0.j, 0, n33) {
   cf233[cf233.s0.j] = 0.000000
  }
  consume ind33 {
   consume d3$0 {
    let t3064 = ((n33 + 1)*n33)/2
    let t3066 = nabf3*nrbf3
    let t3067 = 0 - ti.min.0
    for (cf233.s1.r286$y, 0, n33) {
     let cf233.s1.r286$x.new_min.s = min(cf233.s1.r286$y, n33)
     let t3069 = (((n33 + -1)*cf233.s1.r286$y) + cf233.s1.r286$x.new_min.s) - (((cf233.s1.r286$y + -1)*cf233.s1.r286$y)/2)
     let t3068 = n33 - cf233.s1.r286$x.new_min.s
     let t3070 = (n33*2) + cf233.s1.r286$y
     let t3071 = cf233.s1.r286$y + n33
     for (cf233.s1.r286$x.rebased, 0, t3068) {
      let t2585.s = min(cf233.s1.r286$x.rebased + t3069, t3064 + -1)
      let t2735 = cf233.s1.r286$x.new_min.s + cf233.s1.r286$x.rebased
      let t2736 = max(t2585.s, 0)
      cf233[t2735] = cf233[t2735] + (d3$0[(ind33[t3071]*nabf3) + (ind33[cf233.s1.r286$y] + (ind33[t3070]*t3066))]*coeff33[if_then_else(t3064 < (t2736 + 1), return_second(halide_print((char *)stringify(t2736, " error!\n")), t2736), t2736) + ((max(min(ti[t3067], nelements), 1) + -1)*coeff33.stride.1)])
     }
    }
   }
  }
 }
 let cu4.ne.extent_realized = let t3335 = (nelements == 1) in (let t3336 = max(nelements, 1) in (max(select(t3335, 0, t3336 + -1), max(select(t3335, 0, nelements + -1), t3336 + -1)) + 1))
 allocate cu4[float64 * cu4.ne.extent_realized * (k4 + 1) * nrbf4]
 produce cu4 {
  let t3072 = max(nelements, 1)
  let t3073 = (k4 + 1)*cu4.ne.extent_realized
  for (cu4.s0.rbf, 0, nrbf4) {
   let t3074 = cu4.s0.rbf*t3073
   for (cu4.s0.kv, 0, k4) {
    let t3075 = (cu4.ne.extent_realized*cu4.s0.kv) + t3074
    for (cu4.s0.ne, 0, t3072) {
     cu4[cu4.s0.ne + t3075] = 0.000000
    }
   }
  }
  consume sumU {
   if (nelements == 1) {
    let t3081 = (k4 + 1)*cu4.ne.extent_realized
    let t3079 = sumU.k.extent_realized*sumU.n.extent_realized
    let t3076 = ((2 - pb4.min.1)*pb4.stride.1) - pb4.min.0
    let t3077 = ((1 - pb4.min.1)*pb4.stride.1) - pb4.min.0
    let t3078 = (pb4.min.1*pb4.stride.1) + pb4.min.0
    let t3080 = ((coeff4.min.1*coeff4.stride.1) + ((coeff4.min.3*coeff4.stride.3) + (coeff4.min.2*coeff4.stride.2))) + coeff4.min.0
    for (cu4.s1.rbf, 0, nrbf4) {
     let t3082 = cu4.s1.rbf*t3081
     for (cu4.s1.r321$5, 0, nrbf4) {
      let t3083 = cu4.s1.r321$5*t3079
      let t3084 = (coeff4.stride.1*cu4.s1.r321$5) - t3080
      for (cu4.s1.r321$4, 0, nabf4) {
       let cu4.s1.r321$w.new_min.s = min(pa4[cu4.s1.r321$4 - pa4.min.0], q4)
       let cu4.s1.r321$w.new_max.s = max(min(pa4[(cu4.s1.r321$4 - pa4.min.0) + 1], q4), cu4.s1.r321$w.new_min.s)
       let t3091 = max(cu4.s1.r321$w.new_min.s, 0)
       let t3088 = t3091 - t3078
       let t3089 = t3091 - pc4.min.0
       let t3085 = max(cu4.s1.r321$w.new_max.s, 0) - t3091
       let t3087 = t3077 + t3091
       let t3086 = t3076 + t3091
       let t3090 = cu4.s1.r321$4 + t3084
       for (cu4.s1.r321$w.rebased, 0, t3085) {
        let t1491 = pb4[cu4.s1.r321$w.rebased + t3086]
        let t1492 = pb4[cu4.s1.r321$w.rebased + t3087]
        let t1493 = pb4[cu4.s1.r321$w.rebased + t3088]
        let t1494.s = pc4[cu4.s1.r321$w.rebased + t3089]
        let t1495 = sumU[(sumU.n.extent_realized*t1493) + t3083]*float64(t1494.s)
        let t1496 = sumU[(sumU.n.extent_realized*t1492) + t3083]
        let t1497 = coeff4[t3090]
        let t1498.s = sumU[(sumU.n.extent_realized*t1491) + t3083]
        cu4[(cu4.ne.extent_realized*t1491) + t3082] = (t1495*t1496)*t1497
        cu4[(cu4.ne.extent_realized*t1492) + t3082] = (t1497*t1498.s)*t1495
        cu4[(cu4.ne.extent_realized*t1493) + t3082] = (t1497*t1498.s)*(t1496*float64(t1494.s))
       }
      }
     }
    }
   } else {
    let t3100 = (k4 + 1)*cu4.ne.extent_realized
    let t3095 = sumU.k.extent_realized*sumU.n.extent_realized
    let t3097 = coeff4.min.3*coeff4.stride.3
    let t3098 = coeff4.min.2*coeff4.stride.2
    let t3099 = coeff4.min.1*coeff4.stride.1
    let t3092 = ((2 - pb4.min.1)*pb4.stride.1) - pb4.min.0
    let t3093 = ((1 - pb4.min.1)*pb4.stride.1) - pb4.min.0
    let t3096 = 0 - ti.min.0
    let t3094 = (pb4.min.1*pb4.stride.1) + pb4.min.0
    for (cu4.s1.rbf, 0, nrbf4) {
     let t3101 = cu4.s1.rbf*t3100
     for (cu4.s1.r321$5, 0, nrbf4) {
      let t3102 = cu4.s1.r321$5*t3095
      let t3103 = coeff4.stride.1*cu4.s1.r321$5
      for (cu4.s1.r321$4, 0, nabf4) {
       let cu4.s1.r321_w.new_min$1.s = min(pa4[cu4.s1.r321$4 - pa4.min.0], q4)
       let cu4.s1.r321_w.new_max$1.s = max(min(pa4[(cu4.s1.r321$4 - pa4.min.0) + 1], q4), cu4.s1.r321_w.new_min$1.s)
       let t3109 = max(cu4.s1.r321_w.new_min$1.s, 0)
       let t3107 = t3109 - t3094
       let t3108 = t3109 - pc4.min.0
       let t3104 = max(cu4.s1.r321_w.new_max$1.s, 0) - t3109
       let t3106 = t3093 + t3109
       let t3105 = t3092 + t3109
       for (cu4.s1.r321$w.rebased, 0, t3104) {
        let t3113 = cu4.s1.r321$w.rebased + t3108
        let t3112 = cu4.s1.r321$w.rebased + t3107
        let t3111 = cu4.s1.r321$w.rebased + t3106
        let t3110 = cu4.s1.r321$w.rebased + t3105
        for (cu4.s1.r321$z, 0, nelements) {
         for (cu4.s1.r321$y.rebased, 0, nelements - cu4.s1.r321$z) {
          let t3115 = (nelements - cu4.s1.r321$z) - cu4.s1.r321$y.rebased
          for (cu4.s1.r321$x.rebased, 0, t3115) {
           let t1511 = pb4[t3110]
           let t1512 = pb4[t3111]
           let t1513 = pb4[t3112]
           let t1514.s = pc4[t3113]
           let t1515 = sumU[((((sumU.n.extent_realized*t1513) + t3102) + cu4.s1.r321$z) + cu4.s1.r321$y.rebased) + cu4.s1.r321$x.rebased]*float64(t1514.s)
           let t1516 = sumU[(((sumU.n.extent_realized*t1512) + t3102) + cu4.s1.r321$z) + cu4.s1.r321$y.rebased]
           let t1517 = let t3337 = (cu4.s1.r321$y.rebased + cu4.s1.r321$z) in (let t3338 = (t3337 + cu4.s1.r321$x.rebased) in coeff4[((((((t3338 + 1)*t3338)*(t3338 + 2))/6) + ((((t3337 + 1)*t3337)/2) + cu4.s1.r321$z))*coeff4.stride.2) + ((((((((max(min(ti[t3096], nelements), 1)*coeff4.stride.3) - t3097) - t3098) - t3099) - coeff4.min.0) - coeff4.stride.3) + t3103) + cu4.s1.r321$4)])
           let t1518.s = sumU[((sumU.n.extent_realized*t1511) + t3102) + cu4.s1.r321$z]
           cu4[((cu4.ne.extent_realized*t1511) + t3101) + cu4.s1.r321$z] = (t1515*t1516)*t1517
           cu4[(((cu4.ne.extent_realized*t1512) + t3101) + cu4.s1.r321$z) + cu4.s1.r321$y.rebased] = (t1517*t1518.s)*t1515
           cu4[((((cu4.ne.extent_realized*t1513) + t3101) + cu4.s1.r321$z) + cu4.s1.r321$y.rebased) + cu4.s1.r321$x.rebased] = (t1517*t1518.s)*(t1516*float64(t1514.s))
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 let dd3.kme.extent_realized = let t3339 = max(((nelements + 1)*nelements)/2, 1) in max(select(nelements == 1, 1, t3339), t3339)
 allocate dd3[float64 * 3 * npairs * nabf3 * nrbf3 * dd3.kme.extent_realized]
 produce dd3 {
  let t3117 = max(((nelements + 1)*nelements)/2, 1)
  for (dd3.s0.kme, 0, t3117) {
   let t3121 = nabf3*npairs
   let t3119 = ((nrbf3*t3121)*dd3.s0.kme)*3
   for (dd3.s0.rbfThree, 0, nrbf3) {
    let t3122 = ((dd3.s0.rbfThree*t3121)*3) + t3119
    for (dd3.s0.abfThree, 0, nabf3) {
     let t3123 = ((dd3.s0.abfThree*npairs)*3) + t3122
     for (dd3.s0.nj, 0, npairs) {
      let t3124 = (dd3.s0.nj*3) + t3123
      for (dd3.s0.dim, 0, 3) {
       dd3[dd3.s0.dim + t3124] = 0.000000
      }
     }
    }
   }
  }
  consume sumU {
   consume U {
    if (nelements == 1) {
     let t3126 = sumU.k.extent_realized*sumU.n.extent_realized
     let t3127 = U.k.extent_realized*npairs
     for (dd3.s1.rbfThree, 0, nrbf3) {
      let t3128 = (nabf3*npairs)*dd3.s1.rbfThree
      let t3130 = dd3.s1.rbfThree*t3127
      let t3129 = dd3.s1.rbfThree*t3126
      for (dd3.s1.r215$y, 0, nabf3) {
       let dd3.s1.r215$x.new_min.s = min(pn3[dd3.s1.r215$y - pn3.min.0], k3)
       let dd3.s1.r215$x.new_max.s = max(min(pn3[(dd3.s1.r215$y - pn3.min.0) + 1], k3), dd3.s1.r215$x.new_min.s)
       let t3134 = max(dd3.s1.r215$x.new_min.s, 0)
       let t3131 = max(dd3.s1.r215$x.new_max.s, 0) - t3134
       let t3132 = (dd3.s1.r215$y*npairs) + t3128
       for (dd3.s1.r215$x.rebased, 0, t3131) {
        let t3138 = dd3.s1.r215$x.rebased + t3134
        let t3135 = (sumU.n.extent_realized*t3138) + t3129
        let t3137 = (npairs*t3138) + t3130
        let t3136 = (t3134 - pc3.min.0) + dd3.s1.r215$x.rebased
        for (dd3.s1.r215$w, 0, npairs) {
         let t2645 = dd3.s1.r215$w + t3132
         let t2591 = sumU[t3135]*float64(pc3[t3136])
         dd3[t2645*3] = dd3[t2645*3] + (U[(dd3.s1.r215$w + t3137)*4]*select(tj[dd3.s1.r215$w - tj.min.0] == 1, t2591*2.000000, t2591))
         let t2593 = sumU[t3135]*float64(pc3[t3136])
         dd3[(t2645*3) + 1] = dd3[(t2645*3) + 1] + (U[((dd3.s1.r215$w + t3137)*4) + 1]*select(tj[dd3.s1.r215$w - tj.min.0] == 1, t2593*2.000000, t2593))
         let t2595 = sumU[t3135]*float64(pc3[t3136])
         dd3[(t2645*3) + 2] = dd3[(t2645*3) + 2] + (U[((dd3.s1.r215$w + t3137)*4) + 2]*select(tj[dd3.s1.r215$w - tj.min.0] == 1, t2595*2.000000, t2595))
        }
       }
      }
     }
    } else {
     let t3145 = nabf3*npairs
     let t3142 = ((nelements + 1)*nelements)/2
     let t3140 = sumU.k.extent_realized*sumU.n.extent_realized
     let t3144 = U.k.extent_realized*npairs
     let t3141 = (elemindex.min.1*elemindex.stride.1) + elemindex.min.0
     for (dd3.s1.rbfThree, 0, nrbf3) {
      let t3148 = nrbf3*t3145
      let t3146 = dd3.s1.rbfThree*t3145
      let t3149 = dd3.s1.rbfThree*t3144
      let t3147 = dd3.s1.rbfThree*t3140
      for (dd3.s1.r215$y, 0, nabf3) {
       let dd3.s1.r215_x.new_min$1.s = min(pn3[dd3.s1.r215$y - pn3.min.0], k3)
       let dd3.s1.r215_x.new_max$1.s = max(min(pn3[(dd3.s1.r215$y - pn3.min.0) + 1], k3), dd3.s1.r215_x.new_min$1.s)
       let t3153 = max(dd3.s1.r215_x.new_min$1.s, 0)
       let t3150 = max(dd3.s1.r215_x.new_max$1.s, 0) - t3153
       let t3151 = (dd3.s1.r215$y*npairs) + t3146
       for (dd3.s1.r215$x.rebased, 0, t3150) {
        let t3157 = dd3.s1.r215$x.rebased + t3153
        let t3154 = (sumU.n.extent_realized*t3157) + t3147
        let t3156 = (npairs*t3157) + t3149
        let t3155 = (t3153 - pc3.min.0) + dd3.s1.r215$x.rebased
        for (dd3.s1.r215$z, 0, nelements) {
         let t3159 = (dd3.s1.r215$z*elemindex.stride.1) - t3141
         let t3158 = dd3.s1.r215$z + t3154
         for (dd3.s1.r215$w, 0, npairs) {
          let t2649 = tj[dd3.s1.r215$w - tj.min.0]
          let t2648 = dd3.s1.r215$w + t3151
          let t2603 = sumU[t3158]*float64(pc3[t3155])
          let t2747 = (max(min(elemindex[(max(min(nelements, t2649), 1) + t3159) + -1], t3142 + -1), 0)*t3148) + t2648
          dd3[t2747*3] = dd3[t2747*3] + (U[(dd3.s1.r215$w + t3156)*4]*select(dd3.s1.r215$z == (t2649 + -1), t2603*2.000000, t2603))
          let t2611 = sumU[t3158]*float64(pc3[t3155])
          let t2749 = (max(min(elemindex[(max(min(nelements, t2649), 1) + t3159) + -1], t3142 + -1), 0)*t3148) + t2648
          dd3[(t2749*3) + 1] = dd3[(t2749*3) + 1] + (U[((dd3.s1.r215$w + t3156)*4) + 1]*select(dd3.s1.r215$z == (t2649 + -1), t2611*2.000000, t2611))
          let t2619 = sumU[t3158]*float64(pc3[t3155])
          let t2751 = (max(min(elemindex[(max(min(nelements, t2649), 1) + t3159) + -1], t3142 + -1), 0)*t3148) + t2648
          dd3[(t2751*3) + 2] = dd3[(t2751*3) + 2] + (U[((dd3.s1.r215$w + t3156)*4) + 2]*select(dd3.s1.r215$z == (t2649 + -1), t2619*2.000000, t2619))
         }
        }
       }
      }
     }
    }
   }
  }
 }
 allocate fij[float64 * npairs * 3]
 produce fij {
  for (fij.s0.n, 0, npairs) {
   let t3160 = fij.s0.n*3
   for (fij.s0.dim, 0, 3) {
    fij[fij.s0.dim + t3160] = 0.000000
   }
  }
  consume rbf$1 {
   let t3163 = npairs*rbf$1.i.extent_realized
   let t3161 = (nrbf2*-1) - coeff2.stride.2
   let t3162 = 0 - ti.min.0
   for (fij.s1.r120$y, 0, nrbf2) {
    let t3167 = fij.s1.r120$y*npairs
    let t3166 = (t3163*3) + t3167
    let t3165 = (t3163*2) + t3167
    let t3164 = t3163 + t3167
    for (fij.s1.r120$x, 0, npairs) {
     fij[fij.s1.r120$x*3] = fij[fij.s1.r120$x*3] + (coeff2[(max(min(tj[fij.s1.r120$x - tj.min.0], npairs + -1), 1)*nrbf2) + (((max(min(ti[t3162], nelements), 1)*coeff2.stride.2) + t3161) + fij.s1.r120$y)]*rbf$1[fij.s1.r120$x + t3164])
     fij[(fij.s1.r120$x*3) + 1] = fij[(fij.s1.r120$x*3) + 1] + (coeff2[(max(min(tj[fij.s1.r120$x - tj.min.0], npairs + -1), 1)*nrbf2) + (((max(min(ti[t3162], nelements), 1)*coeff2.stride.2) + t3161) + fij.s1.r120$y)]*rbf$1[fij.s1.r120$x + t3165])
     fij[(fij.s1.r120$x*3) + 2] = fij[(fij.s1.r120$x*3) + 2] + (coeff2[(max(min(tj[fij.s1.r120$x - tj.min.0], npairs + -1), 1)*nrbf2) + (((max(min(ti[t3162], nelements), 1)*coeff2.stride.2) + t3161) + fij.s1.r120$y)]*rbf$1[fij.s1.r120$x + t3166])
    }
   }
  }
  consume cU {
   consume U {
    if (nelements == 1) {
     let t3169 = U.k.extent_realized*npairs
     for (fij.s2.r244$x, 0, nrbf3) {
      let t3170 = (cU.ne.extent_realized*k3)*fij.s2.r244$x
      let t3171 = fij.s2.r244$x*t3169
      for (fij.s2.r244$y, 0, k3) {
       let t3173 = (fij.s2.r244$y*npairs) + t3171
       let t3172 = (cU.ne.extent_realized*fij.s2.r244$y) + t3170
       for (fij.s2.r244$z, 0, npairs) {
        fij[fij.s2.r244$z*3] = fij[fij.s2.r244$z*3] + (cU[t3172]*U[(fij.s2.r244$z + t3173)*4])
        fij[(fij.s2.r244$z*3) + 1] = fij[(fij.s2.r244$z*3) + 1] + (cU[t3172]*U[((fij.s2.r244$z + t3173)*4) + 1])
        fij[(fij.s2.r244$z*3) + 2] = fij[(fij.s2.r244$z*3) + 2] + (cU[t3172]*U[((fij.s2.r244$z + t3173)*4) + 2])
       }
      }
     }
    } else {
     let t3175 = U.k.extent_realized*npairs
     for (fij.s2.r244$x, 0, nrbf3) {
      let t3176 = (cU.ne.extent_realized*k3)*fij.s2.r244$x
      let t3177 = fij.s2.r244$x*t3175
      for (fij.s2.r244$y, 0, k3) {
       let t3179 = (fij.s2.r244$y*npairs) + t3177
       let t3178 = (cU.ne.extent_realized*fij.s2.r244$y) + t3176
       for (fij.s2.r244$z, 0, npairs) {
        fij[fij.s2.r244$z*3] = fij[fij.s2.r244$z*3] + (cU[(max(min(tj[fij.s2.r244$z - tj.min.0], nelements), 1) + t3178) + -1]*U[(fij.s2.r244$z + t3179)*4])
        fij[(fij.s2.r244$z*3) + 1] = fij[(fij.s2.r244$z*3) + 1] + (cU[(max(min(tj[fij.s2.r244$z - tj.min.0], nelements), 1) + t3178) + -1]*U[((fij.s2.r244$z + t3179)*4) + 1])
        fij[(fij.s2.r244$z*3) + 2] = fij[(fij.s2.r244$z*3) + 2] + (cU[(max(min(tj[fij.s2.r244$z - tj.min.0], nelements), 1) + t3178) + -1]*U[((fij.s2.r244$z + t3179)*4) + 2])
       }
      }
     }
    }
   }
  }
  free cU
  consume dd3 {
   consume ind32 {
    consume cf1 {
     let t3180 = nabf3*npairs
     for (fij.s3.r268$x, 0, n32) {
      let t3183 = nrbf3*t3180
      let t3182 = (n32*2) + fij.s3.r268$x
      let t3184 = fij.s3.r268$x + n32
      for (fij.s3.n, 0, npairs) {
       let t3185 = fij.s3.n*3
       for (fij.s3.dim, 0, 3) {
        let t2754 = fij.s3.dim + t3185
        fij[t2754] = fij[t2754] + (cf1[fij.s3.r268$x]*dd3[((((ind32[fij.s3.r268$x]*npairs) + ((ind32[t3182]*t3183) + (ind32[t3184]*t3180)))*3) + t3185) + fij.s3.dim])
       }
      }
     }
    }
   }
  }
  free cf1
  consume cf2 {
   consume ind23 {
    consume dd2 {
     let t3186 = max(nelements, 1)
     for (fij.s4.r261$x, 0, n23) {
      let t3187 = nrbf2*t3186
      let t3188 = fij.s4.r261$x + n23
      for (fij.s4.n, 0, npairs) {
       let t3191 = npairs*t3187
       let t3190 = fij.s4.n*t3187
       let t3189 = fij.s4.n*3
       for (fij.s4.dim, 0, 3) {
        let t2756 = fij.s4.dim + t3189
        fij[t2756] = fij[t2756] + (cf2[fij.s4.r261$x]*dd2[(fij.s4.dim*t3191) + ((ind23[fij.s4.r261$x] + (ind23[t3188]*t3186)) + t3190)])
       }
      }
     }
    }
   }
  }
  free dd2
  free cf2
  consume dd3 {
   consume cf133 {
    consume ind33 {
     let t3192 = nabf3*npairs
     for (fij.s5.r297$x, 0, n33) {
      let t3195 = nrbf3*t3192
      let t3194 = (n33*2) + fij.s5.r297$x
      let t3196 = fij.s5.r297$x + n33
      for (fij.s5.n, 0, npairs) {
       let t3197 = fij.s5.n*3
       for (fij.s5.dim, 0, 3) {
        let t2759 = fij.s5.dim + t3197
        fij[t2759] = fij[t2759] + (cf133[fij.s5.r297$x]*dd3[((((ind33[fij.s5.r297$x]*npairs) + ((ind33[t3194]*t3195) + (ind33[t3196]*t3192)))*3) + t3197) + fij.s5.dim])
       }
      }
     }
    }
   }
  }
  free cf133
  consume dd3 {
   consume cf233 {
    consume ind33 {
     let t3198 = nabf3*npairs
     for (fij.s6.r297$x, 0, n33) {
      let t3201 = nrbf3*t3198
      let t3200 = (n33*2) + fij.s6.r297$x
      let t3202 = fij.s6.r297$x + n33
      for (fij.s6.n, 0, npairs) {
       let t3203 = fij.s6.n*3
       for (fij.s6.dim, 0, 3) {
        let t2761 = fij.s6.dim + t3203
        fij[t2761] = fij[t2761] + (cf233[fij.s6.r297$x]*dd3[((((ind33[fij.s6.r297$x]*npairs) + ((ind33[t3200]*t3201) + (ind33[t3202]*t3198)))*3) + t3203) + fij.s6.dim])
       }
      }
     }
    }
   }
  }
  free cf233
  free dd3
  consume cu4 {
   consume U {
    if (nelements == 1) {
     let t3204 = (k4 + 1)*cu4.ne.extent_realized
     let t3205 = U.k.extent_realized*npairs
     for (fij.s7.r327$x, 0, nrbf4) {
      let t3207 = fij.s7.r327$x*t3205
      let t3206 = fij.s7.r327$x*t3204
      for (fij.s7.r327$y, 0, k4) {
       let t3209 = (fij.s7.r327$y*npairs) + t3207
       let t3208 = (cu4.ne.extent_realized*fij.s7.r327$y) + t3206
       for (fij.s7.r327$z, 0, npairs) {
        fij[fij.s7.r327$z*3] = fij[fij.s7.r327$z*3] + (cu4[t3208]*U[(fij.s7.r327$z + t3209)*4])
        fij[(fij.s7.r327$z*3) + 1] = fij[(fij.s7.r327$z*3) + 1] + (cu4[t3208]*U[((fij.s7.r327$z + t3209)*4) + 1])
        fij[(fij.s7.r327$z*3) + 2] = fij[(fij.s7.r327$z*3) + 2] + (cu4[t3208]*U[((fij.s7.r327$z + t3209)*4) + 2])
       }
      }
     }
    } else {
     let t3210 = (k4 + 1)*cu4.ne.extent_realized
     let t3211 = U.k.extent_realized*npairs
     for (fij.s7.r327$x, 0, nrbf4) {
      let t3213 = fij.s7.r327$x*t3211
      let t3212 = fij.s7.r327$x*t3210
      for (fij.s7.r327$y, 0, k4) {
       let t3215 = (fij.s7.r327$y*npairs) + t3213
       let t3214 = (cu4.ne.extent_realized*fij.s7.r327$y) + t3212
       for (fij.s7.r327$z, 0, npairs) {
        fij[fij.s7.r327$z*3] = fij[fij.s7.r327$z*3] + (cu4[(max(min(tj[fij.s7.r327$z - tj.min.0], nelements), 1) + t3214) + -1]*U[(fij.s7.r327$z + t3215)*4])
        fij[(fij.s7.r327$z*3) + 1] = fij[(fij.s7.r327$z*3) + 1] + (cu4[(max(min(tj[fij.s7.r327$z - tj.min.0], nelements), 1) + t3214) + -1]*U[((fij.s7.r327$z + t3215)*4) + 1])
        fij[(fij.s7.r327$z*3) + 2] = fij[(fij.s7.r327$z*3) + 2] + (cu4[(max(min(tj[fij.s7.r327$z - tj.min.0], nelements), 1) + t3214) + -1]*U[((fij.s7.r327$z + t3215)*4) + 2])
       }
      }
     }
    }
   }
  }
  free U
  free cu4
 }
 produce fij_o {
  consume fij {
   for (fij_o.s0.n, 0, npairs) {
    let t3216 = fij_o.s0.n*3
    for (fij_o.s0.dim, 0, 3) {
     let t2763 = fij_o.s0.dim + t3216
     fij_o[t2763] = fij[t2763]
    }
   }
  }
 }
 free fij
 allocate e[float64 * 1]
 produce e {
  e[0] = 0.000000
  consume rbf$1 {
   let t3217 = (nrbf2*-1) - coeff2.stride.2
   let t3218 = 0 - ti.min.0
   for (e.s1.r120$y, 0, nrbf2) {
    for (e.s1.r120$x, 0, npairs) {
     e[0] = e[0] + (coeff2[(max(min(tj[e.s1.r120$x - tj.min.0], npairs + -1), 1)*nrbf2) + (((max(min(ti[t3218], nelements), 1)*coeff2.stride.2) + t3217) + e.s1.r120$y)]*rbf$1[(e.s1.r120$y*npairs) + e.s1.r120$x])
    }
   }
  }
  free rbf$1
 }
 produce e_o {
  consume e {
   e_o[0] = e[0]
  }
 }
 free e
 allocate d23$0[float64 * n23 * n32]
 produce d23$0 {
  consume ind32 {
   consume d3$0 {
    consume ind23 {
     consume d2$0 {
      let t3220 = max(nelements, 1)
      let t3222 = nabf3*nrbf3
      for (d23$0.s0.d23j, 0, n32) {
       let t3223 = (n32*2) + d23$0.s0.d23j
       let t3224 = d23$0.s0.d23j + n32
       for (d23$0.s0.d23i, 0, n23) {
        d23$0[(d23$0.s0.d23j*n23) + d23$0.s0.d23i] = d2$0[ind23[d23$0.s0.d23i] + (ind23[d23$0.s0.d23i + n23]*t3220)]*d3$0[(ind32[t3224]*nabf3) + (ind32[d23$0.s0.d23j] + (ind32[t3223]*t3222))]
       }
      }
     }
    }
   }
  }
 }
 free d2$0
 free ind23
 free ind32
 allocate e23$0[float64 * 1]
 produce e23$0 {
  e23$0[0] = 0.000000
  consume d23$0 {
   let t3226 = 0 - ti.min.0
   for (e23$0.s1.r256$y, 0, n32) {
    let t3227 = e23$0.s1.r256$y*n23
    for (e23$0.s1.r256$x, 0, n23) {
     e23$0[0] = e23$0[0] + (d23$0[e23$0.s1.r256$x + t3227]*coeff23[(((ti[t3226] + -1)*coeff23.stride.2) + t3227) + e23$0.s1.r256$x])
    }
   }
  }
  free d23$0
 }
 allocate e3$0[float64 * 1]
 produce e3$0 {
  e3$0[0] = 0.000000
  consume sumU {
   let t3234 = ((nelements + 1)*nelements)/2
   let t3228 = sumU.k.extent_realized*sumU.n.extent_realized
   let t3230 = coeff3.min.3*coeff3.stride.3
   let t3231 = coeff3.min.2*coeff3.stride.2
   let t3232 = coeff3.min.1*coeff3.stride.1
   let t3229 = 0 - ti.min.0
   for (e3$0.s1.r239$4, 0, nrbf3) {
    let t3236 = e3$0.s1.r239$4*t3228
    let t3238 = coeff3.stride.1*e3$0.s1.r239$4
    for (e3$0.s1.r239$y, 0, nabf3) {
     let t3240 = e3$0.s1.r239$y - pn3.min.0
     for (e3$0.s1.r239$z, 0, nelements) {
      let e3$0.s1.r239$w.new_min.s = min(e3$0.s1.r239$z, nelements)
      let t3243 = nelements - e3$0.s1.r239$w.new_min.s
      let t3246 = ((e3$0.s1.r239$z/2)*(((nelements*2) - e3$0.s1.r239$z) + -3)) + e3$0.s1.r239$w.new_min.s
      let t3247 = e3$0.s1.r239$z + t3236
      let t3244 = e3$0.s1.r239$w.new_min.s + t3236
      for (e3$0.s1.r239$w.rebased, 0, t3243) {
       let e3$0.s1.r239$x.new_min.s = min(pn3[t3240], k3)
       let e3$0.s1.r239$x.new_max.s = max(min(pn3[t3240 + 1], k3), e3$0.s1.r239$x.new_min.s)
       let t3253 = max(e3$0.s1.r239$x.new_min.s, 0)
       let t3252 = max(min(e3$0.s1.r239$w.rebased + t3246, t3234), 1)*coeff3.stride.2
       let t3251 = coeff3.stride.2*-1
       let t3248 = max(e3$0.s1.r239$x.new_max.s, 0) - t3253
       let t3250 = e3$0.s1.r239$w.rebased + t3244
       for (e3$0.s1.r239$x.rebased, 0, t3248) {
        let t2767 = (e3$0.s1.r239$x.rebased + t3253)*sumU.n.extent_realized
        e3$0[0] = e3$0[0] + (sumU[t2767 + t3250]*(coeff3[(((((((((max(min(ti[t3229], nelements), 1)*coeff3.stride.3) - t3230) - t3231) - t3232) - coeff3.min.0) + t3251) - coeff3.stride.3) + t3238) + e3$0.s1.r239$y) + t3252]*(sumU[t2767 + t3247]*float64(pc3[(t3253 - pc3.min.0) + e3$0.s1.r239$x.rebased]))))
       }
      }
     }
    }
   }
  }
 }
 allocate d33$0[float64 * max(((n33 + 1)*n33)/2, 1)]
 produce d33$0 {
  let t3254 = max(((n33 + 1)*n33)/2, 1)
  for (d33$0.s0.k, 0, t3254) {
   d33$0[d33$0.s0.k] = 0.000000
  }
  consume ind33 {
   consume d3$0 {
    let t3255 = ((n33 + 1)*n33)/2
    let t3256 = nabf3*nrbf3
    for (d33$0.s1.r286$y, 0, n33) {
     let d33$0.s1.r286$x.new_min.s = min(d33$0.s1.r286$y, n33)
     let t3264 = n33*2
     let t3259 = (((n33 + -1)*d33$0.s1.r286$y) + d33$0.s1.r286$x.new_min.s) - (((d33$0.s1.r286$y + -1)*d33$0.s1.r286$y)/2)
     let t3258 = n33 - d33$0.s1.r286$x.new_min.s
     let t3260 = d33$0.s1.r286$y + t3264
     let t3262 = d33$0.s1.r286$x.new_min.s + t3264
     let t3261 = d33$0.s1.r286$y + n33
     let t3263 = d33$0.s1.r286$x.new_min.s + n33
     for (d33$0.s1.r286$x.rebased, 0, t3258) {
      let t2636.s = min(d33$0.s1.r286$x.rebased + t3259, t3255 + -1)
      let t2637 = let t3340 = max(t2636.s, 0) in if_then_else(t3255 < (t3340 + 1), return_second(halide_print((char *)stringify(t3340, " error!\n")), t3340), t3340)
      d33$0[t2637] = d33$0[t2637] + (d3$0[(ind33[t3261]*nabf3) + (ind33[d33$0.s1.r286$y] + (ind33[t3260]*t3256))]*d3$0[(ind33[d33$0.s1.r286$x.rebased + t3263]*nabf3) + (ind33[d33$0.s1.r286$x.new_min.s + d33$0.s1.r286$x.rebased] + (ind33[d33$0.s1.r286$x.rebased + t3262]*t3256))])
     }
    }
   }
  }
  free d3$0
  free ind33
 }
 allocate e33$0[float64 * 1]
 produce e33$0 {
  e33$0[0] = 0.000000
  consume d33$0 {
   let t3265 = ((n33 + 1)*n33)/2
   let t3266 = 0 - ti.min.0
   for (e33$0.s1.r291$x, 0, t3265) {
    e33$0[0] = e33$0[0] + (d33$0[e33$0.s1.r291$x]*coeff33[((max(min(ti[t3266], nelements), 1) + -1)*coeff33.stride.1) + e33$0.s1.r291$x])
   }
  }
  free d33$0
 }
 allocate e4$0[float64 * 1]
 produce e4$0 {
  e4$0[0] = 0.000000
  consume sumU {
   if (nelements == 1) {
    let t3267 = sumU.k.extent_realized*sumU.n.extent_realized
    let t3268 = pb4.min.1*pb4.stride.1
    let t3269 = ((coeff4.min.1*coeff4.stride.1) + ((coeff4.min.3*coeff4.stride.3) + (coeff4.min.2*coeff4.stride.2))) + coeff4.min.0
    for (e4$0.s1.r321$5, 0, nrbf4) {
     let t3271 = e4$0.s1.r321$5*t3267
     let t3274 = (coeff4.stride.1*e4$0.s1.r321$5) - t3269
     let t3275 = ((pb4.stride.1*2) - t3268) - pb4.min.0
     let t3272 = (pb4.stride.1 - t3268) - pb4.min.0
     let t3273 = pb4.min.0 + t3268
     for (e4$0.s1.r321$4, 0, nabf4) {
      let e4$0.s1.r321$w.new_min.s = min(pa4[e4$0.s1.r321$4 - pa4.min.0], q4)
      let e4$0.s1.r321$w.new_max.s = max(min(pa4[(e4$0.s1.r321$4 - pa4.min.0) + 1], q4), e4$0.s1.r321$w.new_min.s)
      let t3279 = max(e4$0.s1.r321$w.new_min.s, 0)
      let t3276 = max(e4$0.s1.r321$w.new_max.s, 0) - t3279
      let t3278 = e4$0.s1.r321$4 + t3274
      for (e4$0.s1.r321$w.rebased, 0, t3276) {
       e4$0[0] = e4$0[0] + ((sumU[(pb4[(t3272 + t3279) + e4$0.s1.r321$w.rebased]*sumU.n.extent_realized) + t3271]*(sumU[(pb4[(t3279 - t3273) + e4$0.s1.r321$w.rebased]*sumU.n.extent_realized) + t3271]*float64(pc4[(t3279 - pc4.min.0) + e4$0.s1.r321$w.rebased])))*(coeff4[t3278]*sumU[(pb4[(t3275 + t3279) + e4$0.s1.r321$w.rebased]*sumU.n.extent_realized) + t3271]))
      }
     }
    }
   } else {
    let t3280 = sumU.k.extent_realized*sumU.n.extent_realized
    let t3281 = pb4.min.1*pb4.stride.1
    let t3283 = coeff4.min.3*coeff4.stride.3
    let t3284 = coeff4.min.2*coeff4.stride.2
    let t3285 = coeff4.min.1*coeff4.stride.1
    let t3282 = 0 - ti.min.0
    for (e4$0.s1.r321$5, 0, nrbf4) {
     let t3287 = e4$0.s1.r321$5*t3280
     let t3290 = coeff4.stride.1*e4$0.s1.r321$5
     let t3291 = ((pb4.stride.1*2) - t3281) - pb4.min.0
     let t3288 = (pb4.stride.1 - t3281) - pb4.min.0
     let t3289 = pb4.min.0 + t3281
     for (e4$0.s1.r321$4, 0, nabf4) {
      let e4_0.s1.r321_w.new_min$1.s = min(pa4[e4$0.s1.r321$4 - pa4.min.0], q4)
      let e4_0.s1.r321_w.new_max$1.s = max(min(pa4[(e4$0.s1.r321$4 - pa4.min.0) + 1], q4), e4_0.s1.r321_w.new_min$1.s)
      let t3294 = max(e4_0.s1.r321_w.new_min$1.s, 0)
      let t3292 = max(e4_0.s1.r321_w.new_max$1.s, 0) - t3294
      for (e4$0.s1.r321$w.rebased, 0, t3292) {
       let t3296 = (t3294 - t3289) + e4$0.s1.r321$w.rebased
       let t3297 = (t3294 - pc4.min.0) + e4$0.s1.r321$w.rebased
       let t3298 = (t3291 + t3294) + e4$0.s1.r321$w.rebased
       let t3295 = (t3288 + t3294) + e4$0.s1.r321$w.rebased
       for (e4$0.s1.r321$x, 0, nelements) {
        let t3299 = (((e4$0.s1.r321$x + 1)*e4$0.s1.r321$x)*(e4$0.s1.r321$x + 2))/6
        for (e4$0.s1.r321$y, 0, e4$0.s1.r321$x + 1) {
         let t3300 = (((e4$0.s1.r321$y + 1)*e4$0.s1.r321$y)/2) + t3299
         for (e4$0.s1.r321$z, 0, e4$0.s1.r321$y + 1) {
          e4$0[0] = e4$0[0] + ((sumU[((pb4[t3295]*sumU.n.extent_realized) + t3287) + e4$0.s1.r321$y]*(sumU[((pb4[t3296]*sumU.n.extent_realized) + t3287) + e4$0.s1.r321$x]*float64(pc4[t3297])))*(coeff4[((e4$0.s1.r321$z + t3300)*coeff4.stride.2) + ((((((((max(min(ti[t3282], nelements), 1)*coeff4.stride.3) - t3283) - t3284) - t3285) - coeff4.min.0) - coeff4.stride.3) + t3290) + e4$0.s1.r321$4)]*sumU[((pb4[t3298]*sumU.n.extent_realized) + t3287) + e4$0.s1.r321$z]))
         }
        }
       }
      }
     }
    }
   }
  }
  free sumU
 }
 produce e3_o {
  consume e3$0 {
   e3_o[0] = e3$0[0]
  }
  free e3$0
  consume e23$0 {
   e3_o[0] = e3_o[0] + e23$0[0]
  }
  free e23$0
  consume e33$0 {
   e3_o[0] = e3_o[0] + e33$0[0]
  }
  free e33$0
  consume e4$0 {
   e3_o[0] = e3_o[0] + e4$0[0]
  }
  free e4$0
 }
}
}


