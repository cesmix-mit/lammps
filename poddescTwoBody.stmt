module name=poddescTwoBody, target=x86-64-linux-sse41
external_plus_metadata func poddescTwoBody (rijs, besselparams, nbesselpars, bdegree, adegree, npairs, nrbfmax, rin, rcut, Phi, ns, coeff2, ti, tj, nrbf2, k3, k4, q4, pq, pn3, pc3, pa4, pb4, pc4, elemindex, nrbf3, nrbf4, nelements, nd23, nd33, nd34, n32, n23, n33, n43, n34, n44, nabf3, nabf4, nrbf23, nrbf33, nrbf34, nrbf44, nabf23, nabf33, nabf34, nabf44, coeff3, coeff23, coeff33, coeff4, coeff34, coeff44, fij_o, e_o, e3_o) {
assert((uint64)reinterpret((halide_buffer_t *)tj.buffer) != (uint64)0, halide_error_buffer_argument_is_null("tj"))
assert((uint64)reinterpret((halide_buffer_t *)ti.buffer) != (uint64)0, halide_error_buffer_argument_is_null("ti"))
assert((uint64)reinterpret((halide_buffer_t *)rijs.buffer) != (uint64)0, halide_error_buffer_argument_is_null("rijs"))
assert((uint64)reinterpret((halide_buffer_t *)pq.buffer) != (uint64)0, halide_error_buffer_argument_is_null("pq"))
assert((uint64)reinterpret((halide_buffer_t *)pn3.buffer) != (uint64)0, halide_error_buffer_argument_is_null("pn3"))
assert((uint64)reinterpret((halide_buffer_t *)pc4.buffer) != (uint64)0, halide_error_buffer_argument_is_null("pc4"))
assert((uint64)reinterpret((halide_buffer_t *)pc3.buffer) != (uint64)0, halide_error_buffer_argument_is_null("pc3"))
assert((uint64)reinterpret((halide_buffer_t *)pb4.buffer) != (uint64)0, halide_error_buffer_argument_is_null("pb4"))
assert((uint64)reinterpret((halide_buffer_t *)pa4.buffer) != (uint64)0, halide_error_buffer_argument_is_null("pa4"))
assert((uint64)reinterpret((halide_buffer_t *)fij_o.buffer) != (uint64)0, halide_error_buffer_argument_is_null("fij_o"))
assert((uint64)reinterpret((halide_buffer_t *)elemindex.buffer) != (uint64)0, halide_error_buffer_argument_is_null("elemindex"))
assert((uint64)reinterpret((halide_buffer_t *)e_o.buffer) != (uint64)0, halide_error_buffer_argument_is_null("e_o"))
assert((uint64)reinterpret((halide_buffer_t *)e3_o.buffer) != (uint64)0, halide_error_buffer_argument_is_null("e3_o"))
assert((uint64)reinterpret((halide_buffer_t *)coeff4.buffer) != (uint64)0, halide_error_buffer_argument_is_null("coeff4"))
assert((uint64)reinterpret((halide_buffer_t *)coeff33.buffer) != (uint64)0, halide_error_buffer_argument_is_null("coeff33"))
assert((uint64)reinterpret((halide_buffer_t *)coeff3.buffer) != (uint64)0, halide_error_buffer_argument_is_null("coeff3"))
assert((uint64)reinterpret((halide_buffer_t *)coeff23.buffer) != (uint64)0, halide_error_buffer_argument_is_null("coeff23"))
assert((uint64)reinterpret((halide_buffer_t *)coeff2.buffer) != (uint64)0, halide_error_buffer_argument_is_null("coeff2"))
assert((uint64)reinterpret((halide_buffer_t *)besselparams.buffer) != (uint64)0, halide_error_buffer_argument_is_null("besselparams"))
assert((uint64)reinterpret((halide_buffer_t *)Phi.buffer) != (uint64)0, halide_error_buffer_argument_is_null("Phi"))
let Phi = (void *)_halide_buffer_get_host((halide_buffer_t *)Phi.buffer)
let Phi.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)Phi.buffer)
let Phi.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)Phi.buffer)
let Phi.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)Phi.buffer)
let Phi.min.0 = _halide_buffer_get_min((halide_buffer_t *)Phi.buffer, 0)
let Phi.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)Phi.buffer, 0)
let Phi.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)Phi.buffer, 0)
let Phi.min.1 = _halide_buffer_get_min((halide_buffer_t *)Phi.buffer, 1)
let Phi.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)Phi.buffer, 1)
let Phi.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)Phi.buffer, 1)
let besselparams = (void *)_halide_buffer_get_host((halide_buffer_t *)besselparams.buffer)
let besselparams.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)besselparams.buffer)
let besselparams.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)besselparams.buffer)
let besselparams.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)besselparams.buffer)
let besselparams.min.0 = _halide_buffer_get_min((halide_buffer_t *)besselparams.buffer, 0)
let besselparams.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)besselparams.buffer, 0)
let besselparams.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)besselparams.buffer, 0)
let coeff2 = (void *)_halide_buffer_get_host((halide_buffer_t *)coeff2.buffer)
let coeff2.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)coeff2.buffer)
let coeff2.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)coeff2.buffer)
let coeff2.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)coeff2.buffer)
let coeff2.min.0 = _halide_buffer_get_min((halide_buffer_t *)coeff2.buffer, 0)
let coeff2.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)coeff2.buffer, 0)
let coeff2.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)coeff2.buffer, 0)
let coeff2.min.1 = _halide_buffer_get_min((halide_buffer_t *)coeff2.buffer, 1)
let coeff2.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)coeff2.buffer, 1)
let coeff2.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)coeff2.buffer, 1)
let coeff2.min.2 = _halide_buffer_get_min((halide_buffer_t *)coeff2.buffer, 2)
let coeff2.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)coeff2.buffer, 2)
let coeff2.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)coeff2.buffer, 2)
let coeff23 = (void *)_halide_buffer_get_host((halide_buffer_t *)coeff23.buffer)
let coeff23.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)coeff23.buffer)
let coeff23.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)coeff23.buffer)
let coeff23.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)coeff23.buffer)
let coeff23.min.0 = _halide_buffer_get_min((halide_buffer_t *)coeff23.buffer, 0)
let coeff23.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)coeff23.buffer, 0)
let coeff23.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)coeff23.buffer, 0)
let coeff23.min.1 = _halide_buffer_get_min((halide_buffer_t *)coeff23.buffer, 1)
let coeff23.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)coeff23.buffer, 1)
let coeff23.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)coeff23.buffer, 1)
let coeff23.min.2 = _halide_buffer_get_min((halide_buffer_t *)coeff23.buffer, 2)
let coeff23.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)coeff23.buffer, 2)
let coeff23.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)coeff23.buffer, 2)
let coeff3 = (void *)_halide_buffer_get_host((halide_buffer_t *)coeff3.buffer)
let coeff3.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)coeff3.buffer)
let coeff3.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)coeff3.buffer)
let coeff3.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)coeff3.buffer)
let coeff3.min.0 = _halide_buffer_get_min((halide_buffer_t *)coeff3.buffer, 0)
let coeff3.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)coeff3.buffer, 0)
let coeff3.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)coeff3.buffer, 0)
let coeff3.min.1 = _halide_buffer_get_min((halide_buffer_t *)coeff3.buffer, 1)
let coeff3.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)coeff3.buffer, 1)
let coeff3.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)coeff3.buffer, 1)
let coeff3.min.2 = _halide_buffer_get_min((halide_buffer_t *)coeff3.buffer, 2)
let coeff3.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)coeff3.buffer, 2)
let coeff3.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)coeff3.buffer, 2)
let coeff3.min.3 = _halide_buffer_get_min((halide_buffer_t *)coeff3.buffer, 3)
let coeff3.extent.3 = _halide_buffer_get_extent((halide_buffer_t *)coeff3.buffer, 3)
let coeff3.stride.3 = _halide_buffer_get_stride((halide_buffer_t *)coeff3.buffer, 3)
let coeff33 = (void *)_halide_buffer_get_host((halide_buffer_t *)coeff33.buffer)
let coeff33.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)coeff33.buffer)
let coeff33.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)coeff33.buffer)
let coeff33.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)coeff33.buffer)
let coeff33.min.0 = _halide_buffer_get_min((halide_buffer_t *)coeff33.buffer, 0)
let coeff33.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)coeff33.buffer, 0)
let coeff33.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)coeff33.buffer, 0)
let coeff33.min.1 = _halide_buffer_get_min((halide_buffer_t *)coeff33.buffer, 1)
let coeff33.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)coeff33.buffer, 1)
let coeff33.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)coeff33.buffer, 1)
let coeff4 = (void *)_halide_buffer_get_host((halide_buffer_t *)coeff4.buffer)
let coeff4.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)coeff4.buffer)
let coeff4.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)coeff4.buffer)
let coeff4.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)coeff4.buffer)
let coeff4.min.0 = _halide_buffer_get_min((halide_buffer_t *)coeff4.buffer, 0)
let coeff4.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)coeff4.buffer, 0)
let coeff4.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)coeff4.buffer, 0)
let coeff4.min.1 = _halide_buffer_get_min((halide_buffer_t *)coeff4.buffer, 1)
let coeff4.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)coeff4.buffer, 1)
let coeff4.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)coeff4.buffer, 1)
let coeff4.min.2 = _halide_buffer_get_min((halide_buffer_t *)coeff4.buffer, 2)
let coeff4.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)coeff4.buffer, 2)
let coeff4.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)coeff4.buffer, 2)
let coeff4.min.3 = _halide_buffer_get_min((halide_buffer_t *)coeff4.buffer, 3)
let coeff4.extent.3 = _halide_buffer_get_extent((halide_buffer_t *)coeff4.buffer, 3)
let coeff4.stride.3 = _halide_buffer_get_stride((halide_buffer_t *)coeff4.buffer, 3)
let e3_o = (void *)_halide_buffer_get_host((halide_buffer_t *)e3_o.buffer)
let e3_o.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)e3_o.buffer)
let e3_o.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)e3_o.buffer)
let e3_o.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)e3_o.buffer)
let e_o = (void *)_halide_buffer_get_host((halide_buffer_t *)e_o.buffer)
let e_o.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)e_o.buffer)
let e_o.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)e_o.buffer)
let e_o.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)e_o.buffer)
let elemindex = (void *)_halide_buffer_get_host((halide_buffer_t *)elemindex.buffer)
let elemindex.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)elemindex.buffer)
let elemindex.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)elemindex.buffer)
let elemindex.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)elemindex.buffer)
let elemindex.min.0 = _halide_buffer_get_min((halide_buffer_t *)elemindex.buffer, 0)
let elemindex.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)elemindex.buffer, 0)
let elemindex.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)elemindex.buffer, 0)
let elemindex.min.1 = _halide_buffer_get_min((halide_buffer_t *)elemindex.buffer, 1)
let elemindex.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)elemindex.buffer, 1)
let elemindex.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)elemindex.buffer, 1)
let fij_o = (void *)_halide_buffer_get_host((halide_buffer_t *)fij_o.buffer)
let fij_o.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)fij_o.buffer)
let fij_o.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)fij_o.buffer)
let fij_o.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)fij_o.buffer)
let fij_o.min.0 = _halide_buffer_get_min((halide_buffer_t *)fij_o.buffer, 0)
let fij_o.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)fij_o.buffer, 0)
let fij_o.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)fij_o.buffer, 0)
let fij_o.min.1 = _halide_buffer_get_min((halide_buffer_t *)fij_o.buffer, 1)
let fij_o.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)fij_o.buffer, 1)
let fij_o.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)fij_o.buffer, 1)
let pa4 = (void *)_halide_buffer_get_host((halide_buffer_t *)pa4.buffer)
let pa4.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)pa4.buffer)
let pa4.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)pa4.buffer)
let pa4.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)pa4.buffer)
let pa4.min.0 = _halide_buffer_get_min((halide_buffer_t *)pa4.buffer, 0)
let pa4.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)pa4.buffer, 0)
let pa4.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)pa4.buffer, 0)
let pb4 = (void *)_halide_buffer_get_host((halide_buffer_t *)pb4.buffer)
let pb4.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)pb4.buffer)
let pb4.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)pb4.buffer)
let pb4.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)pb4.buffer)
let pb4.min.0 = _halide_buffer_get_min((halide_buffer_t *)pb4.buffer, 0)
let pb4.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)pb4.buffer, 0)
let pb4.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)pb4.buffer, 0)
let pb4.min.1 = _halide_buffer_get_min((halide_buffer_t *)pb4.buffer, 1)
let pb4.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)pb4.buffer, 1)
let pb4.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)pb4.buffer, 1)
let pc3 = (void *)_halide_buffer_get_host((halide_buffer_t *)pc3.buffer)
let pc3.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)pc3.buffer)
let pc3.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)pc3.buffer)
let pc3.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)pc3.buffer)
let pc3.min.0 = _halide_buffer_get_min((halide_buffer_t *)pc3.buffer, 0)
let pc3.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)pc3.buffer, 0)
let pc3.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)pc3.buffer, 0)
let pc4 = (void *)_halide_buffer_get_host((halide_buffer_t *)pc4.buffer)
let pc4.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)pc4.buffer)
let pc4.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)pc4.buffer)
let pc4.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)pc4.buffer)
let pc4.min.0 = _halide_buffer_get_min((halide_buffer_t *)pc4.buffer, 0)
let pc4.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)pc4.buffer, 0)
let pc4.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)pc4.buffer, 0)
let pn3 = (void *)_halide_buffer_get_host((halide_buffer_t *)pn3.buffer)
let pn3.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)pn3.buffer)
let pn3.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)pn3.buffer)
let pn3.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)pn3.buffer)
let pn3.min.0 = _halide_buffer_get_min((halide_buffer_t *)pn3.buffer, 0)
let pn3.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)pn3.buffer, 0)
let pn3.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)pn3.buffer, 0)
let pq = (void *)_halide_buffer_get_host((halide_buffer_t *)pq.buffer)
let pq.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)pq.buffer)
let pq.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)pq.buffer)
let pq.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)pq.buffer)
let pq.min.0 = _halide_buffer_get_min((halide_buffer_t *)pq.buffer, 0)
let pq.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)pq.buffer, 0)
let pq.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)pq.buffer, 0)
let rijs = (void *)_halide_buffer_get_host((halide_buffer_t *)rijs.buffer)
let rijs.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)rijs.buffer)
let rijs.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)rijs.buffer)
let rijs.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)rijs.buffer)
let rijs.min.0 = _halide_buffer_get_min((halide_buffer_t *)rijs.buffer, 0)
let rijs.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)rijs.buffer, 0)
let rijs.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)rijs.buffer, 0)
let rijs.min.1 = _halide_buffer_get_min((halide_buffer_t *)rijs.buffer, 1)
let rijs.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)rijs.buffer, 1)
let rijs.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)rijs.buffer, 1)
let ti = (void *)_halide_buffer_get_host((halide_buffer_t *)ti.buffer)
let ti.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)ti.buffer)
let ti.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)ti.buffer)
let ti.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)ti.buffer)
let ti.min.0 = _halide_buffer_get_min((halide_buffer_t *)ti.buffer, 0)
let ti.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)ti.buffer, 0)
let ti.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)ti.buffer, 0)
let tj = (void *)_halide_buffer_get_host((halide_buffer_t *)tj.buffer)
let tj.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)tj.buffer)
let tj.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)tj.buffer)
let tj.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)tj.buffer)
let tj.min.0 = _halide_buffer_get_min((halide_buffer_t *)tj.buffer, 0)
let tj.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)tj.buffer, 0)
let tj.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)tj.buffer, 0)
let U.s0.m.max.s = max(nrbf3, nrbf4)
let U.s0.k.max.s = max(k3, k4)
let sumU.s0.k.max = max(k3 + -1, k4)
let rbf$1.s1.i.max.s = max(nrbf2, nrbf3)
let coeff2.min.2.required.s = min(ti[0 - (ti.min.0*ti.stride.0)], nelements)
let coeff23.extent.2.required.s = let t4180 = ti[0 - (ti.min.0*ti.stride.0)] in (min(nelements, t4180) - max(t4180, 1))
let coeff23.min.2.required.s = ti[0 - (ti.min.0*ti.stride.0)]
let coeff3.extent.2.required.s = min(((nelements + 1)*nelements)/2, (max(max(((nelements + -1)/2)*(nelements + -2), ((nelements + -1)/2)*((nelements*2) + -3)), 0) + nelements) + -1)
let coeff3.min.3.required.s = min(ti[0 - (ti.min.0*ti.stride.0)], nelements)
let coeff3.stride.3.required = max(coeff3.extent.2.required.s, 1)*(nabf3*nrbf3)
let coeff33.extent.0.required = max(((n33 + 1)*n33)/2, 1)
let coeff33.min.1.required.s = min(ti[0 - (ti.min.0*ti.stride.0)], nelements)
let coeff4.extent.2.required.s = let t4181 = ((nelements + -1)*nelements) in (let t4182 = min(t4181, min(nelements, 1) + -1) in (let t4183 = max(t4181, max(nelements, 1) + -1) in select(nelements == 1, 0, min((((nelements + 1)*nelements)*(nelements + 2))/6, (((max(max(max(t4182*2, (nelements + 1)*t4182), t4183*2), (nelements + 1)*t4183)/6) + (t4183/2)) + nelements) + -1))))
let coeff4.min.3.required = select(nelements == 1, 0, max(min(ti[0 - (ti.min.0*ti.stride.0)], nelements), 1) + -1)
let coeff4.stride.3.required = (nabf4*nrbf4)*(coeff4.extent.2.required.s + 1)
let elemindex.extent.0.required = select(nelements == 1, elemindex.extent.0, max(nelements, 1))
let elemindex.min.0.required = select(nelements == 1, elemindex.min.0, 0)
let elemindex.extent.1.required = select(nelements == 1, elemindex.extent.1, nelements)
let elemindex.min.1.required = select(nelements == 1, elemindex.min.1, 0)
let pb4.extent.0.required = q4
let pq.extent.0.required.s = max(k3*2, k3) - min(k3, 0)
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)Phi.buffer) || (rbf$1.s1.i.max.s <= ns), halide_error_constraints_make_required_region_smaller("Input buffer Phi", 1, 0, ns + -1, 0, rbf$1.s1.i.max.s + -1))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff2.buffer) || (1 <= npairs), halide_error_constraints_make_required_region_smaller("Input buffer coeff2", 0, 0, npairs + -1, 0, 0))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff2.buffer) || (max(coeff2.min.2.required.s, 1) <= nelements), let t4184 = max(coeff2.min.2.required.s, 1) in halide_error_constraints_make_required_region_smaller("Input buffer coeff2", 2, 0, nelements + -1, t4184 + -1, t4184 + -1))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff23.buffer) || ((max(coeff23.min.2.required.s, 1) + coeff23.extent.2.required.s) <= nelements), let t4185 = max(coeff23.min.2.required.s, 1) in halide_error_constraints_make_required_region_smaller("Input buffer coeff23", 2, 0, nelements + -1, t4185 + -1, (t4185 + coeff23.extent.2.required.s) + -1))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff33.buffer) || (coeff33.extent.0.required <= (((n33 + 1)*n33)/2)), halide_error_constraints_make_required_region_smaller("Input buffer coeff33", 0, 0, (((n33 + 1)*n33)/2) + -1, 0, coeff33.extent.0.required + -1))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff33.buffer) || (max(coeff33.min.1.required.s, 1) <= nelements), let t4186 = max(coeff33.min.1.required.s, 1) in halide_error_constraints_make_required_region_smaller("Input buffer coeff33", 1, 0, nelements + -1, t4186 + -1, t4186 + -1))
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)Phi.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)Phi.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)Phi.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 2, (halide_dimension_t *)make_struct(0, ns, 1, 0, 0, ns, ns, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)besselparams.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)besselparams.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)besselparams.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 1, (halide_dimension_t *)make_struct(0, nbesselpars, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff2.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)coeff2.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)coeff2.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 3, (halide_dimension_t *)make_struct(0, npairs, nrbf2, 0, 0, nrbf2, 1, 0, 0, nelements, npairs*nrbf2, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff23.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)coeff23.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)coeff23.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 3, (halide_dimension_t *)make_struct(0, n23, 1, 0, 0, n32, n23, 0, 0, nelements, n23*n32, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff3.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)coeff3.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)coeff3.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 4, (halide_dimension_t *)make_struct(0, nabf3, 1, 0, 0, nrbf3, nabf3, 0, 0, max(coeff3.extent.2.required.s, 1), nabf3*nrbf3, 0, max(coeff3.min.3.required.s, 1) + -1, 1, coeff3.stride.3.required, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff33.buffer)) {
 let t4187 = ((n33 + 1)*n33) in (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)coeff33.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)coeff33.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 2, (halide_dimension_t *)make_struct(0, t4187/2, 1, 0, 0, nelements, t4187/2, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff4.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)coeff4.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)coeff4.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 4, (halide_dimension_t *)make_struct(0, nabf4, 1, 0, 0, nrbf4, nabf4, 0, 0, coeff4.extent.2.required.s + 1, nabf4*nrbf4, 0, coeff4.min.3.required, 1, coeff4.stride.3.required, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)e3_o.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)e3_o.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)e3_o.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 0, (halide_dimension_t *)make_struct(), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)e_o.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)e_o.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)e_o.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 0, (halide_dimension_t *)make_struct(), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)elemindex.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)elemindex.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)elemindex.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 2, (halide_dimension_t *)make_struct(elemindex.min.0.required, elemindex.extent.0.required, 1, 0, elemindex.min.1.required, elemindex.extent.1.required, elemindex.extent.0.required, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)fij_o.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)fij_o.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)fij_o.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 2, (halide_dimension_t *)make_struct(0, npairs, 3, 0, 0, 3, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pa4.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)pa4.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)pa4.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(0, nabf4 + 1, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pb4.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)pb4.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)pb4.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 2, (halide_dimension_t *)make_struct(0, pb4.extent.0.required, 1, 0, 0, 3, pb4.extent.0.required, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pc3.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)pc3.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)pc3.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(0, k3, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pc4.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)pc4.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)pc4.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(0, pb4.extent.0.required, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pn3.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)pn3.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)pn3.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(0, nabf3 + 1, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pq.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)pq.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)pq.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(min(k3, 0) + 1, pq.extent.0.required.s + 1, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)rijs.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)rijs.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)rijs.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 2, (halide_dimension_t *)make_struct(0, 3, 1, 0, 0, npairs, 3, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)ti.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)ti.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)ti.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(0, 1, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)tj.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)tj.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)tj.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(0, npairs, 1, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)tj.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)ti.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)rijs.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pq.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pn3.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pc4.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pc3.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pb4.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pa4.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)fij_o.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)elemindex.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)e_o.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)e3_o.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff4.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff33.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff3.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff23.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff2.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)Phi.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)besselparams.buffer))))))))))))))))))))) {
 assert(Phi.type == (uint32)81922, halide_error_bad_type("Input buffer Phi", Phi.type, (uint32)81922))
 assert(Phi.dimensions == 2, halide_error_bad_dimensions("Input buffer Phi", Phi.dimensions, 2))
 assert(besselparams.type == (uint32)81922, halide_error_bad_type("Input buffer besselparams", besselparams.type, (uint32)81922))
 assert(besselparams.dimensions == 1, halide_error_bad_dimensions("Input buffer besselparams", besselparams.dimensions, 1))
 assert(coeff2.type == (uint32)81922, halide_error_bad_type("Input buffer coeff2", coeff2.type, (uint32)81922))
 assert(coeff2.dimensions == 3, halide_error_bad_dimensions("Input buffer coeff2", coeff2.dimensions, 3))
 assert(coeff23.type == (uint32)81922, halide_error_bad_type("Input buffer coeff23", coeff23.type, (uint32)81922))
 assert(coeff23.dimensions == 3, halide_error_bad_dimensions("Input buffer coeff23", coeff23.dimensions, 3))
 assert(coeff3.type == (uint32)81922, halide_error_bad_type("Input buffer coeff3", coeff3.type, (uint32)81922))
 assert(coeff3.dimensions == 4, halide_error_bad_dimensions("Input buffer coeff3", coeff3.dimensions, 4))
 assert(coeff33.type == (uint32)81922, halide_error_bad_type("Input buffer coeff33", coeff33.type, (uint32)81922))
 assert(coeff33.dimensions == 2, halide_error_bad_dimensions("Input buffer coeff33", coeff33.dimensions, 2))
 assert(coeff4.type == (uint32)81922, halide_error_bad_type("Input buffer coeff4", coeff4.type, (uint32)81922))
 assert(coeff4.dimensions == 4, halide_error_bad_dimensions("Input buffer coeff4", coeff4.dimensions, 4))
 assert(e3_o.type == (uint32)81922, halide_error_bad_type("Output buffer e3_o", e3_o.type, (uint32)81922))
 assert(e3_o.dimensions == 0, halide_error_bad_dimensions("Output buffer e3_o", e3_o.dimensions, 0))
 assert(e_o.type == (uint32)81922, halide_error_bad_type("Output buffer e_o", e_o.type, (uint32)81922))
 assert(e_o.dimensions == 0, halide_error_bad_dimensions("Output buffer e_o", e_o.dimensions, 0))
 assert(elemindex.type == (uint32)73728, halide_error_bad_type("Input buffer elemindex", elemindex.type, (uint32)73728))
 assert(elemindex.dimensions == 2, halide_error_bad_dimensions("Input buffer elemindex", elemindex.dimensions, 2))
 assert(fij_o.type == (uint32)81922, halide_error_bad_type("Output buffer fij_o", fij_o.type, (uint32)81922))
 assert(fij_o.dimensions == 2, halide_error_bad_dimensions("Output buffer fij_o", fij_o.dimensions, 2))
 assert(pa4.type == (uint32)73728, halide_error_bad_type("Input buffer pa4", pa4.type, (uint32)73728))
 assert(pa4.dimensions == 1, halide_error_bad_dimensions("Input buffer pa4", pa4.dimensions, 1))
 assert(pb4.type == (uint32)73728, halide_error_bad_type("Input buffer pb4", pb4.type, (uint32)73728))
 assert(pb4.dimensions == 2, halide_error_bad_dimensions("Input buffer pb4", pb4.dimensions, 2))
 assert(pc3.type == (uint32)73728, halide_error_bad_type("Input buffer pc3", pc3.type, (uint32)73728))
 assert(pc3.dimensions == 1, halide_error_bad_dimensions("Input buffer pc3", pc3.dimensions, 1))
 assert(pc4.type == (uint32)73728, halide_error_bad_type("Input buffer pc4", pc4.type, (uint32)73728))
 assert(pc4.dimensions == 1, halide_error_bad_dimensions("Input buffer pc4", pc4.dimensions, 1))
 assert(pn3.type == (uint32)73728, halide_error_bad_type("Input buffer pn3", pn3.type, (uint32)73728))
 assert(pn3.dimensions == 1, halide_error_bad_dimensions("Input buffer pn3", pn3.dimensions, 1))
 assert(pq.type == (uint32)73728, halide_error_bad_type("Input buffer pq", pq.type, (uint32)73728))
 assert(pq.dimensions == 1, halide_error_bad_dimensions("Input buffer pq", pq.dimensions, 1))
 assert(rijs.type == (uint32)81922, halide_error_bad_type("Input buffer rijs", rijs.type, (uint32)81922))
 assert(rijs.dimensions == 2, halide_error_bad_dimensions("Input buffer rijs", rijs.dimensions, 2))
 assert(ti.type == (uint32)73728, halide_error_bad_type("Input buffer ti", ti.type, (uint32)73728))
 assert(ti.dimensions == 1, halide_error_bad_dimensions("Input buffer ti", ti.dimensions, 1))
 assert(tj.type == (uint32)73728, halide_error_bad_type("Input buffer tj", tj.type, (uint32)73728))
 assert(tj.dimensions == 1, halide_error_bad_dimensions("Input buffer tj", tj.dimensions, 1))
 assert((Phi.min.0 <= 0) && (ns <= (Phi.extent.0 + Phi.min.0)), halide_error_access_out_of_bounds("Input buffer Phi", 0, 0, ns + -1, Phi.min.0, (Phi.extent.0 + Phi.min.0) + -1))
 assert(0 <= Phi.extent.0, halide_error_buffer_extents_negative("Input buffer Phi", 0, Phi.extent.0))
 assert((Phi.min.1 <= 0) && (rbf$1.s1.i.max.s <= (Phi.extent.1 + Phi.min.1)), halide_error_access_out_of_bounds("Input buffer Phi", 1, 0, rbf$1.s1.i.max.s + -1, Phi.min.1, (Phi.extent.1 + Phi.min.1) + -1))
 assert(0 <= Phi.extent.1, halide_error_buffer_extents_negative("Input buffer Phi", 1, Phi.extent.1))
 assert((besselparams.min.0 <= 0) && (nbesselpars <= (besselparams.extent.0 + besselparams.min.0)), halide_error_access_out_of_bounds("Input buffer besselparams", 0, 0, nbesselpars + -1, besselparams.min.0, (besselparams.extent.0 + besselparams.min.0) + -1))
 assert(0 <= besselparams.extent.0, halide_error_buffer_extents_negative("Input buffer besselparams", 0, besselparams.extent.0))
 assert((coeff2.min.0 <= 0) && ((max(npairs, 2) + -1) <= (coeff2.extent.0 + coeff2.min.0)), halide_error_access_out_of_bounds("Input buffer coeff2", 0, 0, max(npairs, 2) + -2, coeff2.min.0, (coeff2.extent.0 + coeff2.min.0) + -1))
 assert(0 <= coeff2.extent.0, halide_error_buffer_extents_negative("Input buffer coeff2", 0, coeff2.extent.0))
 assert((coeff2.min.1 <= 0) && (nrbf2 <= (coeff2.extent.1 + coeff2.min.1)), halide_error_access_out_of_bounds("Input buffer coeff2", 1, 0, nrbf2 + -1, coeff2.min.1, (coeff2.extent.1 + coeff2.min.1) + -1))
 assert(0 <= coeff2.extent.1, halide_error_buffer_extents_negative("Input buffer coeff2", 1, coeff2.extent.1))
 assert(let t4188 = max(coeff2.min.2.required.s, 1) in (((coeff2.min.2 + 1) <= t4188) && (t4188 <= (coeff2.extent.2 + coeff2.min.2))), let t4189 = max(coeff2.min.2.required.s, 1) in halide_error_access_out_of_bounds("Input buffer coeff2", 2, t4189 + -1, t4189 + -1, coeff2.min.2, (coeff2.extent.2 + coeff2.min.2) + -1))
 assert(0 <= coeff2.extent.2, halide_error_buffer_extents_negative("Input buffer coeff2", 2, coeff2.extent.2))
 assert((coeff23.min.0 <= 0) && (n23 <= (coeff23.extent.0 + coeff23.min.0)), halide_error_access_out_of_bounds("Input buffer coeff23", 0, 0, n23 + -1, coeff23.min.0, (coeff23.extent.0 + coeff23.min.0) + -1))
 assert(0 <= coeff23.extent.0, halide_error_buffer_extents_negative("Input buffer coeff23", 0, coeff23.extent.0))
 assert((coeff23.min.1 <= 0) && (n32 <= (coeff23.extent.1 + coeff23.min.1)), halide_error_access_out_of_bounds("Input buffer coeff23", 1, 0, n32 + -1, coeff23.min.1, (coeff23.extent.1 + coeff23.min.1) + -1))
 assert(0 <= coeff23.extent.1, halide_error_buffer_extents_negative("Input buffer coeff23", 1, coeff23.extent.1))
 assert(let t4190 = max(coeff23.min.2.required.s, 1) in (((coeff23.min.2 + 1) <= t4190) && ((t4190 + coeff23.extent.2.required.s) <= (coeff23.extent.2 + coeff23.min.2))), let t4191 = max(coeff23.min.2.required.s, 1) in halide_error_access_out_of_bounds("Input buffer coeff23", 2, t4191 + -1, (t4191 + coeff23.extent.2.required.s) + -1, coeff23.min.2, (coeff23.extent.2 + coeff23.min.2) + -1))
 assert(0 <= coeff23.extent.2, halide_error_buffer_extents_negative("Input buffer coeff23", 2, coeff23.extent.2))
 assert((coeff3.min.0 <= 0) && (nabf3 <= (coeff3.extent.0 + coeff3.min.0)), halide_error_access_out_of_bounds("Input buffer coeff3", 0, 0, nabf3 + -1, coeff3.min.0, (coeff3.extent.0 + coeff3.min.0) + -1))
 assert(0 <= coeff3.extent.0, halide_error_buffer_extents_negative("Input buffer coeff3", 0, coeff3.extent.0))
 assert((coeff3.min.1 <= 0) && (nrbf3 <= (coeff3.extent.1 + coeff3.min.1)), halide_error_access_out_of_bounds("Input buffer coeff3", 1, 0, nrbf3 + -1, coeff3.min.1, (coeff3.extent.1 + coeff3.min.1) + -1))
 assert(0 <= coeff3.extent.1, halide_error_buffer_extents_negative("Input buffer coeff3", 1, coeff3.extent.1))
 assert((coeff3.min.2 <= 0) && (max(coeff3.extent.2.required.s, 1) <= (coeff3.extent.2 + coeff3.min.2)), halide_error_access_out_of_bounds("Input buffer coeff3", 2, 0, max(coeff3.extent.2.required.s, 1) + -1, coeff3.min.2, (coeff3.extent.2 + coeff3.min.2) + -1))
 assert(0 <= coeff3.extent.2, halide_error_buffer_extents_negative("Input buffer coeff3", 2, coeff3.extent.2))
 assert(let t4192 = max(coeff3.min.3.required.s, 1) in (((coeff3.min.3 + 1) <= t4192) && (t4192 <= (coeff3.extent.3 + coeff3.min.3))), let t4193 = max(coeff3.min.3.required.s, 1) in halide_error_access_out_of_bounds("Input buffer coeff3", 3, t4193 + -1, t4193 + -1, coeff3.min.3, (coeff3.extent.3 + coeff3.min.3) + -1))
 assert(0 <= coeff3.extent.3, halide_error_buffer_extents_negative("Input buffer coeff3", 3, coeff3.extent.3))
 assert((coeff33.min.0 <= 0) && (coeff33.extent.0.required <= (coeff33.extent.0 + coeff33.min.0)), halide_error_access_out_of_bounds("Input buffer coeff33", 0, 0, coeff33.extent.0.required + -1, coeff33.min.0, (coeff33.extent.0 + coeff33.min.0) + -1))
 assert(0 <= coeff33.extent.0, halide_error_buffer_extents_negative("Input buffer coeff33", 0, coeff33.extent.0))
 assert(let t4194 = max(coeff33.min.1.required.s, 1) in (((coeff33.min.1 + 1) <= t4194) && (t4194 <= (coeff33.extent.1 + coeff33.min.1))), let t4195 = max(coeff33.min.1.required.s, 1) in halide_error_access_out_of_bounds("Input buffer coeff33", 1, t4195 + -1, t4195 + -1, coeff33.min.1, (coeff33.extent.1 + coeff33.min.1) + -1))
 assert(0 <= coeff33.extent.1, halide_error_buffer_extents_negative("Input buffer coeff33", 1, coeff33.extent.1))
 assert((coeff4.min.0 <= 0) && (nabf4 <= (coeff4.extent.0 + coeff4.min.0)), halide_error_access_out_of_bounds("Input buffer coeff4", 0, 0, nabf4 + -1, coeff4.min.0, (coeff4.extent.0 + coeff4.min.0) + -1))
 assert(0 <= coeff4.extent.0, halide_error_buffer_extents_negative("Input buffer coeff4", 0, coeff4.extent.0))
 assert((coeff4.min.1 <= 0) && (nrbf4 <= (coeff4.extent.1 + coeff4.min.1)), halide_error_access_out_of_bounds("Input buffer coeff4", 1, 0, nrbf4 + -1, coeff4.min.1, (coeff4.extent.1 + coeff4.min.1) + -1))
 assert(0 <= coeff4.extent.1, halide_error_buffer_extents_negative("Input buffer coeff4", 1, coeff4.extent.1))
 assert((coeff4.min.2 <= 0) && ((coeff4.extent.2.required.s + 1) <= (coeff4.extent.2 + coeff4.min.2)), halide_error_access_out_of_bounds("Input buffer coeff4", 2, 0, coeff4.extent.2.required.s, coeff4.min.2, (coeff4.extent.2 + coeff4.min.2) + -1))
 assert(0 <= coeff4.extent.2, halide_error_buffer_extents_negative("Input buffer coeff4", 2, coeff4.extent.2))
 assert((coeff4.min.3 <= coeff4.min.3.required) && ((coeff4.min.3.required + 1) <= (coeff4.extent.3 + coeff4.min.3)), halide_error_access_out_of_bounds("Input buffer coeff4", 3, coeff4.min.3.required, coeff4.min.3.required, coeff4.min.3, (coeff4.extent.3 + coeff4.min.3) + -1))
 assert(0 <= coeff4.extent.3, halide_error_buffer_extents_negative("Input buffer coeff4", 3, coeff4.extent.3))
 assert(let t4196 = (elemindex.extent.0 + elemindex.min.0) in ((elemindex.min.0 <= elemindex.min.0.required) && (select(nelements == 1, t4196, elemindex.extent.0.required + elemindex.min.0.required) <= t4196)), let t4197 = (elemindex.extent.0 + elemindex.min.0) in halide_error_access_out_of_bounds("Input buffer elemindex", 0, elemindex.min.0.required, select(nelements == 1, t4197, elemindex.extent.0.required + elemindex.min.0.required) + -1, elemindex.min.0, t4197 + -1))
 assert(0 <= elemindex.extent.0, halide_error_buffer_extents_negative("Input buffer elemindex", 0, elemindex.extent.0))
 assert(let t4198 = (elemindex.extent.1 + elemindex.min.1) in ((elemindex.min.1 <= elemindex.min.1.required) && (select(nelements == 1, t4198, elemindex.extent.1.required + elemindex.min.1.required) <= t4198)), let t4199 = (elemindex.extent.1 + elemindex.min.1) in halide_error_access_out_of_bounds("Input buffer elemindex", 1, elemindex.min.1.required, select(nelements == 1, t4199, elemindex.extent.1.required + elemindex.min.1.required) + -1, elemindex.min.1, t4199 + -1))
 assert(0 <= elemindex.extent.1, halide_error_buffer_extents_negative("Input buffer elemindex", 1, elemindex.extent.1))
 assert((fij_o.min.0 <= 0) && (npairs <= (fij_o.extent.0 + fij_o.min.0)), halide_error_access_out_of_bounds("Output buffer fij_o", 0, 0, npairs + -1, fij_o.min.0, (fij_o.extent.0 + fij_o.min.0) + -1))
 assert(0 <= fij_o.extent.0, halide_error_buffer_extents_negative("Output buffer fij_o", 0, fij_o.extent.0))
 assert((fij_o.min.1 <= 0) && (3 <= (fij_o.extent.1 + fij_o.min.1)), halide_error_access_out_of_bounds("Output buffer fij_o", 1, 0, 2, fij_o.min.1, (fij_o.extent.1 + fij_o.min.1) + -1))
 assert(0 <= fij_o.extent.1, halide_error_buffer_extents_negative("Output buffer fij_o", 1, fij_o.extent.1))
 assert((pa4.min.0 <= 0) && ((nabf4 + 1) <= (pa4.extent.0 + pa4.min.0)), halide_error_access_out_of_bounds("Input buffer pa4", 0, 0, nabf4, pa4.min.0, (pa4.extent.0 + pa4.min.0) + -1))
 assert(0 <= pa4.extent.0, halide_error_buffer_extents_negative("Input buffer pa4", 0, pa4.extent.0))
 assert((pb4.min.0 <= 0) && (pb4.extent.0.required <= (pb4.extent.0 + pb4.min.0)), halide_error_access_out_of_bounds("Input buffer pb4", 0, 0, pb4.extent.0.required + -1, pb4.min.0, (pb4.extent.0 + pb4.min.0) + -1))
 assert(0 <= pb4.extent.0, halide_error_buffer_extents_negative("Input buffer pb4", 0, pb4.extent.0))
 assert((pb4.min.1 <= 0) && (3 <= (pb4.extent.1 + pb4.min.1)), halide_error_access_out_of_bounds("Input buffer pb4", 1, 0, 2, pb4.min.1, (pb4.extent.1 + pb4.min.1) + -1))
 assert(0 <= pb4.extent.1, halide_error_buffer_extents_negative("Input buffer pb4", 1, pb4.extent.1))
 assert((pc3.min.0 <= 0) && (k3 <= (pc3.extent.0 + pc3.min.0)), halide_error_access_out_of_bounds("Input buffer pc3", 0, 0, k3 + -1, pc3.min.0, (pc3.extent.0 + pc3.min.0) + -1))
 assert(0 <= pc3.extent.0, halide_error_buffer_extents_negative("Input buffer pc3", 0, pc3.extent.0))
 assert((pc4.min.0 <= 0) && (pb4.extent.0.required <= (pc4.extent.0 + pc4.min.0)), halide_error_access_out_of_bounds("Input buffer pc4", 0, 0, pb4.extent.0.required + -1, pc4.min.0, (pc4.extent.0 + pc4.min.0) + -1))
 assert(0 <= pc4.extent.0, halide_error_buffer_extents_negative("Input buffer pc4", 0, pc4.extent.0))
 assert((pn3.min.0 <= 0) && ((nabf3 + 1) <= (pn3.extent.0 + pn3.min.0)), halide_error_access_out_of_bounds("Input buffer pn3", 0, 0, nabf3, pn3.min.0, (pn3.extent.0 + pn3.min.0) + -1))
 assert(0 <= pn3.extent.0, halide_error_buffer_extents_negative("Input buffer pn3", 0, pn3.extent.0))
 assert(let t4200 = min(k3, 0) in (((pq.min.0 + -1) <= t4200) && (((t4200 + pq.extent.0.required.s) + 2) <= (pq.extent.0 + pq.min.0))), let t4201 = min(k3, 0) in halide_error_access_out_of_bounds("Input buffer pq", 0, t4201 + 1, (t4201 + pq.extent.0.required.s) + 1, pq.min.0, (pq.extent.0 + pq.min.0) + -1))
 assert(0 <= pq.extent.0, halide_error_buffer_extents_negative("Input buffer pq", 0, pq.extent.0))
 assert((rijs.min.0 <= 0) && (3 <= (rijs.extent.0 + rijs.min.0)), halide_error_access_out_of_bounds("Input buffer rijs", 0, 0, 2, rijs.min.0, (rijs.extent.0 + rijs.min.0) + -1))
 assert(0 <= rijs.extent.0, halide_error_buffer_extents_negative("Input buffer rijs", 0, rijs.extent.0))
 assert((rijs.min.1 <= 0) && (npairs <= (rijs.extent.1 + rijs.min.1)), halide_error_access_out_of_bounds("Input buffer rijs", 1, 0, npairs + -1, rijs.min.1, (rijs.extent.1 + rijs.min.1) + -1))
 assert(0 <= rijs.extent.1, halide_error_buffer_extents_negative("Input buffer rijs", 1, rijs.extent.1))
 assert((ti.min.0 <= 0) && (1 <= (ti.extent.0 + ti.min.0)), halide_error_access_out_of_bounds("Input buffer ti", 0, 0, 0, ti.min.0, (ti.extent.0 + ti.min.0) + -1))
 assert(0 <= ti.extent.0, halide_error_buffer_extents_negative("Input buffer ti", 0, ti.extent.0))
 assert((tj.min.0 <= 0) && (npairs <= (tj.extent.0 + tj.min.0)), halide_error_access_out_of_bounds("Input buffer tj", 0, 0, npairs + -1, tj.min.0, (tj.extent.0 + tj.min.0) + -1))
 assert(0 <= tj.extent.0, halide_error_buffer_extents_negative("Input buffer tj", 0, tj.extent.0))
 assert(Phi.stride.0 == 1, halide_error_constraint_violated("Phi.stride.0", Phi.stride.0, "1", 1))
 assert(Phi.min.0 == 0, halide_error_constraint_violated("Phi.min.0", Phi.min.0, "0", 0))
 assert(Phi.extent.0 == ns, halide_error_constraint_violated("Phi.extent.0", Phi.extent.0, "ns", ns))
 assert(Phi.stride.1 == ns, halide_error_constraint_violated("Phi.stride.1", Phi.stride.1, "ns", ns))
 assert(Phi.min.1 == 0, halide_error_constraint_violated("Phi.min.1", Phi.min.1, "0", 0))
 assert(Phi.extent.1 == ns, halide_error_constraint_violated("Phi.extent.1", Phi.extent.1, "ns", ns))
 assert(besselparams.stride.0 == 1, halide_error_constraint_violated("besselparams.stride.0", besselparams.stride.0, "1", 1))
 assert(besselparams.min.0 == 0, halide_error_constraint_violated("besselparams.min.0", besselparams.min.0, "0", 0))
 assert(besselparams.extent.0 == nbesselpars, halide_error_constraint_violated("besselparams.extent.0", besselparams.extent.0, "nbesselpars", nbesselpars))
 assert(coeff2.stride.0 == nrbf2, halide_error_constraint_violated("coeff2.stride.0", coeff2.stride.0, "nrbf2", nrbf2))
 assert(coeff2.min.0 == 0, halide_error_constraint_violated("coeff2.min.0", coeff2.min.0, "0", 0))
 assert(coeff2.extent.0 == npairs, halide_error_constraint_violated("coeff2.extent.0", coeff2.extent.0, "npairs", npairs))
 assert(coeff2.stride.1 == 1, halide_error_constraint_violated("coeff2.stride.1", coeff2.stride.1, "1", 1))
 assert(coeff2.min.1 == 0, halide_error_constraint_violated("coeff2.min.1", coeff2.min.1, "0", 0))
 assert(coeff2.extent.1 == nrbf2, halide_error_constraint_violated("coeff2.extent.1", coeff2.extent.1, "nrbf2", nrbf2))
 assert(coeff2.stride.2 == (npairs*nrbf2), halide_error_constraint_violated("coeff2.stride.2", coeff2.stride.2, "(nrbf2*npairs)", npairs*nrbf2))
 assert(coeff2.min.2 == 0, halide_error_constraint_violated("coeff2.min.2", coeff2.min.2, "0", 0))
 assert(coeff2.extent.2 == nelements, halide_error_constraint_violated("coeff2.extent.2", coeff2.extent.2, "nelements", nelements))
 assert(coeff23.stride.0 == 1, halide_error_constraint_violated("coeff23.stride.0", coeff23.stride.0, "1", 1))
 assert(coeff23.min.0 == 0, halide_error_constraint_violated("coeff23.min.0", coeff23.min.0, "0", 0))
 assert(coeff23.extent.0 == n23, halide_error_constraint_violated("coeff23.extent.0", coeff23.extent.0, "n23", n23))
 assert(coeff23.stride.1 == n23, halide_error_constraint_violated("coeff23.stride.1", coeff23.stride.1, "n23", n23))
 assert(coeff23.min.1 == 0, halide_error_constraint_violated("coeff23.min.1", coeff23.min.1, "0", 0))
 assert(coeff23.extent.1 == n32, halide_error_constraint_violated("coeff23.extent.1", coeff23.extent.1, "n32", n32))
 assert(coeff23.stride.2 == (n23*n32), halide_error_constraint_violated("coeff23.stride.2", coeff23.stride.2, "(n23*n32)", n23*n32))
 assert(coeff23.min.2 == 0, halide_error_constraint_violated("coeff23.min.2", coeff23.min.2, "0", 0))
 assert(coeff23.extent.2 == nelements, halide_error_constraint_violated("coeff23.extent.2", coeff23.extent.2, "nelements", nelements))
 assert(coeff3.stride.0 == 1, halide_error_constraint_violated("coeff3.stride.0", coeff3.stride.0, "1", 1))
 assert(coeff33.stride.0 == 1, halide_error_constraint_violated("coeff33.stride.0", coeff33.stride.0, "1", 1))
 assert(coeff33.min.0 == 0, halide_error_constraint_violated("coeff33.min.0", coeff33.min.0, "0", 0))
 assert(coeff33.extent.0 == (((n33 + 1)*n33)/2), halide_error_constraint_violated("coeff33.extent.0", coeff33.extent.0, "((n33*(n33 + 1))/2)", ((n33 + 1)*n33)/2))
 assert(coeff33.stride.1 == (((n33 + 1)*n33)/2), halide_error_constraint_violated("coeff33.stride.1", coeff33.stride.1, "((n33*(n33 + 1))/2)", ((n33 + 1)*n33)/2))
 assert(coeff33.min.1 == 0, halide_error_constraint_violated("coeff33.min.1", coeff33.min.1, "0", 0))
 assert(coeff33.extent.1 == nelements, halide_error_constraint_violated("coeff33.extent.1", coeff33.extent.1, "nelements", nelements))
 assert(coeff4.stride.0 == 1, halide_error_constraint_violated("coeff4.stride.0", coeff4.stride.0, "1", 1))
 assert(elemindex.stride.0 == 1, halide_error_constraint_violated("elemindex.stride.0", elemindex.stride.0, "1", 1))
 assert(fij_o.stride.0 == 3, halide_error_constraint_violated("fij_o.stride.0", fij_o.stride.0, "3", 3))
 assert(fij_o.min.0 == 0, halide_error_constraint_violated("fij_o.min.0", fij_o.min.0, "0", 0))
 assert(fij_o.extent.0 == npairs, halide_error_constraint_violated("fij_o.extent.0", fij_o.extent.0, "npairs", npairs))
 assert(fij_o.stride.1 == 1, halide_error_constraint_violated("fij_o.stride.1", fij_o.stride.1, "1", 1))
 assert(fij_o.min.1 == 0, halide_error_constraint_violated("fij_o.min.1", fij_o.min.1, "0", 0))
 assert(fij_o.extent.1 == 3, halide_error_constraint_violated("fij_o.extent.1", fij_o.extent.1, "3", 3))
 assert(pa4.stride.0 == 1, halide_error_constraint_violated("pa4.stride.0", pa4.stride.0, "1", 1))
 assert(pb4.stride.0 == 1, halide_error_constraint_violated("pb4.stride.0", pb4.stride.0, "1", 1))
 assert(pc3.stride.0 == 1, halide_error_constraint_violated("pc3.stride.0", pc3.stride.0, "1", 1))
 assert(pc4.stride.0 == 1, halide_error_constraint_violated("pc4.stride.0", pc4.stride.0, "1", 1))
 assert(pn3.stride.0 == 1, halide_error_constraint_violated("pn3.stride.0", pn3.stride.0, "1", 1))
 assert(pq.stride.0 == 1, halide_error_constraint_violated("pq.stride.0", pq.stride.0, "1", 1))
 assert(rijs.stride.0 == 1, halide_error_constraint_violated("rijs.stride.0", rijs.stride.0, "1", 1))
 assert(rijs.min.0 == 0, halide_error_constraint_violated("rijs.min.0", rijs.min.0, "0", 0))
 assert(rijs.extent.0 == 3, halide_error_constraint_violated("rijs.extent.0", rijs.extent.0, "3", 3))
 assert(rijs.stride.1 == 3, halide_error_constraint_violated("rijs.stride.1", rijs.stride.1, "3", 3))
 assert(rijs.min.1 == 0, halide_error_constraint_violated("rijs.min.1", rijs.min.1, "0", 0))
 assert(rijs.extent.1 == npairs, halide_error_constraint_violated("rijs.extent.1", rijs.extent.1, "npairs", npairs))
 assert(ti.stride.0 == 1, halide_error_constraint_violated("ti.stride.0", ti.stride.0, "1", 1))
 assert(tj.stride.0 == 1, halide_error_constraint_violated("tj.stride.0", tj.stride.0, "1", 1))
 let Phi.total_extent.1 = int64(ns)*int64(ns)
 let coeff2.total_extent.1 = int64(nrbf2)*int64(npairs)
 let coeff2.total_extent.2 = coeff2.total_extent.1*int64(nelements)
 let coeff23.total_extent.1 = int64(n32)*int64(n23)
 let coeff23.total_extent.2 = coeff23.total_extent.1*int64(nelements)
 let coeff3.total_extent.1 = int64(coeff3.extent.1)*int64(coeff3.extent.0)
 let coeff3.total_extent.2 = coeff3.total_extent.1*int64(coeff3.extent.2)
 let coeff3.total_extent.3 = coeff3.total_extent.2*int64(coeff3.extent.3)
 let coeff33.total_extent.1 = int64(nelements)*int64(coeff33.extent.0)
 let coeff4.total_extent.1 = int64(coeff4.extent.1)*int64(coeff4.extent.0)
 let coeff4.total_extent.2 = coeff4.total_extent.1*int64(coeff4.extent.2)
 let coeff4.total_extent.3 = coeff4.total_extent.2*int64(coeff4.extent.3)
 let elemindex.total_extent.1 = int64(elemindex.extent.1)*int64(elemindex.extent.0)
 let pb4.total_extent.1 = int64(pb4.extent.1)*int64(pb4.extent.0)
 assert((uint64)abs(int64(ns)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("Phi", (uint64)abs(int64(ns)), (uint64)2147483647))
 assert((uint64)abs(Phi.total_extent.1) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("Phi", (uint64)abs(Phi.total_extent.1), (uint64)2147483647))
 assert(Phi.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("Phi", Phi.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(nbesselpars)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("besselparams", (uint64)abs(int64(nbesselpars)), (uint64)2147483647))
 assert((uint64)abs(int64(npairs)*int64(nrbf2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff2", (uint64)abs(int64(npairs)*int64(nrbf2)), (uint64)2147483647))
 assert((uint64)abs(int64(nrbf2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff2", (uint64)abs(int64(nrbf2)), (uint64)2147483647))
 assert(coeff2.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff2", coeff2.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(nelements)*int64(coeff2.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff2", (uint64)abs(int64(nelements)*int64(coeff2.stride.2)), (uint64)2147483647))
 assert(coeff2.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff2", coeff2.total_extent.2, (int64)2147483647))
 assert((uint64)abs(int64(n23)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff23", (uint64)abs(int64(n23)), (uint64)2147483647))
 assert((uint64)abs(coeff23.total_extent.1) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff23", (uint64)abs(coeff23.total_extent.1), (uint64)2147483647))
 assert(coeff23.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff23", coeff23.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(nelements)*int64(coeff23.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff23", (uint64)abs(int64(nelements)*int64(coeff23.stride.2)), (uint64)2147483647))
 assert(coeff23.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff23", coeff23.total_extent.2, (int64)2147483647))
 assert(uint64(coeff3.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff3", uint64(coeff3.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(coeff3.extent.1)*int64(coeff3.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff3", (uint64)abs(int64(coeff3.extent.1)*int64(coeff3.stride.1)), (uint64)2147483647))
 assert(coeff3.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff3", coeff3.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(coeff3.extent.2)*int64(coeff3.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff3", (uint64)abs(int64(coeff3.extent.2)*int64(coeff3.stride.2)), (uint64)2147483647))
 assert(coeff3.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff3", coeff3.total_extent.2, (int64)2147483647))
 assert((uint64)abs(int64(coeff3.extent.3)*int64(coeff3.stride.3)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff3", (uint64)abs(int64(coeff3.extent.3)*int64(coeff3.stride.3)), (uint64)2147483647))
 assert(coeff3.total_extent.3 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff3", coeff3.total_extent.3, (int64)2147483647))
 assert(uint64(coeff33.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff33", uint64(coeff33.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(nelements)*int64(coeff33.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff33", (uint64)abs(int64(nelements)*int64(coeff33.stride.1)), (uint64)2147483647))
 assert(coeff33.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff33", coeff33.total_extent.1, (int64)2147483647))
 assert(uint64(coeff4.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff4", uint64(coeff4.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(coeff4.extent.1)*int64(coeff4.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff4", (uint64)abs(int64(coeff4.extent.1)*int64(coeff4.stride.1)), (uint64)2147483647))
 assert(coeff4.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff4", coeff4.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(coeff4.extent.2)*int64(coeff4.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff4", (uint64)abs(int64(coeff4.extent.2)*int64(coeff4.stride.2)), (uint64)2147483647))
 assert(coeff4.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff4", coeff4.total_extent.2, (int64)2147483647))
 assert((uint64)abs(int64(coeff4.extent.3)*int64(coeff4.stride.3)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff4", (uint64)abs(int64(coeff4.extent.3)*int64(coeff4.stride.3)), (uint64)2147483647))
 assert(coeff4.total_extent.3 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff4", coeff4.total_extent.3, (int64)2147483647))
 assert(uint64(elemindex.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("elemindex", uint64(elemindex.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(elemindex.extent.1)*int64(elemindex.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("elemindex", (uint64)abs(int64(elemindex.extent.1)*int64(elemindex.stride.1)), (uint64)2147483647))
 assert(elemindex.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("elemindex", elemindex.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(npairs)*(int64)3) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("fij_o", (uint64)abs(int64(npairs)*(int64)3), (uint64)2147483647))
 assert(int64(npairs) <= (int64)715827882, halide_error_buffer_extents_too_large("fij_o", int64(npairs)*(int64)3, (int64)2147483647))
 assert(uint64(pa4.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pa4", uint64(pa4.extent.0), (uint64)2147483647))
 assert(uint64(pb4.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pb4", uint64(pb4.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(pb4.extent.1)*int64(pb4.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pb4", (uint64)abs(int64(pb4.extent.1)*int64(pb4.stride.1)), (uint64)2147483647))
 assert(pb4.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("pb4", pb4.total_extent.1, (int64)2147483647))
 assert(uint64(pc3.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pc3", uint64(pc3.extent.0), (uint64)2147483647))
 assert(uint64(pc4.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pc4", uint64(pc4.extent.0), (uint64)2147483647))
 assert(uint64(pn3.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pn3", uint64(pn3.extent.0), (uint64)2147483647))
 assert(uint64(pq.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pq", uint64(pq.extent.0), (uint64)2147483647))
 assert(uint64(ti.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("ti", uint64(ti.extent.0), (uint64)2147483647))
 assert(uint64(tj.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("tj", uint64(tj.extent.0), (uint64)2147483647))
 assert(!Phi.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer Phi"))
 assert(!besselparams.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer besselparams"))
 assert(!coeff2.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer coeff2"))
 assert(!coeff23.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer coeff23"))
 assert(!coeff3.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer coeff3"))
 assert(!coeff33.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer coeff33"))
 assert(!coeff4.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer coeff4"))
 assert(!e3_o.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer e3_o"))
 assert(!e_o.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer e_o"))
 assert(!elemindex.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer elemindex"))
 assert(!fij_o.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer fij_o"))
 assert(!pa4.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer pa4"))
 assert(!pb4.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer pb4"))
 assert(!pc3.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer pc3"))
 assert(!pc4.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer pc4"))
 assert(!pn3.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer pn3"))
 assert(!pq.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer pq"))
 assert(!rijs.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer rijs"))
 assert(!ti.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer ti"))
 assert(!tj.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer tj"))
 assert(Phi != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer Phi"))
 assert(besselparams != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer besselparams"))
 assert(coeff2 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer coeff2"))
 assert(coeff23 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer coeff23"))
 assert(coeff3 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer coeff3"))
 assert(coeff33 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer coeff33"))
 assert(coeff4 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer coeff4"))
 assert(e3_o != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer e3_o"))
 assert(e_o != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer e_o"))
 assert((elemindex != (void *)reinterpret((uint64)0)) || (nelements == 1), halide_error_host_is_null("Input buffer elemindex"))
 assert(fij_o != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer fij_o"))
 assert(pa4 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer pa4"))
 assert(pb4 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer pb4"))
 assert(pc3 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer pc3"))
 assert(pc4 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer pc4"))
 assert(pn3 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer pn3"))
 assert(pq != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer pq"))
 assert(rijs != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer rijs"))
 assert(ti != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer ti"))
 assert(tj != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer tj"))
 let tm.abfip.extent_realized.s = max(k3*3, k3 + 2)
 allocate tm[float64 * 1 * max(tm.abfip.extent_realized.s, 1) * 4]
 allocate abf4[float64 * npairs * k3 * 4]
 produce abf4 {
  for (abf4.s0.pairindex, 0, npairs) {
   for (abf4.s0.abfi, 0, k3) {
    let tm.s0.abfip.max_1 = max((k3*3) + -1, abf4.s0.abfi)
    produce tm {
     for (tm.s0.abfip, 0, tm.s0.abfip.max_1 + 1) {
      let t3595 = tm.s0.abfip*4
      for (tm.s0.c, 0, 4) {
       tm[t3595 + tm.s0.c] = 0.000000
      }
     }
     tm[0] = 1.000000
     let t3597 = abf4.s0.pairindex*3
     for (tm.s2.r131$x.rebased, 0, k3 + 1) {
      let t3172 = pq[((k3 - pq.min.0) + tm.s2.r131$x.rebased) + 1]
      let t3173 = rijs[t3597 + 2]
      let t3174 = rijs[t3597]
      let t3175 = rijs[t3597 + 1]
      let t3176 = (float64)sqrt_f64((t3173*t3173) + ((t3174*t3174) + (t3175*t3175)))
      tm[(tm.s2.r131$x.rebased*4) + 4] = tm[(max(min(pq[(tm.s2.r131$x.rebased - pq.min.0) + 1], k3*3), 1)*4) + -4]*select(1 < t3172, select(t3172 == 2, (1.000000/t3176)*t3175, select(t3172 < 3, 0.000000, (1.000000/t3176)*t3173)), (1.000000/t3176)*t3174)
     }
     let t3601 = abf4.s0.pairindex*3
     for (tm.s2.r131$x.rebased, 0, k3 + 1) {
      let t3177 = pq[((k3 - pq.min.0) + tm.s2.r131$x.rebased) + 1]
      let t3178 = 1 < t3177
      let t3179.s = min(pq[(tm.s2.r131$x.rebased - pq.min.0) + 1], k3*3)
      let t3180 = rijs[t3601 + 2]
      let t3181 = rijs[t3601]
      let t3182 = rijs[t3601 + 1]
      let t3183 = (float64)sqrt_f64((t3180*t3180) + ((t3181*t3181) + (t3182*t3182)))
      let t3455 = max(t3179.s, 1)
      tm[(tm.s2.r131$x.rebased*4) + 5] = select(t3178, 0.000000, tm[(t3455*4) + -4]) + (tm[(t3455*4) + -3]*select(t3178, select(t3177 == 2, (1.000000/t3183)*t3182, select(t3177 < 3, 0.000000, (1.000000/t3183)*t3180)), (1.000000/t3183)*t3181))
     }
     let t3604 = abf4.s0.pairindex*3
     for (tm.s2.r131$x.rebased, 0, k3 + 1) {
      let t3184 = pq[((k3 - pq.min.0) + tm.s2.r131$x.rebased) + 1]
      let t3185 = t3184 == 2
      let t3186.s = min(pq[(tm.s2.r131$x.rebased - pq.min.0) + 1], k3*3)
      let t3187 = rijs[t3604 + 2]
      let t3188 = rijs[t3604]
      let t3189 = rijs[t3604 + 1]
      let t3190 = (float64)sqrt_f64((t3187*t3187) + ((t3188*t3188) + (t3189*t3189)))
      let t3456 = max(t3186.s, 1)
      tm[(tm.s2.r131$x.rebased*4) + 6] = select(t3185, tm[(t3456*4) + -4], 0.000000) + (tm[(t3456*4) + -2]*select(1 < t3184, select(t3185, (1.000000/t3190)*t3189, select(t3184 < 3, 0.000000, (1.000000/t3190)*t3187)), (1.000000/t3190)*t3188))
     }
     let t3607 = abf4.s0.pairindex*3
     for (tm.s2.r131$x.rebased, 0, k3 + 1) {
      let t3191 = pq[((k3 - pq.min.0) + tm.s2.r131$x.rebased) + 1]
      let t3192 = t3191 < 3
      let t3193.s = min(pq[(tm.s2.r131$x.rebased - pq.min.0) + 1], k3*3)
      let t3194 = rijs[t3607 + 2]
      let t3195 = rijs[t3607]
      let t3196 = rijs[t3607 + 1]
      let t3197 = (float64)sqrt_f64((t3194*t3194) + ((t3195*t3195) + (t3196*t3196)))
      let t3457 = max(t3193.s, 1)
      tm[(tm.s2.r131$x.rebased*4) + 7] = select(t3192, 0.000000, tm[(t3457*4) + -4]) + (tm[(t3457*4) + -1]*select(1 < t3191, select(t3191 == 2, (1.000000/t3197)*t3196, select(t3192, 0.000000, (1.000000/t3197)*t3194)), (1.000000/t3197)*t3195))
     }
    }
    consume tm {
     abf4[((abf4.s0.abfi*npairs) + abf4.s0.pairindex)*4] = tm[abf4.s0.abfi*4]
     let t3198 = rijs[(abf4.s0.pairindex*3) + 2]
     let t3200 = rijs[abf4.s0.pairindex*3]
     let t3201 = rijs[(abf4.s0.pairindex*3) + 1]
     let t3203 = (float64)sqrt_f64((t3198*t3198) + ((t3200*t3200) + (t3201*t3201)))
     let t3204 = (1.000000/t3203)*((1.000000/t3203)*(1.000000/t3203))
     abf4[(((abf4.s0.abfi*npairs) + abf4.s0.pairindex)*4) + 1] = ((tm[(abf4.s0.abfi*4) + 1]*(((t3201*t3201) + (t3198*t3198))*t3204)) - (tm[(abf4.s0.abfi*4) + 2]*((t3200*t3201)*t3204))) - (tm[(abf4.s0.abfi*4) + 3]*((t3198*t3200)*t3204))
     let t3205 = rijs[(abf4.s0.pairindex*3) + 2]
     let t3207 = rijs[abf4.s0.pairindex*3]
     let t3209 = rijs[(abf4.s0.pairindex*3) + 1]
     let t3210 = (float64)sqrt_f64((t3205*t3205) + ((t3207*t3207) + (t3209*t3209)))
     let t3211 = (1.000000/t3210)*((1.000000/t3210)*(1.000000/t3210))
     abf4[(((abf4.s0.abfi*npairs) + abf4.s0.pairindex)*4) + 2] = ((tm[(abf4.s0.abfi*4) + 2]*(((t3207*t3207) + (t3205*t3205))*t3211)) - (tm[(abf4.s0.abfi*4) + 1]*((t3207*t3209)*t3211))) - (tm[(abf4.s0.abfi*4) + 3]*((t3205*t3209)*t3211))
     let t3212 = rijs[abf4.s0.pairindex*3]
     let t3213 = rijs[(abf4.s0.pairindex*3) + 1]
     let t3214 = (t3212*t3212) + (t3213*t3213)
     let t3215 = rijs[(abf4.s0.pairindex*3) + 2]
     let t3216 = (float64)sqrt_f64((t3215*t3215) + t3214)
     let t3217 = (1.000000/t3216)*((1.000000/t3216)*(1.000000/t3216))
     abf4[(((abf4.s0.abfi*npairs) + abf4.s0.pairindex)*4) + 3] = (tm[(abf4.s0.abfi*4) + 3]*(t3214*t3217)) - ((tm[(abf4.s0.abfi*4) + 2]*((t3213*t3215)*t3217)) + (tm[(abf4.s0.abfi*4) + 1]*((t3212*t3215)*t3217)))
    }
   }
  }
 }
 free tm
 allocate abf_f[float64 * adegree * npairs]
 allocate dabf_f[float64 * adegree * npairs * 3]
 produce dabf_f {
  produce abf_f {
   let t3614 = (float64)rcut - (float64)rin
   let t3611 = (float64)exp_f64(-1.000000)
   let t3608 = max(npairs, 0)
   let t3609 = max(adegree, 0)
   let t3610 = 1.000000/t3614
   let t3613 = adegree*npairs
   for (abf_f.s0.fused.pairindex, 0, t3608) {
    let t3617 = 3.000000/(t3611*t3614)
    let t3616 = abf_f.s0.fused.pairindex*adegree
    let t3615 = abf_f.s0.fused.pairindex*3
    for (abf_f.s0.fused.basis function index, 0, t3609) {
     let t3218 = rijs[t3615 + 2]
     let t3219 = rijs[t3615]
     let t3220 = rijs[t3615 + 1]
     let t3221 = (float64)sqrt_f64((t3218*t3218) + ((t3219*t3219) + (t3220*t3220)))
     let t3222 = (t3221 - (float64)rin)*t3610
     let t3458 = (t3222*t3222)*t3222
     abf_f[abf_f.s0.fused.basis function index + t3616] = ((float64)exp_f64(-1.000000/(float64)sqrt_f64(((1.000000 - t3458)*(1.000000 - t3458)) + 0.000001))/t3611)*(1.000000/(float64)pow_f64(t3221, float64((abf_f.s0.fused.basis function index + 1))))
     let t3618 = float64(abf_f.s0.fused.basis function index) + 1.000000
     let t3619 = abf_f.s0.fused.basis function index + t3616
     for (dabf_f.s0.dim, 0, 3) {
      let t3224 = rijs[t3615 + 2]
      let t3225 = rijs[t3615]
      let t3226 = rijs[t3615 + 1]
      let t3227 = (float64)sqrt_f64((t3224*t3224) + ((t3225*t3225) + (t3226*t3226)))
      let t3229 = (t3227 - (float64)rin)*t3610
      let t3232 = let t4202 = ((t3229*t3229)*t3229) in ((1.000000 - t4202)*(1.000000 - t4202))
      let t3234 = (float64)exp_f64(-1.000000/(float64)sqrt_f64(t3232 + 0.000001))
      let t3460 = t3229*t3229
      dabf_f[(dabf_f.s0.dim*t3613) + t3619] = (rijs[dabf_f.s0.dim + t3615]*(1.000000/t3227))*((1.000000/(float64)pow_f64(t3227, float64((abf_f.s0.fused.basis function index + 1))))*(((1.000000/(float64)pow_f64(t3232 + 0.000001, 1.500000))*(((t3460*t3617)*t3234)*((t3229*t3460) + -1.000000))) - ((1.000000/t3227)*((t3234/t3611)*t3618))))
     }
    }
   }
  }
 }
 allocate drbf_f[float64 * nbesselpars * bdegree * npairs * 3]
 allocate rbf[float64 * nbesselpars * bdegree * npairs]
 produce rbf {
  produce drbf_f {
   let t3627 = (float64)rcut - (float64)rin
   let t3624 = (float64)exp_f64(-1.000000)
   let t3620 = max(npairs, 0)
   let t3621 = max(nbesselpars, 0)
   let t3622 = max(bdegree, 0)
   let t3623 = 1.000000/t3627
   let t3626 = bdegree*nbesselpars
   for (drbf_f.s0.fused.pairindex, 0, t3620) {
    let t3635 = drbf_f.s0.fused.pairindex*t3626
    let t3636 = 1.000000/t3627
    let t3629 = (float64)sqrt_f64(t3636*2.000000)
    let t3631 = 3.000000/(t3624*t3627)
    let t3633 = (drbf_f.s0.fused.pairindex + npairs)*t3626
    let t3628 = drbf_f.s0.fused.pairindex*3
    let t3634 = ((npairs*t3626)*2) + t3635
    for (drbf_f.s0.fused.basis function param, 0, t3621) {
     let t3637 = drbf_f.s0.fused.basis function param + t3635
     let t3639 = drbf_f.s0.fused.basis function param + t3634
     let t3638 = drbf_f.s0.fused.basis function param + t3633
     for (drbf_f.s0.fused.basis function index, 0, t3622) {
      let t3235 = rijs[t3628]
      let t3236 = rijs[t3628 + 2]
      let t3237 = rijs[t3628 + 1]
      let t3238 = (float64)sqrt_f64((t3236*t3236) + ((t3235*t3235) + (t3237*t3237)))
      let t3240.s = besselparams[drbf_f.s0.fused.basis function param]
      let t3242 = (float64)exp_f64(0.000000 - ((max(t3240.s, 0.001000)*(t3238 - (float64)rin))*t3623))
      let t3243 = (float64)exp_f64(0.000000 - max(t3240.s, 0.001000))
      let t3244 = ((1.000000 - t3242)/(1.000000 - t3243))*float64((drbf_f.s0.fused.basis function index + 1))
      let t3245 = (t3238 - (float64)rin)*t3623
      let t3248 = let t4203 = ((t3245*t3245)*t3245) in ((1.000000 - t4203)*(1.000000 - t4203))
      let t3249 = (float64)exp_f64(-1.000000/(float64)sqrt_f64(t3248 + 0.000001))
      let t3251 = t3249/t3624
      let t3252 = (float64)sin_f64(t3244*3.141593)
      let t3463 = t3238 - (float64)rin
      let t3464 = t3245*t3245
      drbf_f[(drbf_f.s0.fused.basis function index*nbesselpars) + t3637] = ((1.000000/t3238)*t3235)*((t3629/float64((drbf_f.s0.fused.basis function index + 1)))*(((((((max(t3240.s, 0.001000)*t3636)*t3242)/(1.000000 - t3243))*(((float64)cos_f64(t3244*3.141593)*float64((drbf_f.s0.fused.basis function index + 1)))*t3251))*3.141593)/t3463) + (((((1.000000/(float64)pow_f64(t3248 + 0.000001, 1.500000))*(((t3464*t3631)*t3249)*((t3245*t3464) + -1.000000)))*t3252)/t3463) - ((t3251*t3252)/(t3463*t3463)))))
      let t3253 = rijs[t3628 + 1]
      let t3254 = rijs[t3628 + 2]
      let t3255 = rijs[t3628]
      let t3256 = (float64)sqrt_f64((t3254*t3254) + ((t3255*t3255) + (t3253*t3253)))
      let t3258.s = besselparams[drbf_f.s0.fused.basis function param]
      let t3260 = (float64)exp_f64(0.000000 - ((max(t3258.s, 0.001000)*(t3256 - (float64)rin))*t3623))
      let t3261 = (float64)exp_f64(0.000000 - max(t3258.s, 0.001000))
      let t3262 = ((1.000000 - t3260)/(1.000000 - t3261))*float64((drbf_f.s0.fused.basis function index + 1))
      let t3263 = (t3256 - (float64)rin)*t3623
      let t3266 = let t4204 = ((t3263*t3263)*t3263) in ((1.000000 - t4204)*(1.000000 - t4204))
      let t3267 = (float64)exp_f64(-1.000000/(float64)sqrt_f64(t3266 + 0.000001))
      let t3269 = t3267/t3624
      let t3270 = (float64)sin_f64(t3262*3.141593)
      let t3467 = t3256 - (float64)rin
      let t3468 = t3263*t3263
      drbf_f[(drbf_f.s0.fused.basis function index*nbesselpars) + t3638] = ((1.000000/t3256)*t3253)*((t3629/float64((drbf_f.s0.fused.basis function index + 1)))*(((((((max(t3258.s, 0.001000)*t3636)*t3260)/(1.000000 - t3261))*(((float64)cos_f64(t3262*3.141593)*float64((drbf_f.s0.fused.basis function index + 1)))*t3269))*3.141593)/t3467) + (((((1.000000/(float64)pow_f64(t3266 + 0.000001, 1.500000))*(((t3468*t3631)*t3267)*((t3263*t3468) + -1.000000)))*t3270)/t3467) - ((t3269*t3270)/(t3467*t3467)))))
      let t3272 = rijs[t3628 + 2]
      let t3273 = rijs[t3628]
      let t3274 = rijs[t3628 + 1]
      let t3275 = (float64)sqrt_f64((t3272*t3272) + ((t3273*t3273) + (t3274*t3274)))
      let t3277.s = besselparams[drbf_f.s0.fused.basis function param]
      let t3279 = (float64)exp_f64(0.000000 - ((max(t3277.s, 0.001000)*(t3275 - (float64)rin))*t3623))
      let t3280 = (float64)exp_f64(0.000000 - max(t3277.s, 0.001000))
      let t3281 = ((1.000000 - t3279)/(1.000000 - t3280))*float64((drbf_f.s0.fused.basis function index + 1))
      let t3282 = (t3275 - (float64)rin)*t3623
      let t3285 = let t4205 = ((t3282*t3282)*t3282) in ((1.000000 - t4205)*(1.000000 - t4205))
      let t3286 = (float64)exp_f64(-1.000000/(float64)sqrt_f64(t3285 + 0.000001))
      let t3288 = t3286/t3624
      let t3289 = (float64)sin_f64(t3281*3.141593)
      let t3472 = t3275 - (float64)rin
      let t3473 = t3282*t3282
      drbf_f[(drbf_f.s0.fused.basis function index*nbesselpars) + t3639] = ((1.000000/t3275)*t3272)*((t3629/float64((drbf_f.s0.fused.basis function index + 1)))*(((((((max(t3277.s, 0.001000)*t3636)*t3279)/(1.000000 - t3280))*(((float64)cos_f64(t3281*3.141593)*float64((drbf_f.s0.fused.basis function index + 1)))*t3288))*3.141593)/t3472) + (((((1.000000/(float64)pow_f64(t3285 + 0.000001, 1.500000))*(((t3473*t3631)*t3286)*((t3282*t3473) + -1.000000)))*t3289)/t3472) - ((t3288*t3289)/(t3472*t3472)))))
      let t3292.s = besselparams[drbf_f.s0.fused.basis function param]
      let t3293 = rijs[t3628 + 2]
      let t3294 = rijs[t3628]
      let t3295 = rijs[t3628 + 1]
      let t3296.s = (float64)sqrt_f64((t3293*t3293) + ((t3294*t3294) + (t3295*t3295)))
      let t3297 = (t3296.s - (float64)rin)*t3623
      let t3476 = max(t3292.s, 0.001000)
      let t3477 = t3296.s - (float64)rin
      let t3478 = (t3297*t3297)*t3297
      rbf[(drbf_f.s0.fused.basis function index*nbesselpars) + t3637] = ((float64)sin_f64((((1.000000 - (float64)exp_f64(0.000000 - ((t3476*t3477)*t3636)))/(1.000000 - (float64)exp_f64(0.000000 - t3476)))*float64((drbf_f.s0.fused.basis function index + 1)))*3.141593)*((t3629/float64((drbf_f.s0.fused.basis function index + 1)))*((float64)exp_f64(-1.000000/(float64)sqrt_f64(((1.000000 - t3478)*(1.000000 - t3478)) + 0.000001))/t3624)))/t3477
     }
    }
   }
  }
 }
 let rbft.rbf_abf_info.min_realized.s = min(select(bdegree < 0, (nbesselpars + -1)*bdegree, 0), bdegree*nbesselpars)
 let rbft.rbf_abf_info.extent_realized = let t4206 = (bdegree < 0) in (let t4207 = ((nbesselpars + -1)*bdegree) in (let t4208 = (bdegree*nbesselpars) in (max(max(select(t4206, 0, t4207) + bdegree, ns), t4208 + adegree) - min(min(select(t4206, t4207, 0), t4208), 0))))
 allocate rbft[float64 * npairs * rbft.rbf_abf_info.extent_realized * 4]
 produce rbft {
  let t3640 = min(rbft.rbf_abf_info.min_realized.s, 0)
  let t3641 = npairs*rbft.rbf_abf_info.extent_realized
  for (rbft.s0.pairindex, 0, npairs) {
   for (rbft.s0.rbf_abf_info, 0, ns) {
    let t3642 = ((rbft.s0.rbf_abf_info - t3640)*npairs) + rbft.s0.pairindex
    for (rbft.s0.rbfty, 0, 4) {
     rbft[(rbft.s0.rbfty*t3641) + t3642] = 0.000000
    }
   }
  }
  consume rbf {
   let t3644 = min(rbft.rbf_abf_info.min_realized.s, 0)
   for (rbft.s1.r82$z, 0, npairs) {
    let t3645 = (bdegree*nbesselpars)*rbft.s1.r82$z
    for (rbft.s1.r82$w, 0, 3) {
     for (rbft.s1.r82$y, 0, bdegree) {
      let t3647 = rbft.s1.r82$y - t3644
      let t3646 = (nbesselpars*rbft.s1.r82$y) + t3645
      for (rbft.s1.r82$x, 0, nbesselpars) {
       rbft[(((bdegree*rbft.s1.r82$x) + t3647)*npairs) + rbft.s1.r82$z] = rbf[rbft.s1.r82$x + t3646]
      }
     }
    }
   }
  }
  free rbf
  consume abf_f {
   let t3648 = (bdegree*nbesselpars) - min(rbft.rbf_abf_info.min_realized.s, 0)
   for (rbft.s2.r87$x, 0, npairs) {
    for (rbft.s2.r87$y, 0, adegree) {
     let t3651 = ((rbft.s2.r87$y + t3648)*npairs) + rbft.s2.r87$x
     let t3650 = (adegree*rbft.s2.r87$x) + rbft.s2.r87$y
     for (rbft.s2.r87$z, 0, 3) {
      rbft[t3651] = abf_f[t3650]
     }
    }
   }
  }
  free abf_f
  consume drbf_f {
   let t3654 = min(rbft.rbf_abf_info.min_realized.s, 0)
   let t3653 = npairs*rbft.rbf_abf_info.extent_realized
   for (rbft.s3.r82$w, 0, 3) {
    let t3658 = bdegree*nbesselpars
    let t3655 = (npairs*t3658)*rbft.s3.r82$w
    let t3657 = (rbft.s3.r82$w + 1)*t3653
    for (rbft.s3.r82$z, 0, npairs) {
     let t3659 = (rbft.s3.r82$z*t3658) + t3655
     let t3660 = rbft.s3.r82$z + t3657
     for (rbft.s3.r82$y, 0, bdegree) {
      let t3662 = rbft.s3.r82$y - t3654
      let t3661 = (nbesselpars*rbft.s3.r82$y) + t3659
      for (rbft.s3.r82$x, 0, nbesselpars) {
       rbft[(((bdegree*rbft.s3.r82$x) + t3662)*npairs) + t3660] = drbf_f[rbft.s3.r82$x + t3661]
      }
     }
    }
   }
  }
  free drbf_f
  consume dabf_f {
   let t3663 = npairs*rbft.rbf_abf_info.extent_realized
   let t3665 = (bdegree*nbesselpars) - min(rbft.rbf_abf_info.min_realized.s, 0)
   for (rbft.s4.r87$x, 0, npairs) {
    let t3666 = adegree*rbft.s4.r87$x
    let t3668 = rbft.s4.r87$x + t3663
    for (rbft.s4.r87$y, 0, adegree) {
     let t3670 = adegree*npairs
     let t3671 = ((rbft.s4.r87$y + t3665)*npairs) + t3668
     let t3669 = rbft.s4.r87$y + t3666
     for (rbft.s4.r87$z, 0, 3) {
      rbft[(rbft.s4.r87$z*t3663) + t3671] = dabf_f[(rbft.s4.r87$z*t3670) + t3669]
     }
    }
   }
  }
  free dabf_f
 }
 let rbf$1.i.extent_realized = max(max(nrbf3, rbf$1.s1.i.max.s), nrbf2)
 allocate rbf$1[float64 * npairs * rbf$1.i.extent_realized * 4]
 produce rbf$1 {
  let t3672 = npairs*rbf$1.i.extent_realized
  for (rbf$1.s0.c, 0, 4) {
   let t3673 = rbf$1.s0.c*t3672
   for (rbf$1.s0.i, 0, rbf$1.s1.i.max.s) {
    let t3674 = (npairs*rbf$1.s0.i) + t3673
    for (rbf$1.s0.j, 0, npairs) {
     rbf$1[rbf$1.s0.j + t3674] = 0.000000
    }
   }
  }
  consume rbft {
   let t3677 = min(rbft.rbf_abf_info.min_realized.s, 0)
   let t3676 = npairs*rbft.rbf_abf_info.extent_realized
   let t3675 = npairs*rbf$1.i.extent_realized
   for (rbf$1.s1.c, 0, 4) {
    let t3679 = rbf$1.s1.c*t3676
    let t3678 = rbf$1.s1.c*t3675
    for (rbf$1.s1.i, 0, rbf$1.s1.i.max.s) {
     let t3681 = ns*rbf$1.s1.i
     let t3680 = (npairs*rbf$1.s1.i) + t3678
     for (rbf$1.s1.j, 0, npairs) {
      let t3682 = rbf$1.s1.j + t3680
      let t3683 = rbf$1.s1.j + t3679
      for (rbf$1.s1.r105$x, 0, ns) {
       rbf$1[t3682] = rbf$1[t3682] + (Phi[rbf$1.s1.r105$x + t3681]*rbft[((rbf$1.s1.r105$x - t3677)*npairs) + t3683])
      }
     }
    }
   }
  }
  free rbft
 }
 let U.m.extent_realized = max(max(U.s0.m.max.s, nrbf4), nrbf3)
 let U.k.extent_realized = max(max(U.s0.k.max.s, k4), k3)
 allocate U[float64 * npairs * U.k.extent_realized * U.m.extent_realized * 4]
 let sumU.m.extent_realized = max(max(U.s0.m.max.s, nrbf4), nrbf3)
 let sumU.k.extent_realized = max(max(k4, sumU.s0.k.max) + 1, k3)
 let sumU.n.extent_realized = let t4209 = (nelements == 1) in max(max(select(t4209, 0, nelements + -1), max(select(t4209, 0, max(nelements, 1) + -1), nelements + -1)) + 1, nelements)
 allocate sumU[float64 * sumU.n.extent_realized * sumU.k.extent_realized * sumU.m.extent_realized]
 produce sumU {
  produce U {
   let t3691 = max(nelements, 1)
   let t3685 = max(sumU.s0.k.max + 1, U.s0.k.max.s)
   let t3686 = max(nelements, npairs)
   let t3684 = max(U.s0.m.max.s, 0)
   let t3687 = min(npairs, t3691)
   let t3689 = sumU.k.extent_realized*sumU.n.extent_realized
   let t3688 = U.k.extent_realized*npairs
   for (U.s0.fused.m, 0, t3684) {
    let U.s0.fused.k.epilogue.s = min(min(U.s0.k.max.s, t3685), sumU.s0.k.max + 1)
    let t3692 = max(U.s0.fused.k.epilogue.s, 0)
    let t3693 = min(max(t3686, 1), t3687)
    let t3695 = U.s0.fused.m*t3689
    let t3694 = U.s0.fused.m*t3688
    for (U.s0.fused.k, 0, t3692) {
     let t3697 = max(t3693, 0)
     let t3699 = (U.s0.fused.k*sumU.n.extent_realized) + t3695
     let t3698 = (U.s0.fused.k*npairs) + t3694
     for (U.s0.fused.n, 0, t3697) {
      let t3700 = (U.s0.fused.n + t3698)*4
      for (U.s0.crab.rebased, 0, 3) {
       U[U.s0.crab.rebased + t3700] = 0.000000
      }
      sumU[U.s0.fused.n + t3699] = 0.000000
     }
     let U.s0.fused.n.new_max.s = max(t3686, t3693)
     let t3705 = max(t3693, 0)
     let t3701 = max(U.s0.fused.n.new_max.s, 1) - t3705
     let t3704 = (U.s0.fused.k*sumU.n.extent_realized) + (t3695 + t3705)
     let t3703 = (U.s0.fused.k*npairs) + (t3694 + t3705)
     for (U.s0.fused.n.rebased, 0, t3701) {
      if (((U.s0.fused.n.rebased + t3705) + 1) <= npairs) {
       let t3706 = (U.s0.fused.n.rebased + t3703)*4
       for (U.s0.crab.rebased, 0, 3) {
        U[U.s0.crab.rebased + t3706] = 0.000000
       }
      }
      if (((U.s0.fused.n.rebased + t3705) + 1) <= t3691) {
       sumU[U.s0.fused.n.rebased + t3704] = 0.000000
      }
     }
    }
    let U.s0.fused.k.new_max.s = max(U.s0.fused.k.epilogue.s, t3685)
    let t3712 = max(U.s0.fused.k.epilogue.s, 0)
    let t3708 = max(t3686, 1)
    let t3711 = U.s0.fused.m*t3689
    let t3710 = U.s0.fused.m*t3688
    let t3707 = max(U.s0.fused.k.new_max.s, 0) - t3712
    for (U.s0.fused.k.rebased, 0, t3707) {
     let t3717 = U.s0.fused.k.rebased + t3712
     let t3713 = (t3717 + 1) <= U.s0.k.max.s
     let t3715 = t3717 <= sumU.s0.k.max
     let t3716 = (sumU.n.extent_realized*t3717) + t3711
     let t3714 = (npairs*t3717) + t3710
     for (U.s0.fused.n, 0, t3708) {
      if (((U.s0.fused.n + 1) <= npairs) && t3713) {
       let t3718 = (U.s0.fused.n + t3714)*4
       for (U.s0.crab.rebased, 0, 3) {
        U[U.s0.crab.rebased + t3718] = 0.000000
       }
      }
      if (((U.s0.fused.n + 1) <= t3691) && t3715) {
       sumU[U.s0.fused.n + t3716] = 0.000000
      }
     }
    }
   }
   consume rbf$1 {
    consume abf4 {
     let t3723 = npairs*rbf$1.i.extent_realized
     let t3720 = U.k.extent_realized*npairs
     for (U.s1.r166$x, 0, nrbf3) {
      let t3725 = U.s1.r166$x*t3720
      let t3724 = U.s1.r166$x*npairs
      for (U.s1.r166$y, 0, k3) {
       let t3733 = U.s1.r166$y*npairs
       let t3731 = (t3723*3) + t3724
       let t3730 = (t3723*2) + t3724
       let t3729 = t3723 + t3724
       for (U.s1.r166$z, 0, npairs) {
        let t3487 = U.s1.r166$z + t3733
        U[((t3725 + t3733) + U.s1.r166$z)*4] = (abf4[(t3487*4) + 1]*rbf$1[U.s1.r166$z + t3724]) + (rbf$1[U.s1.r166$z + t3729]*abf4[t3487*4])
        let t3490 = U.s1.r166$z + t3733
        U[(((t3725 + t3733) + U.s1.r166$z)*4) + 1] = (abf4[(t3490*4) + 2]*rbf$1[U.s1.r166$z + t3724]) + (rbf$1[U.s1.r166$z + t3730]*abf4[t3490*4])
        let t3493 = U.s1.r166$z + t3733
        U[(((t3725 + t3733) + U.s1.r166$z)*4) + 2] = (abf4[(t3493*4) + 3]*rbf$1[U.s1.r166$z + t3724]) + (rbf$1[U.s1.r166$z + t3731]*abf4[t3493*4])
        U[(((t3725 + t3733) + U.s1.r166$z)*4) + 3] = 0.000000
       }
      }
     }
     if (nelements == 1) {
      let t3734 = sumU.k.extent_realized*sumU.n.extent_realized
      for (sumU.s1.r166$x, 0, nrbf3) {
       let t3735 = sumU.s1.r166$x*t3734
       let t3736 = npairs*sumU.s1.r166$x
       for (sumU.s1.r166$y, 0, k3) {
        let t3738 = npairs*sumU.s1.r166$y
        let t3737 = (sumU.n.extent_realized*sumU.s1.r166$y) + t3735
        for (sumU.s1.r166$z, 0, npairs) {
         sumU[t3737] = sumU[t3737] + (rbf$1[sumU.s1.r166$z + t3736]*abf4[(sumU.s1.r166$z + t3738)*4])
        }
       }
      }
     } else {
      let t3739 = sumU.k.extent_realized*sumU.n.extent_realized
      for (sumU.s1.r166$x, 0, nrbf3) {
       let t3740 = sumU.s1.r166$x*t3739
       let t3741 = npairs*sumU.s1.r166$x
       for (sumU.s1.r166$y, 0, k3) {
        let t3743 = npairs*sumU.s1.r166$y
        let t3742 = (sumU.n.extent_realized*sumU.s1.r166$y) + t3740
        for (sumU.s1.r166$z, 0, npairs) {
         let t3320 = max(min(tj[sumU.s1.r166$z - tj.min.0], nelements), 1) + t3742
         sumU[t3320 + -1] = sumU[t3320 + -1] + (rbf$1[sumU.s1.r166$z + t3741]*abf4[(sumU.s1.r166$z + t3743)*4])
        }
       }
      }
     }
    }
   }
   free abf4
  }
 }
 let cU.ne.extent_realized = let t4210 = max(nelements, 1) in max(select(nelements == 1, 1, t4210), t4210)
 allocate cU[float64 * cU.ne.extent_realized * k3 * nrbf3]
 produce cU {
  let t3744 = max(nelements, 1)
  for (cU.s0.rbfThree, 0, nrbf3) {
   let t3746 = (cU.ne.extent_realized*k3)*cU.s0.rbfThree
   for (cU.s0.k3var, 0, k3) {
    let t3747 = (cU.ne.extent_realized*cU.s0.k3var) + t3746
    for (cU.s0.ne, 0, t3744) {
     cU[cU.s0.ne + t3747] = 0.000000
    }
   }
  }
  consume sumU {
   let t3754 = ((nelements + 1)*nelements)/2
   let t3756 = sumU.k.extent_realized*sumU.n.extent_realized
   let t3750 = coeff3.min.3*coeff3.stride.3
   let t3751 = coeff3.min.2*coeff3.stride.2
   let t3752 = coeff3.min.1*coeff3.stride.1
   let t3749 = 0 - ti.min.0
   for (cU.s1.r234$4, 0, nrbf3) {
    let t3757 = (cU.ne.extent_realized*k3)*cU.s1.r234$4
    let t3761 = cU.s1.r234$4*t3756
    let t3759 = cU.s1.r234$4*coeff3.stride.1
    for (cU.s1.r234$y, 0, nabf3) {
     let t3762 = cU.s1.r234$y - pn3.min.0
     for (cU.s1.r234$z, 0, nelements) {
      let cU.s1.r234$w.new_min.s = min(cU.s1.r234$z, nelements)
      let t3765 = nelements - cU.s1.r234$w.new_min.s
      let t3768 = ((cU.s1.r234$z/2)*(((nelements*2) - cU.s1.r234$z) + -3)) + cU.s1.r234$w.new_min.s
      let t3769 = cU.s1.r234$z + t3761
      let t3766 = cU.s1.r234$w.new_min.s + t3757
      for (cU.s1.r234$w.rebased, 0, t3765) {
       let cU.s1.r234$x.new_min.s = min(pn3[t3762], k3)
       let cU.s1.r234$x.new_max.s = max(min(pn3[t3762 + 1], k3), cU.s1.r234$x.new_min.s)
       let t3775 = max(cU.s1.r234$x.new_min.s, 0)
       let t3774 = max(min(cU.s1.r234$w.rebased + t3768, t3754), 1)*coeff3.stride.2
       let t3773 = coeff3.stride.2*-1
       let t3770 = max(cU.s1.r234$x.new_max.s, 0) - t3775
       let t3771 = cU.s1.r234$w.rebased + t3766
       for (cU.s1.r234$x.rebased, 0, t3770) {
        let t3322 = ((cU.s1.r234$x.rebased + t3775)*cU.ne.extent_realized) + t3771
        cU[t3322] = cU[t3322] + (coeff3[(((((((((max(min(ti[t3749], nelements), 1)*coeff3.stride.3) - t3750) - t3751) - t3752) - coeff3.min.0) + t3773) - coeff3.stride.3) + t3759) + cU.s1.r234$y) + t3774]*(sumU[((cU.s1.r234$x.rebased + t3775)*sumU.n.extent_realized) + t3769]*float64(pc3[(t3775 - pc3.min.0) + cU.s1.r234$x.rebased])))
       }
      }
     }
    }
   }
  }
  consume sumU {
   let t3782 = ((nelements + 1)*nelements)/2
   let t3784 = sumU.k.extent_realized*sumU.n.extent_realized
   let t3778 = coeff3.min.3*coeff3.stride.3
   let t3779 = coeff3.min.2*coeff3.stride.2
   let t3780 = coeff3.min.1*coeff3.stride.1
   let t3777 = 0 - ti.min.0
   for (cU.s2.r234$4, 0, nrbf3) {
    let t3785 = (cU.ne.extent_realized*k3)*cU.s2.r234$4
    let t3789 = cU.s2.r234$4*t3784
    let t3787 = cU.s2.r234$4*coeff3.stride.1
    for (cU.s2.r234$y, 0, nabf3) {
     let t3790 = cU.s2.r234$y - pn3.min.0
     for (cU.s2.r234$z, 0, nelements) {
      let cU.s2.r234$w.new_min.s = min(cU.s2.r234$z, nelements)
      let t3793 = nelements - cU.s2.r234$w.new_min.s
      let t3796 = ((cU.s2.r234$z/2)*(((nelements*2) - cU.s2.r234$z) + -3)) + cU.s2.r234$w.new_min.s
      let t3794 = cU.s2.r234$z + t3785
      let t3797 = cU.s2.r234$w.new_min.s + t3789
      for (cU.s2.r234$w.rebased, 0, t3793) {
       let cU.s2.r234$x.new_min.s = min(pn3[t3790], k3)
       let cU.s2.r234$x.new_max.s = max(min(pn3[t3790 + 1], k3), cU.s2.r234$x.new_min.s)
       let t3803 = max(cU.s2.r234$x.new_min.s, 0)
       let t3801 = max(min(cU.s2.r234$w.rebased + t3796, t3782), 1)*coeff3.stride.2
       let t3800 = coeff3.stride.2*-1
       let t3798 = max(cU.s2.r234$x.new_max.s, 0) - t3803
       let t3802 = cU.s2.r234$w.rebased + t3797
       for (cU.s2.r234$x.rebased, 0, t3798) {
        let t3323 = ((cU.s2.r234$x.rebased + t3803)*cU.ne.extent_realized) + t3794
        cU[t3323] = cU[t3323] + (coeff3[(((((((((max(min(ti[t3777], nelements), 1)*coeff3.stride.3) - t3778) - t3779) - t3780) - coeff3.min.0) + t3800) - coeff3.stride.3) + t3787) + cU.s2.r234$y) + t3801]*(sumU[((cU.s2.r234$x.rebased + t3803)*sumU.n.extent_realized) + t3802]*float64(pc3[(t3803 - pc3.min.0) + cU.s2.r234$x.rebased])))
       }
      }
     }
    }
   }
  }
 }
 allocate dd2[float64 * max(nelements, 1) * nrbf2 * npairs * 3]
 allocate d2$0[float64 * max(nelements, 1) * nrbf2]
 produce d2$0 {
  produce dd2 {
   let t3804 = max(nelements, 1)
   for (d2$0.s0.m, 0, nrbf2) {
    let t3805 = d2$0.s0.m*t3804
    for (d2$0.s0.ne, 0, t3804) {
     d2$0[d2$0.s0.ne + t3805] = 0.000000
    }
   }
   let t3806 = max(nelements, 1)
   for (dd2.s0.dim, 0, 3) {
    for (dd2.s0.n, 0, npairs) {
     let t3809 = nrbf2*t3806
     let t3808 = ((npairs*t3809)*dd2.s0.dim) + (dd2.s0.n*t3809)
     for (dd2.s0.m, 0, nrbf2) {
      let t3810 = (dd2.s0.m*t3806) + t3808
      for (dd2.s0.ne, 0, t3806) {
       dd2[dd2.s0.ne + t3810] = 0.000000
      }
     }
    }
   }
   consume rbf$1 {
    let t3811 = max(nrbf2, 0)
    let t3812 = max(nelements, 1)
    let t3813 = npairs*rbf$1.i.extent_realized
    for (dd2.s1.r192$y, 0, t3811) {
     let t3819 = dd2.s1.r192$y*npairs
     let t3815 = nrbf2*t3812
     let t3814 = dd2.s1.r192$y*t3812
     let t3818 = (t3813*3) + t3819
     let t3817 = (t3813*2) + t3819
     let t3816 = t3813 + t3819
     for (dd2.s1.r192$x, 0, npairs) {
      let t3327 = max(min(tj[dd2.s1.r192$x - tj.min.0], nelements), 1) + ((dd2.s1.r192$x*t3815) + t3814)
      dd2[t3327 + -1] = dd2[t3327 + -1] + rbf$1[dd2.s1.r192$x + t3816]
      let t3330 = max(min(tj[dd2.s1.r192$x - tj.min.0], nelements), 1) + ((dd2.s1.r192$x*t3815) + ((npairs*t3815) + t3814))
      dd2[t3330 + -1] = dd2[t3330 + -1] + rbf$1[dd2.s1.r192$x + t3817]
      let t3334 = max(min(tj[dd2.s1.r192$x - tj.min.0], nelements), 1) + ((dd2.s1.r192$x*t3815) + (((npairs*t3815)*2) + t3814))
      dd2[t3334 + -1] = dd2[t3334 + -1] + rbf$1[dd2.s1.r192$x + t3818]
     }
     let t3820 = dd2.s1.r192$y*t3812
     let t3821 = dd2.s1.r192$y*npairs
     for (d2$0.s1.r192$x, 0, npairs) {
      let t3336 = max(min(tj[d2$0.s1.r192$x - tj.min.0], nelements), 1) + t3820
      d2$0[t3336 + -1] = d2$0[t3336 + -1] + rbf$1[d2$0.s1.r192$x + t3821]
     }
    }
   }
  }
 }
 allocate ind23[int32 * n23 * 2]
 produce ind23 {
  for (ind23.s0.c.rebased, 0, 2) {
   for (ind23.s0.k, 0, n23) {
    let t3337 = ind23.s0.k/nrbf2
    ind23[(ind23.s0.c.rebased*n23) + ind23.s0.k] = mux(ind23.s0.c.rebased + 1, 0, ind23.s0.k - (nrbf2*t3337), t3337)
   }
  }
 }
 allocate cf1[float64 * n32]
 produce cf1 {
  for (cf1.s0.j, 0, n32) {
   cf1[cf1.s0.j] = 0.000000
  }
  consume ind23 {
   consume d2$0 {
    let t3823 = max(nelements, 1)
    let t3824 = 0 - ti.min.0
    for (cf1.s1.j, 0, n32) {
     for (cf1.s1.r256$x, 0, n23) {
      cf1[cf1.s1.j] = cf1[cf1.s1.j] + (d2$0[ind23[cf1.s1.r256$x] + (ind23[cf1.s1.r256$x + n23]*t3823)]*coeff23[(((ti[t3824] + -1)*coeff23.stride.2) + (cf1.s1.j*n23)) + cf1.s1.r256$x])
     }
    }
   }
  }
 }
 let d3$0.kme.extent_realized = max(select(nelements == 1, 1, max(coeff3.extent.2.required.s, 1)), max(((nelements + 1)*nelements)/2, 1))
 allocate d3$0[float64 * nabf3 * nrbf3 * d3$0.kme.extent_realized]
 produce d3$0 {
  let t3826 = max(((nelements + 1)*nelements)/2, 1)
  for (d3$0.s0.kme, 0, t3826) {
   let t3828 = (nabf3*nrbf3)*d3$0.s0.kme
   for (d3$0.s0.rbfThree, 0, nrbf3) {
    let t3829 = (d3$0.s0.rbfThree*nabf3) + t3828
    for (d3$0.s0.abfThree, 0, nabf3) {
     d3$0[d3$0.s0.abfThree + t3829] = 0.000000
    }
   }
  }
  consume sumU {
   if (nelements == 1) {
    let t3830 = sumU.k.extent_realized*sumU.n.extent_realized
    for (d3$0.s1.rbfThree, 0, nrbf3) {
     let t3831 = d3$0.s1.rbfThree*t3830
     let t3832 = d3$0.s1.rbfThree*nabf3
     for (d3$0.s1.r203$y, 0, nabf3) {
      let d3$0.s1.r203$x.new_min.s = min(pn3[d3$0.s1.r203$y - pn3.min.0], k3)
      let d3$0.s1.r203$x.new_max.s = max(min(pn3[(d3$0.s1.r203$y - pn3.min.0) + 1], k3), d3$0.s1.r203$x.new_min.s)
      let t3837 = max(d3$0.s1.r203$x.new_min.s, 0)
      let t3836 = t3837 - pc3.min.0
      let t3833 = max(d3$0.s1.r203$x.new_max.s, 0) - t3837
      let t3835 = d3$0.s1.r203$y + t3832
      for (d3$0.s1.r203$x.rebased, 0, t3833) {
       let t3339 = sumU[((d3$0.s1.r203$x.rebased + t3837)*sumU.n.extent_realized) + t3831]
       d3$0[t3835] = d3$0[t3835] + ((t3339*float64(pc3[d3$0.s1.r203$x.rebased + t3836]))*t3339)
      }
     }
    }
   } else {
    let t3839 = ((nelements + 1)*nelements)/2
    let t3841 = sumU.k.extent_realized*sumU.n.extent_realized
    for (d3$0.s1.rbfThree, 0, nrbf3) {
     let t3842 = (d3$0.s1.rbfThree - nrbf3)*nabf3
     let t3844 = nabf3*nrbf3
     let t3845 = d3$0.s1.rbfThree*t3841
     for (d3$0.s1.r203$y, 0, nabf3) {
      let t3846 = d3$0.s1.r203$y - pn3.min.0
      let t3847 = d3$0.s1.r203$y + t3842
      for (d3$0.s1.r203$z, 0, nelements) {
       let d3$0.s1.r203$w.new_min.s = min(d3$0.s1.r203$z, nelements)
       let t3849 = nelements - d3$0.s1.r203$w.new_min.s
       let t3850 = ((d3$0.s1.r203$z/2)*(((nelements*2) - d3$0.s1.r203$z) + -3)) + d3$0.s1.r203$w.new_min.s
       let t3852 = d3$0.s1.r203$z + t3845
       let t3851 = d3$0.s1.r203$w.new_min.s + t3845
       for (d3$0.s1.r203$w.rebased, 0, t3849) {
        let d3_0.s1.r203_x.new_min$1.s = min(pn3[t3846], k3)
        let d3_0.s1.r203_x.new_max$1.s = max(min(pn3[t3846 + 1], k3), d3_0.s1.r203_x.new_min$1.s)
        let t3857 = max(d3_0.s1.r203_x.new_min$1.s, 0)
        let t3853 = max(d3_0.s1.r203_x.new_max$1.s, 0) - t3857
        let t3854 = (max(min(d3$0.s1.r203$w.rebased + t3850, t3839), 1)*t3844) + t3847
        let t3856 = d3$0.s1.r203$w.rebased + t3851
        for (d3$0.s1.r203$x.rebased, 0, t3853) {
         let t3511 = (d3$0.s1.r203$x.rebased + t3857)*sumU.n.extent_realized
         d3$0[t3854] = d3$0[t3854] + (sumU[t3511 + t3856]*(sumU[t3511 + t3852]*float64(pc3[(t3857 - pc3.min.0) + d3$0.s1.r203$x.rebased])))
        }
       }
      }
     }
    }
   }
  }
 }
 allocate ind33[int32 * n33 * 3]
 produce ind33 {
  for (ind33.s0.c, 0, 3) {
   for (ind33.s0.k, 0, n33) {
    let t3344 = ind33.s0.k/(nabf3*nrbf3)
    let t3345 = ind33.s0.k - ((nabf3*t3344)*nrbf3)
    ind33[(ind33.s0.c*n33) + ind33.s0.k] = mux(ind33.s0.c, t3345 % nabf3, t3345/nabf3, t3344)
   }
  }
 }
 allocate cf133[float64 * n33]
 produce cf133 {
  for (cf133.s0.j, 0, n33) {
   cf133[cf133.s0.j] = 0.000000
  }
  consume ind33 {
   consume d3$0 {
    let t3861 = ((n33 + 1)*n33)/2
    let t3863 = nabf3*nrbf3
    let t3864 = 0 - ti.min.0
    for (cf133.s1.r279$y, 0, n33) {
     let cf133.s1.r279_x.new_min$1.s = min(cf133.s1.r279$y, n33)
     let t3866 = (((n33 + -1)*cf133.s1.r279$y) + cf133.s1.r279_x.new_min$1.s) - (((cf133.s1.r279$y + -1)*cf133.s1.r279$y)/2)
     let t3865 = n33 - cf133.s1.r279_x.new_min$1.s
     let t3867 = (n33*2) + cf133.s1.r279_x.new_min$1.s
     let t3868 = cf133.s1.r279_x.new_min$1.s + n33
     for (cf133.s1.r279$x.rebased, 0, t3865) {
      let t3347.s = min(cf133.s1.r279$x.rebased + t3866, t3861 + -1)
      let t3512 = max(t3347.s, 0)
      cf133[cf133.s1.r279$y] = cf133[cf133.s1.r279$y] + (d3$0[(ind33[cf133.s1.r279$x.rebased + t3868]*nabf3) + (ind33[cf133.s1.r279$x.rebased + cf133.s1.r279_x.new_min$1.s] + (ind33[cf133.s1.r279$x.rebased + t3867]*t3863))]*coeff33[if_then_else(t3861 < (t3512 + 1), return_second(halide_print((char *)stringify(t3512, " error!\n")), t3512), t3512) + ((max(min(ti[t3864], nelements), 1) + -1)*coeff33.stride.1)])
     }
    }
   }
  }
 }
 allocate ind32[int32 * n32 * 3]
 produce ind32 {
  for (ind32.s0.c, 0, 3) {
   for (ind32.s0.k, 0, n32) {
    let t3348 = ind32.s0.k/(nabf3*nrbf3)
    let t3349 = ind32.s0.k - ((nabf3*t3348)*nrbf3)
    ind32[(ind32.s0.c*n32) + ind32.s0.k] = mux(ind32.s0.c, t3349 % nabf3, t3349/nabf3, t3348)
   }
  }
 }
 allocate cf2[float64 * n23]
 produce cf2 {
  for (cf2.s0.i, 0, n23) {
   cf2[cf2.s0.i] = 0.000000
  }
  consume ind32 {
   consume d3$0 {
    let t3873 = nabf3*nrbf3
    let t3874 = 0 - ti.min.0
    for (cf2.s1.i, 0, n23) {
     for (cf2.s1.r263$x, 0, n32) {
      cf2[cf2.s1.i] = cf2[cf2.s1.i] + (d3$0[(ind32[cf2.s1.r263$x + n32]*nabf3) + (ind32[cf2.s1.r263$x] + (ind32[(n32*2) + cf2.s1.r263$x]*t3873))]*coeff23[(cf2.s1.r263$x*n23) + (((ti[t3874] + -1)*coeff23.stride.2) + cf2.s1.i)])
     }
    }
   }
  }
 }
 allocate cf233[float64 * n33]
 produce cf233 {
  for (cf233.s0.j, 0, n33) {
   cf233[cf233.s0.j] = 0.000000
  }
  consume ind33 {
   consume d3$0 {
    let t3876 = ((n33 + 1)*n33)/2
    let t3878 = nabf3*nrbf3
    let t3879 = 0 - ti.min.0
    for (cf233.s1.r279$y, 0, n33) {
     let cf233.s1.r279$x.new_min.s = min(cf233.s1.r279$y, n33)
     let t3881 = (((n33 + -1)*cf233.s1.r279$y) + cf233.s1.r279$x.new_min.s) - (((cf233.s1.r279$y + -1)*cf233.s1.r279$y)/2)
     let t3880 = n33 - cf233.s1.r279$x.new_min.s
     let t3882 = (n33*2) + cf233.s1.r279$y
     let t3883 = cf233.s1.r279$y + n33
     for (cf233.s1.r279$x.rebased, 0, t3880) {
      let t3351.s = min(cf233.s1.r279$x.rebased + t3881, t3876 + -1)
      let t3513 = cf233.s1.r279$x.new_min.s + cf233.s1.r279$x.rebased
      let t3514 = max(t3351.s, 0)
      cf233[t3513] = cf233[t3513] + (d3$0[(ind33[t3883]*nabf3) + (ind33[cf233.s1.r279$y] + (ind33[t3882]*t3878))]*coeff33[if_then_else(t3876 < (t3514 + 1), return_second(halide_print((char *)stringify(t3514, " error!\n")), t3514), t3514) + ((max(min(ti[t3879], nelements), 1) + -1)*coeff33.stride.1)])
     }
    }
   }
  }
 }
 let cu4.ne.extent_realized = let t4211 = (nelements == 1) in (let t4212 = max(nelements, 1) in (max(select(t4211, 0, t4212 + -1), max(select(t4211, 0, nelements + -1), t4212 + -1)) + 1))
 allocate cu4[float64 * cu4.ne.extent_realized * (k4 + 1) * nrbf4]
 produce cu4 {
  let t3884 = max(nelements, 1)
  let t3885 = (k4 + 1)*cu4.ne.extent_realized
  for (cu4.s0.rbf, 0, nrbf4) {
   let t3886 = cu4.s0.rbf*t3885
   for (cu4.s0.kv, 0, k4) {
    let t3887 = (cu4.ne.extent_realized*cu4.s0.kv) + t3886
    for (cu4.s0.ne, 0, t3884) {
     cu4[cu4.s0.ne + t3887] = 0.000000
    }
   }
  }
  consume sumU {
   if (nelements == 1) {
    let t3888 = max(q4/3, 0)
    let t3894 = (k4 + 1)*cu4.ne.extent_realized
    let t3892 = sumU.k.extent_realized*sumU.n.extent_realized
    let t3889 = ((2 - pb4.min.1)*pb4.stride.1) - pb4.min.0
    let t3890 = ((1 - pb4.min.1)*pb4.stride.1) - pb4.min.0
    let t3891 = (pb4.min.1*pb4.stride.1) + pb4.min.0
    let t3893 = ((coeff4.min.1*coeff4.stride.1) + ((coeff4.min.3*coeff4.stride.3) + (coeff4.min.2*coeff4.stride.2))) + coeff4.min.0
    for (cu4.s1.rbf, 0, nrbf4) {
     let t3895 = cu4.s1.rbf*t3894
     for (cu4.s1.r312$5, 0, nrbf4) {
      let t3896 = cu4.s1.r312$5*t3892
      let t3897 = (coeff4.stride.1*cu4.s1.r312$5) - t3893
      for (cu4.s1.r312$4, 0, nabf4) {
       let cu4.s1.r312$w.r312$w.new_min.s = min(pa4[cu4.s1.r312$4 - pa4.min.0]/3, t3888)
       let cu4.s1.r312$w.r312$w.new_max.s = max(min((pa4[(cu4.s1.r312$4 - pa4.min.0) + 1] + 2)/3, t3888), cu4.s1.r312$w.r312$w.new_min.s)
       let t3902 = max(cu4.s1.r312$w.r312$w.new_min.s, 0)
       let t3898 = max(cu4.s1.r312$w.r312$w.new_max.s, 0) - t3902
       let t3899 = cu4.s1.r312$4 - pa4.min.0
       let t3901 = cu4.s1.r312$4 + t3897
       for (cu4.s1.r312$w.r312$w.rebased, 0, t3898) {
        if (let t4213 = (cu4.s1.r312$w.r312$w.rebased + t3902) in ((pa4[t3899] <= (t4213*3)) && ((t4213*3) < pa4[t3899 + 1]))) {
         let t1812 = pb4[((cu4.s1.r312$w.r312$w.rebased + t3902)*3) + t3889]
         let t1813 = pb4[((cu4.s1.r312$w.r312$w.rebased + t3902)*3) + t3890]
         let t1814 = pb4[((cu4.s1.r312$w.r312$w.rebased + t3902)*3) - t3891]
         let t1815.s = pc4[((cu4.s1.r312$w.r312$w.rebased + t3902)*3) - pc4.min.0]
         let t1816 = sumU[(sumU.n.extent_realized*t1814) + t3896]*float64(t1815.s)
         let t1817 = sumU[(sumU.n.extent_realized*t1813) + t3896]
         let t1818 = coeff4[t3901]
         let t1819.s = sumU[(sumU.n.extent_realized*t1812) + t3896]
         cu4[(cu4.ne.extent_realized*t1812) + t3895] = (t1816*t1817)*t1818
         cu4[(cu4.ne.extent_realized*t1813) + t3895] = (t1818*t1819.s)*t1816
         cu4[(cu4.ne.extent_realized*t1814) + t3895] = (t1818*t1819.s)*(t1817*float64(t1815.s))
        }
        if (let t4214 = (cu4.s1.r312$w.r312$w.rebased + t3902) in (((pa4[t3899] + -1) <= (t4214*3)) && ((t4214*3) < (pa4[t3899 + 1] + -1)))) {
         let t1812 = pb4[(((cu4.s1.r312$w.r312$w.rebased + t3902)*3) + t3889) + 1]
         let t1813 = pb4[(((cu4.s1.r312$w.r312$w.rebased + t3902)*3) + t3890) + 1]
         let t1814 = pb4[(((cu4.s1.r312$w.r312$w.rebased + t3902)*3) - t3891) + 1]
         let t1815.s = pc4[(((cu4.s1.r312$w.r312$w.rebased + t3902)*3) - pc4.min.0) + 1]
         let t1816 = sumU[(sumU.n.extent_realized*t1814) + t3896]*float64(t1815.s)
         let t1817 = sumU[(sumU.n.extent_realized*t1813) + t3896]
         let t1818 = coeff4[t3901]
         let t1819.s = sumU[(sumU.n.extent_realized*t1812) + t3896]
         cu4[(cu4.ne.extent_realized*t1812) + t3895] = (t1816*t1817)*t1818
         cu4[(cu4.ne.extent_realized*t1813) + t3895] = (t1818*t1819.s)*t1816
         cu4[(cu4.ne.extent_realized*t1814) + t3895] = (t1818*t1819.s)*(t1817*float64(t1815.s))
        }
        if (let t4215 = (cu4.s1.r312$w.r312$w.rebased + t3902) in (((pa4[t3899] + -2) <= (t4215*3)) && ((t4215*3) < (pa4[t3899 + 1] + -2)))) {
         let t1812 = pb4[(((cu4.s1.r312$w.r312$w.rebased + t3902)*3) + t3889) + 2]
         let t1813 = pb4[(((cu4.s1.r312$w.r312$w.rebased + t3902)*3) + t3890) + 2]
         let t1814 = pb4[(((cu4.s1.r312$w.r312$w.rebased + t3902)*3) - t3891) + 2]
         let t1815.s = pc4[(((cu4.s1.r312$w.r312$w.rebased + t3902)*3) - pc4.min.0) + 2]
         let t1816 = sumU[(sumU.n.extent_realized*t1814) + t3896]*float64(t1815.s)
         let t1817 = sumU[(sumU.n.extent_realized*t1813) + t3896]
         let t1818 = coeff4[t3901]
         let t1819.s = sumU[(sumU.n.extent_realized*t1812) + t3896]
         cu4[(cu4.ne.extent_realized*t1812) + t3895] = (t1816*t1817)*t1818
         cu4[(cu4.ne.extent_realized*t1813) + t3895] = (t1818*t1819.s)*t1816
         cu4[(cu4.ne.extent_realized*t1814) + t3895] = (t1818*t1819.s)*(t1817*float64(t1815.s))
        }
       }
       let cu4.s1.r312_w.r312_w.new_min$1.s.s = max(min(pa4[cu4.s1.r312$4 - pa4.min.0], q4 + 2), q4)
       let cu4.s1.r312_w.r312_w.new_max$1.s = let t4216 = pa4[(cu4.s1.r312$4 - pa4.min.0) + 1] in (max(min(max(min(max(min(q4, t4216), t4216 + 1), q4 + 1), t4216 + 2), q4 + 2), cu4.s1.r312_w.r312_w.new_min$1.s.s)/3)
       let t3907 = max(cu4.s1.r312_w.r312_w.new_min$1.s.s/3, 0)
       let t3903 = max(cu4.s1.r312_w.r312_w.new_max$1.s, 0) - t3907
       let t3905 = cu4.s1.r312$4 - pa4.min.0
       let t3906 = cu4.s1.r312$4 + t3897
       for (cu4.s1.r312$w.r312$w.rebased, 0, t3903) {
        if ((((cu4.s1.r312$w.r312$w.rebased + t3907)*3) + 1) <= q4) {
         if (let t4217 = (cu4.s1.r312$w.r312$w.rebased + t3907) in ((pa4[t3905] <= (t4217*3)) && ((t4217*3) < pa4[t3905 + 1]))) {
          let t1812 = pb4[((cu4.s1.r312$w.r312$w.rebased + t3907)*3) + t3889]
          let t1813 = pb4[((cu4.s1.r312$w.r312$w.rebased + t3907)*3) + t3890]
          let t1814 = pb4[((cu4.s1.r312$w.r312$w.rebased + t3907)*3) - t3891]
          let t1815.s = pc4[((cu4.s1.r312$w.r312$w.rebased + t3907)*3) - pc4.min.0]
          let t1816 = sumU[(sumU.n.extent_realized*t1814) + t3896]*float64(t1815.s)
          let t1817 = sumU[(sumU.n.extent_realized*t1813) + t3896]
          let t1818 = coeff4[t3906]
          let t1819.s = sumU[(sumU.n.extent_realized*t1812) + t3896]
          cu4[(cu4.ne.extent_realized*t1812) + t3895] = (t1816*t1817)*t1818
          cu4[(cu4.ne.extent_realized*t1813) + t3895] = (t1818*t1819.s)*t1816
          cu4[(cu4.ne.extent_realized*t1814) + t3895] = (t1818*t1819.s)*(t1817*float64(t1815.s))
         }
         if ((((cu4.s1.r312$w.r312$w.rebased + t3907)*3) + 2) <= q4) {
          if (let t4218 = (cu4.s1.r312$w.r312$w.rebased + t3907) in (((pa4[t3905] + -1) <= (t4218*3)) && ((t4218*3) < (pa4[t3905 + 1] + -1)))) {
           let t1812 = pb4[(((cu4.s1.r312$w.r312$w.rebased + t3907)*3) + t3889) + 1]
           let t1813 = pb4[(((cu4.s1.r312$w.r312$w.rebased + t3907)*3) + t3890) + 1]
           let t1814 = pb4[(((cu4.s1.r312$w.r312$w.rebased + t3907)*3) - t3891) + 1]
           let t1815.s = pc4[(((cu4.s1.r312$w.r312$w.rebased + t3907)*3) - pc4.min.0) + 1]
           let t1816 = sumU[(sumU.n.extent_realized*t1814) + t3896]*float64(t1815.s)
           let t1817 = sumU[(sumU.n.extent_realized*t1813) + t3896]
           let t1818 = coeff4[t3906]
           let t1819.s = sumU[(sumU.n.extent_realized*t1812) + t3896]
           cu4[(cu4.ne.extent_realized*t1812) + t3895] = (t1816*t1817)*t1818
           cu4[(cu4.ne.extent_realized*t1813) + t3895] = (t1818*t1819.s)*t1816
           cu4[(cu4.ne.extent_realized*t1814) + t3895] = (t1818*t1819.s)*(t1817*float64(t1815.s))
          }
          if (let t4219 = (cu4.s1.r312$w.r312$w.rebased + t3907) in ((((pa4[t3905] + -2) <= (t4219*3)) && ((t4219*3) < (pa4[t3905 + 1] + -2))) && (((t4219*3) + 3) <= q4))) {
           let t1812 = pb4[(((cu4.s1.r312$w.r312$w.rebased + t3907)*3) + t3889) + 2]
           let t1813 = pb4[(((cu4.s1.r312$w.r312$w.rebased + t3907)*3) + t3890) + 2]
           let t1814 = pb4[(((cu4.s1.r312$w.r312$w.rebased + t3907)*3) - t3891) + 2]
           let t1815.s = pc4[(((cu4.s1.r312$w.r312$w.rebased + t3907)*3) - pc4.min.0) + 2]
           let t1816 = sumU[(sumU.n.extent_realized*t1814) + t3896]*float64(t1815.s)
           let t1817 = sumU[(sumU.n.extent_realized*t1813) + t3896]
           let t1818 = coeff4[t3906]
           let t1819.s = sumU[(sumU.n.extent_realized*t1812) + t3896]
           cu4[(cu4.ne.extent_realized*t1812) + t3895] = (t1816*t1817)*t1818
           cu4[(cu4.ne.extent_realized*t1813) + t3895] = (t1818*t1819.s)*t1816
           cu4[(cu4.ne.extent_realized*t1814) + t3895] = (t1818*t1819.s)*(t1817*float64(t1815.s))
          }
         }
        }
       }
      }
     }
    }
   } else {
    let t3908 = max(q4/3, 0)
    let t3917 = (k4 + 1)*cu4.ne.extent_realized
    let t3912 = sumU.k.extent_realized*sumU.n.extent_realized
    let t3914 = coeff4.min.3*coeff4.stride.3
    let t3915 = coeff4.min.2*coeff4.stride.2
    let t3916 = coeff4.min.1*coeff4.stride.1
    let t3909 = ((2 - pb4.min.1)*pb4.stride.1) - pb4.min.0
    let t3910 = ((1 - pb4.min.1)*pb4.stride.1) - pb4.min.0
    let t3913 = 0 - ti.min.0
    let t3911 = (pb4.min.1*pb4.stride.1) + pb4.min.0
    for (cu4.s1.rbf, 0, nrbf4) {
     let t3918 = cu4.s1.rbf*t3917
     for (cu4.s1.r312$5, 0, nrbf4) {
      let t3919 = cu4.s1.r312$5*t3912
      let t3920 = coeff4.stride.1*cu4.s1.r312$5
      for (cu4.s1.r312$4, 0, nabf4) {
       let cu4.s1.r312_w.r312_w.new_min$2.s = min(pa4[cu4.s1.r312$4 - pa4.min.0]/3, t3908)
       let cu4.s1.r312_w.r312_w.new_max$2.s = max(min((pa4[(cu4.s1.r312$4 - pa4.min.0) + 1] + 2)/3, t3908), cu4.s1.r312_w.r312_w.new_min$2.s)
       let t3924 = max(cu4.s1.r312_w.r312_w.new_min$2.s, 0)
       let t3921 = max(cu4.s1.r312_w.r312_w.new_max$2.s, 0) - t3924
       let t3922 = cu4.s1.r312$4 - pa4.min.0
       for (cu4.s1.r312$w.r312$w.rebased, 0, t3921) {
        if (let t4220 = (cu4.s1.r312$w.r312$w.rebased + t3924) in ((pa4[t3922] <= (t4220*3)) && ((t4220*3) < pa4[t3922 + 1]))) {
         let t3929 = (cu4.s1.r312$w.r312$w.rebased + t3924)*3
         let t3927 = t3929 - t3911
         let t3928 = t3929 - pc4.min.0
         let t3926 = t3910 + t3929
         let t3925 = t3909 + t3929
         for (cu4.s1.r312$z, 0, nelements) {
          for (cu4.s1.r312$y.rebased, 0, nelements - cu4.s1.r312$z) {
           let t3931 = (nelements - cu4.s1.r312$z) - cu4.s1.r312$y.rebased
           for (cu4.s1.r312$x.rebased, 0, t3931) {
            let t1832 = pb4[t3925]
            let t1833 = pb4[t3926]
            let t1834 = pb4[t3927]
            let t1835.s = pc4[t3928]
            let t1836 = sumU[((((sumU.n.extent_realized*t1834) + t3919) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased) + cu4.s1.r312$x.rebased]*float64(t1835.s)
            let t1837 = sumU[(((sumU.n.extent_realized*t1833) + t3919) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased]
            let t1838 = let t4221 = (cu4.s1.r312$y.rebased + cu4.s1.r312$z) in (let t4222 = (t4221 + cu4.s1.r312$x.rebased) in coeff4[((((((t4222 + 1)*t4222)*(t4222 + 2))/6) + ((((t4221 + 1)*t4221)/2) + cu4.s1.r312$z))*coeff4.stride.2) + ((((((((max(min(ti[t3913], nelements), 1)*coeff4.stride.3) - t3914) - t3915) - t3916) - coeff4.min.0) - coeff4.stride.3) + t3920) + cu4.s1.r312$4)])
            let t1839.s = sumU[((sumU.n.extent_realized*t1832) + t3919) + cu4.s1.r312$z]
            cu4[((cu4.ne.extent_realized*t1832) + t3918) + cu4.s1.r312$z] = (t1836*t1837)*t1838
            cu4[(((cu4.ne.extent_realized*t1833) + t3918) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased] = (t1838*t1839.s)*t1836
            cu4[((((cu4.ne.extent_realized*t1834) + t3918) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased) + cu4.s1.r312$x.rebased] = (t1838*t1839.s)*(t1837*float64(t1835.s))
           }
          }
         }
        }
        if (let t4223 = (cu4.s1.r312$w.r312$w.rebased + t3924) in (((pa4[t3922] + -1) <= (t4223*3)) && ((t4223*3) < (pa4[t3922 + 1] + -1)))) {
         let t3937 = (cu4.s1.r312$w.r312$w.rebased + t3924)*3
         let t3935 = t3937 - t3911
         let t3936 = t3937 - pc4.min.0
         let t3934 = t3910 + t3937
         let t3933 = t3909 + t3937
         for (cu4.s1.r312$z, 0, nelements) {
          for (cu4.s1.r312$y.rebased, 0, nelements - cu4.s1.r312$z) {
           let t3939 = (nelements - cu4.s1.r312$z) - cu4.s1.r312$y.rebased
           for (cu4.s1.r312$x.rebased, 0, t3939) {
            let t1832 = pb4[t3933 + 1]
            let t1833 = pb4[t3934 + 1]
            let t1834 = pb4[t3935 + 1]
            let t1835.s = pc4[t3936 + 1]
            let t1836 = sumU[((((sumU.n.extent_realized*t1834) + t3919) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased) + cu4.s1.r312$x.rebased]*float64(t1835.s)
            let t1837 = sumU[(((sumU.n.extent_realized*t1833) + t3919) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased]
            let t1838 = let t4224 = (cu4.s1.r312$y.rebased + cu4.s1.r312$z) in (let t4225 = (t4224 + cu4.s1.r312$x.rebased) in coeff4[((((((t4225 + 1)*t4225)*(t4225 + 2))/6) + ((((t4224 + 1)*t4224)/2) + cu4.s1.r312$z))*coeff4.stride.2) + ((((((((max(min(ti[t3913], nelements), 1)*coeff4.stride.3) - t3914) - t3915) - t3916) - coeff4.min.0) - coeff4.stride.3) + t3920) + cu4.s1.r312$4)])
            let t1839.s = sumU[((sumU.n.extent_realized*t1832) + t3919) + cu4.s1.r312$z]
            cu4[((cu4.ne.extent_realized*t1832) + t3918) + cu4.s1.r312$z] = (t1836*t1837)*t1838
            cu4[(((cu4.ne.extent_realized*t1833) + t3918) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased] = (t1838*t1839.s)*t1836
            cu4[((((cu4.ne.extent_realized*t1834) + t3918) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased) + cu4.s1.r312$x.rebased] = (t1838*t1839.s)*(t1837*float64(t1835.s))
           }
          }
         }
        }
        if (let t4226 = (cu4.s1.r312$w.r312$w.rebased + t3924) in (((pa4[t3922] + -2) <= (t4226*3)) && ((t4226*3) < (pa4[t3922 + 1] + -2)))) {
         let t3945 = (cu4.s1.r312$w.r312$w.rebased + t3924)*3
         let t3943 = t3945 - t3911
         let t3944 = t3945 - pc4.min.0
         let t3942 = t3910 + t3945
         let t3941 = t3909 + t3945
         for (cu4.s1.r312$z, 0, nelements) {
          for (cu4.s1.r312$y.rebased, 0, nelements - cu4.s1.r312$z) {
           let t3947 = (nelements - cu4.s1.r312$z) - cu4.s1.r312$y.rebased
           for (cu4.s1.r312$x.rebased, 0, t3947) {
            let t1832 = pb4[t3941 + 2]
            let t1833 = pb4[t3942 + 2]
            let t1834 = pb4[t3943 + 2]
            let t1835.s = pc4[t3944 + 2]
            let t1836 = sumU[((((sumU.n.extent_realized*t1834) + t3919) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased) + cu4.s1.r312$x.rebased]*float64(t1835.s)
            let t1837 = sumU[(((sumU.n.extent_realized*t1833) + t3919) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased]
            let t1838 = let t4227 = (cu4.s1.r312$y.rebased + cu4.s1.r312$z) in (let t4228 = (t4227 + cu4.s1.r312$x.rebased) in coeff4[((((((t4228 + 1)*t4228)*(t4228 + 2))/6) + ((((t4227 + 1)*t4227)/2) + cu4.s1.r312$z))*coeff4.stride.2) + ((((((((max(min(ti[t3913], nelements), 1)*coeff4.stride.3) - t3914) - t3915) - t3916) - coeff4.min.0) - coeff4.stride.3) + t3920) + cu4.s1.r312$4)])
            let t1839.s = sumU[((sumU.n.extent_realized*t1832) + t3919) + cu4.s1.r312$z]
            cu4[((cu4.ne.extent_realized*t1832) + t3918) + cu4.s1.r312$z] = (t1836*t1837)*t1838
            cu4[(((cu4.ne.extent_realized*t1833) + t3918) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased] = (t1838*t1839.s)*t1836
            cu4[((((cu4.ne.extent_realized*t1834) + t3918) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased) + cu4.s1.r312$x.rebased] = (t1838*t1839.s)*(t1837*float64(t1835.s))
           }
          }
         }
        }
       }
       let cu4.s1.r312_w.r312_w.new_min$3.s.s = max(min(pa4[cu4.s1.r312$4 - pa4.min.0], q4 + 2), q4)
       let cu4.s1.r312_w.r312_w.new_max$3.s = let t4229 = pa4[(cu4.s1.r312$4 - pa4.min.0) + 1] in (max(min(max(min(max(min(q4, t4229), t4229 + 1), q4 + 1), t4229 + 2), q4 + 2), cu4.s1.r312_w.r312_w.new_min$3.s.s)/3)
       let t3952 = max(cu4.s1.r312_w.r312_w.new_min$3.s.s/3, 0)
       let t3949 = max(cu4.s1.r312_w.r312_w.new_max$3.s, 0) - t3952
       let t3951 = cu4.s1.r312$4 - pa4.min.0
       for (cu4.s1.r312$w.r312$w.rebased, 0, t3949) {
        if ((((cu4.s1.r312$w.r312$w.rebased + t3952)*3) + 1) <= q4) {
         if (let t4230 = (cu4.s1.r312$w.r312$w.rebased + t3952) in ((pa4[t3951] <= (t4230*3)) && ((t4230*3) < pa4[t3951 + 1]))) {
          let t3957 = (cu4.s1.r312$w.r312$w.rebased + t3952)*3
          let t3955 = t3957 - t3911
          let t3956 = t3957 - pc4.min.0
          let t3954 = t3910 + t3957
          let t3953 = t3909 + t3957
          for (cu4.s1.r312$z, 0, nelements) {
           for (cu4.s1.r312$y.rebased, 0, nelements - cu4.s1.r312$z) {
            let t3959 = (nelements - cu4.s1.r312$z) - cu4.s1.r312$y.rebased
            for (cu4.s1.r312$x.rebased, 0, t3959) {
             let t1832 = pb4[t3953]
             let t1833 = pb4[t3954]
             let t1834 = pb4[t3955]
             let t1835.s = pc4[t3956]
             let t1836 = sumU[((((sumU.n.extent_realized*t1834) + t3919) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased) + cu4.s1.r312$x.rebased]*float64(t1835.s)
             let t1837 = sumU[(((sumU.n.extent_realized*t1833) + t3919) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased]
             let t1838 = let t4231 = (cu4.s1.r312$y.rebased + cu4.s1.r312$z) in (let t4232 = (t4231 + cu4.s1.r312$x.rebased) in coeff4[((((((t4232 + 1)*t4232)*(t4232 + 2))/6) + ((((t4231 + 1)*t4231)/2) + cu4.s1.r312$z))*coeff4.stride.2) + ((((((((max(min(ti[t3913], nelements), 1)*coeff4.stride.3) - t3914) - t3915) - t3916) - coeff4.min.0) - coeff4.stride.3) + t3920) + cu4.s1.r312$4)])
             let t1839.s = sumU[((sumU.n.extent_realized*t1832) + t3919) + cu4.s1.r312$z]
             cu4[((cu4.ne.extent_realized*t1832) + t3918) + cu4.s1.r312$z] = (t1836*t1837)*t1838
             cu4[(((cu4.ne.extent_realized*t1833) + t3918) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased] = (t1838*t1839.s)*t1836
             cu4[((((cu4.ne.extent_realized*t1834) + t3918) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased) + cu4.s1.r312$x.rebased] = (t1838*t1839.s)*(t1837*float64(t1835.s))
            }
           }
          }
         }
         if ((((cu4.s1.r312$w.r312$w.rebased + t3952)*3) + 2) <= q4) {
          if (let t4233 = (cu4.s1.r312$w.r312$w.rebased + t3952) in (((pa4[t3951] + -1) <= (t4233*3)) && ((t4233*3) < (pa4[t3951 + 1] + -1)))) {
           let t3965 = (cu4.s1.r312$w.r312$w.rebased + t3952)*3
           let t3963 = t3965 - t3911
           let t3964 = t3965 - pc4.min.0
           let t3962 = t3910 + t3965
           let t3961 = t3909 + t3965
           for (cu4.s1.r312$z, 0, nelements) {
            for (cu4.s1.r312$y.rebased, 0, nelements - cu4.s1.r312$z) {
             let t3967 = (nelements - cu4.s1.r312$z) - cu4.s1.r312$y.rebased
             for (cu4.s1.r312$x.rebased, 0, t3967) {
              let t1832 = pb4[t3961 + 1]
              let t1833 = pb4[t3962 + 1]
              let t1834 = pb4[t3963 + 1]
              let t1835.s = pc4[t3964 + 1]
              let t1836 = sumU[((((sumU.n.extent_realized*t1834) + t3919) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased) + cu4.s1.r312$x.rebased]*float64(t1835.s)
              let t1837 = sumU[(((sumU.n.extent_realized*t1833) + t3919) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased]
              let t1838 = let t4234 = (cu4.s1.r312$y.rebased + cu4.s1.r312$z) in (let t4235 = (t4234 + cu4.s1.r312$x.rebased) in coeff4[((((((t4235 + 1)*t4235)*(t4235 + 2))/6) + ((((t4234 + 1)*t4234)/2) + cu4.s1.r312$z))*coeff4.stride.2) + ((((((((max(min(ti[t3913], nelements), 1)*coeff4.stride.3) - t3914) - t3915) - t3916) - coeff4.min.0) - coeff4.stride.3) + t3920) + cu4.s1.r312$4)])
              let t1839.s = sumU[((sumU.n.extent_realized*t1832) + t3919) + cu4.s1.r312$z]
              cu4[((cu4.ne.extent_realized*t1832) + t3918) + cu4.s1.r312$z] = (t1836*t1837)*t1838
              cu4[(((cu4.ne.extent_realized*t1833) + t3918) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased] = (t1838*t1839.s)*t1836
              cu4[((((cu4.ne.extent_realized*t1834) + t3918) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased) + cu4.s1.r312$x.rebased] = (t1838*t1839.s)*(t1837*float64(t1835.s))
             }
            }
           }
          }
          if (let t4236 = (cu4.s1.r312$w.r312$w.rebased + t3952) in ((((pa4[t3951] + -2) <= (t4236*3)) && ((t4236*3) < (pa4[t3951 + 1] + -2))) && (((t4236*3) + 3) <= q4))) {
           let t3973 = (cu4.s1.r312$w.r312$w.rebased + t3952)*3
           let t3971 = t3973 - t3911
           let t3972 = t3973 - pc4.min.0
           let t3970 = t3910 + t3973
           let t3969 = t3909 + t3973
           for (cu4.s1.r312$z, 0, nelements) {
            for (cu4.s1.r312$y.rebased, 0, nelements - cu4.s1.r312$z) {
             let t3975 = (nelements - cu4.s1.r312$z) - cu4.s1.r312$y.rebased
             for (cu4.s1.r312$x.rebased, 0, t3975) {
              let t1832 = pb4[t3969 + 2]
              let t1833 = pb4[t3970 + 2]
              let t1834 = pb4[t3971 + 2]
              let t1835.s = pc4[t3972 + 2]
              let t1836 = sumU[((((sumU.n.extent_realized*t1834) + t3919) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased) + cu4.s1.r312$x.rebased]*float64(t1835.s)
              let t1837 = sumU[(((sumU.n.extent_realized*t1833) + t3919) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased]
              let t1838 = let t4237 = (cu4.s1.r312$y.rebased + cu4.s1.r312$z) in (let t4238 = (t4237 + cu4.s1.r312$x.rebased) in coeff4[((((((t4238 + 1)*t4238)*(t4238 + 2))/6) + ((((t4237 + 1)*t4237)/2) + cu4.s1.r312$z))*coeff4.stride.2) + ((((((((max(min(ti[t3913], nelements), 1)*coeff4.stride.3) - t3914) - t3915) - t3916) - coeff4.min.0) - coeff4.stride.3) + t3920) + cu4.s1.r312$4)])
              let t1839.s = sumU[((sumU.n.extent_realized*t1832) + t3919) + cu4.s1.r312$z]
              cu4[((cu4.ne.extent_realized*t1832) + t3918) + cu4.s1.r312$z] = (t1836*t1837)*t1838
              cu4[(((cu4.ne.extent_realized*t1833) + t3918) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased] = (t1838*t1839.s)*t1836
              cu4[((((cu4.ne.extent_realized*t1834) + t3918) + cu4.s1.r312$z) + cu4.s1.r312$y.rebased) + cu4.s1.r312$x.rebased] = (t1838*t1839.s)*(t1837*float64(t1835.s))
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 let dd3.kme.extent_realized = let t4239 = max(((nelements + 1)*nelements)/2, 1) in max(select(nelements == 1, 1, t4239), t4239)
 allocate dd3[float64 * 3 * npairs * nabf3 * nrbf3 * dd3.kme.extent_realized]
 produce dd3 {
  let t3977 = max(((nelements + 1)*nelements)/2, 1)
  for (dd3.s0.kme, 0, t3977) {
   let t3981 = nabf3*npairs
   let t3979 = ((nrbf3*t3981)*dd3.s0.kme)*3
   for (dd3.s0.rbfThree, 0, nrbf3) {
    let t3982 = ((dd3.s0.rbfThree*t3981)*3) + t3979
    for (dd3.s0.abfThree, 0, nabf3) {
     let t3983 = ((dd3.s0.abfThree*npairs)*3) + t3982
     for (dd3.s0.nj, 0, npairs) {
      let t3984 = (dd3.s0.nj*3) + t3983
      for (dd3.s0.dim, 0, 3) {
       dd3[dd3.s0.dim + t3984] = 0.000000
      }
     }
    }
   }
  }
  consume sumU {
   consume U {
    if (nelements == 1) {
     let t3986 = sumU.k.extent_realized*sumU.n.extent_realized
     let t3987 = U.k.extent_realized*npairs
     for (dd3.s1.rbfThree, 0, nrbf3) {
      let t3988 = (nabf3*npairs)*dd3.s1.rbfThree
      let t3990 = dd3.s1.rbfThree*t3987
      let t3989 = dd3.s1.rbfThree*t3986
      for (dd3.s1.r210$y, 0, nabf3) {
       let dd3.s1.r210$x.new_min.s = min(pn3[dd3.s1.r210$y - pn3.min.0], k3)
       let dd3.s1.r210$x.new_max.s = max(min(pn3[(dd3.s1.r210$y - pn3.min.0) + 1], k3), dd3.s1.r210$x.new_min.s)
       let t3994 = max(dd3.s1.r210$x.new_min.s, 0)
       let t3991 = max(dd3.s1.r210$x.new_max.s, 0) - t3994
       let t3992 = (dd3.s1.r210$y*npairs) + t3988
       for (dd3.s1.r210$x.rebased, 0, t3991) {
        let t3998 = dd3.s1.r210$x.rebased + t3994
        let t3995 = (sumU.n.extent_realized*t3998) + t3989
        let t3997 = (npairs*t3998) + t3990
        let t3996 = (t3994 - pc3.min.0) + dd3.s1.r210$x.rebased
        for (dd3.s1.r210$w, 0, npairs) {
         let t3427 = dd3.s1.r210$w + t3992
         let t3373 = sumU[t3995]*float64(pc3[t3996])
         dd3[t3427*3] = dd3[t3427*3] + (U[(dd3.s1.r210$w + t3997)*4]*select(tj[dd3.s1.r210$w - tj.min.0] == 1, t3373*2.000000, t3373))
         let t3375 = sumU[t3995]*float64(pc3[t3996])
         dd3[(t3427*3) + 1] = dd3[(t3427*3) + 1] + (U[((dd3.s1.r210$w + t3997)*4) + 1]*select(tj[dd3.s1.r210$w - tj.min.0] == 1, t3375*2.000000, t3375))
         let t3377 = sumU[t3995]*float64(pc3[t3996])
         dd3[(t3427*3) + 2] = dd3[(t3427*3) + 2] + (U[((dd3.s1.r210$w + t3997)*4) + 2]*select(tj[dd3.s1.r210$w - tj.min.0] == 1, t3377*2.000000, t3377))
        }
       }
      }
     }
    } else {
     let t4005 = nabf3*npairs
     let t4002 = ((nelements + 1)*nelements)/2
     let t4000 = sumU.k.extent_realized*sumU.n.extent_realized
     let t4004 = U.k.extent_realized*npairs
     let t4001 = (elemindex.min.1*elemindex.stride.1) + elemindex.min.0
     for (dd3.s1.rbfThree, 0, nrbf3) {
      let t4008 = nrbf3*t4005
      let t4006 = dd3.s1.rbfThree*t4005
      let t4009 = dd3.s1.rbfThree*t4004
      let t4007 = dd3.s1.rbfThree*t4000
      for (dd3.s1.r210$y, 0, nabf3) {
       let dd3.s1.r210_x.new_min$1.s = min(pn3[dd3.s1.r210$y - pn3.min.0], k3)
       let dd3.s1.r210_x.new_max$1.s = max(min(pn3[(dd3.s1.r210$y - pn3.min.0) + 1], k3), dd3.s1.r210_x.new_min$1.s)
       let t4013 = max(dd3.s1.r210_x.new_min$1.s, 0)
       let t4010 = max(dd3.s1.r210_x.new_max$1.s, 0) - t4013
       let t4011 = (dd3.s1.r210$y*npairs) + t4006
       for (dd3.s1.r210$x.rebased, 0, t4010) {
        let t4017 = dd3.s1.r210$x.rebased + t4013
        let t4014 = (sumU.n.extent_realized*t4017) + t4007
        let t4016 = (npairs*t4017) + t4009
        let t4015 = (t4013 - pc3.min.0) + dd3.s1.r210$x.rebased
        for (dd3.s1.r210$z, 0, nelements) {
         let t4019 = (dd3.s1.r210$z*elemindex.stride.1) - t4001
         let t4018 = dd3.s1.r210$z + t4014
         for (dd3.s1.r210$w, 0, npairs) {
          let t3431 = tj[dd3.s1.r210$w - tj.min.0]
          let t3430 = dd3.s1.r210$w + t4011
          let t3385 = sumU[t4018]*float64(pc3[t4015])
          let t3561 = (max(min(elemindex[(max(min(nelements, t3431), 1) + t4019) + -1], t4002 + -1), 0)*t4008) + t3430
          dd3[t3561*3] = dd3[t3561*3] + (U[(dd3.s1.r210$w + t4016)*4]*select(dd3.s1.r210$z == (t3431 + -1), t3385*2.000000, t3385))
          let t3393 = sumU[t4018]*float64(pc3[t4015])
          let t3563 = (max(min(elemindex[(max(min(nelements, t3431), 1) + t4019) + -1], t4002 + -1), 0)*t4008) + t3430
          dd3[(t3563*3) + 1] = dd3[(t3563*3) + 1] + (U[((dd3.s1.r210$w + t4016)*4) + 1]*select(dd3.s1.r210$z == (t3431 + -1), t3393*2.000000, t3393))
          let t3401 = sumU[t4018]*float64(pc3[t4015])
          let t3565 = (max(min(elemindex[(max(min(nelements, t3431), 1) + t4019) + -1], t4002 + -1), 0)*t4008) + t3430
          dd3[(t3565*3) + 2] = dd3[(t3565*3) + 2] + (U[((dd3.s1.r210$w + t4016)*4) + 2]*select(dd3.s1.r210$z == (t3431 + -1), t3401*2.000000, t3401))
         }
        }
       }
      }
     }
    }
   }
  }
 }
 allocate fij[float64 * npairs * 3]
 produce fij {
  for (fij.s0.n, 0, npairs) {
   let t4020 = fij.s0.n*3
   for (fij.s0.dim, 0, 3) {
    fij[fij.s0.dim + t4020] = 0.000000
   }
  }
  consume rbf$1 {
   let t4023 = npairs*rbf$1.i.extent_realized
   let t4021 = (nrbf2*-1) - coeff2.stride.2
   let t4022 = 0 - ti.min.0
   for (fij.s1.r115$y, 0, nrbf2) {
    let t4027 = fij.s1.r115$y*npairs
    let t4026 = (t4023*3) + t4027
    let t4025 = (t4023*2) + t4027
    let t4024 = t4023 + t4027
    for (fij.s1.r115$x, 0, npairs) {
     fij[fij.s1.r115$x*3] = fij[fij.s1.r115$x*3] + (coeff2[(max(min(tj[fij.s1.r115$x - tj.min.0], npairs + -1), 1)*nrbf2) + (((max(min(ti[t4022], nelements), 1)*coeff2.stride.2) + t4021) + fij.s1.r115$y)]*rbf$1[fij.s1.r115$x + t4024])
     fij[(fij.s1.r115$x*3) + 1] = fij[(fij.s1.r115$x*3) + 1] + (coeff2[(max(min(tj[fij.s1.r115$x - tj.min.0], npairs + -1), 1)*nrbf2) + (((max(min(ti[t4022], nelements), 1)*coeff2.stride.2) + t4021) + fij.s1.r115$y)]*rbf$1[fij.s1.r115$x + t4025])
     fij[(fij.s1.r115$x*3) + 2] = fij[(fij.s1.r115$x*3) + 2] + (coeff2[(max(min(tj[fij.s1.r115$x - tj.min.0], npairs + -1), 1)*nrbf2) + (((max(min(ti[t4022], nelements), 1)*coeff2.stride.2) + t4021) + fij.s1.r115$y)]*rbf$1[fij.s1.r115$x + t4026])
    }
   }
  }
  consume cU {
   consume U {
    if (nelements == 1) {
     let t4029 = U.k.extent_realized*npairs
     for (fij.s2.r239$x, 0, nrbf3) {
      let t4030 = (cU.ne.extent_realized*k3)*fij.s2.r239$x
      let t4031 = fij.s2.r239$x*t4029
      for (fij.s2.r239$y, 0, k3) {
       let t4033 = (fij.s2.r239$y*npairs) + t4031
       let t4032 = (cU.ne.extent_realized*fij.s2.r239$y) + t4030
       for (fij.s2.r239$z, 0, npairs) {
        fij[fij.s2.r239$z*3] = fij[fij.s2.r239$z*3] + (cU[t4032]*U[(fij.s2.r239$z + t4033)*4])
        fij[(fij.s2.r239$z*3) + 1] = fij[(fij.s2.r239$z*3) + 1] + (cU[t4032]*U[((fij.s2.r239$z + t4033)*4) + 1])
        fij[(fij.s2.r239$z*3) + 2] = fij[(fij.s2.r239$z*3) + 2] + (cU[t4032]*U[((fij.s2.r239$z + t4033)*4) + 2])
       }
      }
     }
    } else {
     let t4035 = U.k.extent_realized*npairs
     for (fij.s2.r239$x, 0, nrbf3) {
      let t4036 = (cU.ne.extent_realized*k3)*fij.s2.r239$x
      let t4037 = fij.s2.r239$x*t4035
      for (fij.s2.r239$y, 0, k3) {
       let t4039 = (fij.s2.r239$y*npairs) + t4037
       let t4038 = (cU.ne.extent_realized*fij.s2.r239$y) + t4036
       for (fij.s2.r239$z, 0, npairs) {
        fij[fij.s2.r239$z*3] = fij[fij.s2.r239$z*3] + (cU[(max(min(tj[fij.s2.r239$z - tj.min.0], nelements), 1) + t4038) + -1]*U[(fij.s2.r239$z + t4039)*4])
        fij[(fij.s2.r239$z*3) + 1] = fij[(fij.s2.r239$z*3) + 1] + (cU[(max(min(tj[fij.s2.r239$z - tj.min.0], nelements), 1) + t4038) + -1]*U[((fij.s2.r239$z + t4039)*4) + 1])
        fij[(fij.s2.r239$z*3) + 2] = fij[(fij.s2.r239$z*3) + 2] + (cU[(max(min(tj[fij.s2.r239$z - tj.min.0], nelements), 1) + t4038) + -1]*U[((fij.s2.r239$z + t4039)*4) + 2])
       }
      }
     }
    }
   }
  }
  free cU
  consume dd3 {
   consume ind32 {
    consume cf1 {
     let t4040 = nabf3*npairs
     for (fij.s3.dim, 0, 3) {
      let t4043 = nrbf3*t4040
      for (fij.s3.r263$x, 0, n32) {
       let t4044 = (n32*2) + fij.s3.r263$x
       let t4045 = fij.s3.r263$x + n32
       for (fij.s3.n, 0, npairs) {
        let t3568 = (fij.s3.n*3) + fij.s3.dim
        fij[t3568] = fij[t3568] + (cf1[fij.s3.r263$x]*dd3[(fij.s3.n*3) + (((ind32[fij.s3.r263$x]*npairs)*3) + (((ind32[t4045]*t4040)*3) + (((ind32[t4044]*t4043)*3) + fij.s3.dim)))])
       }
      }
     }
    }
   }
  }
  free cf1
  consume cf2 {
   consume ind23 {
    consume dd2 {
     let t4046 = max(nelements, 1)
     for (fij.s4.dim, 0, 3) {
      let t4047 = nrbf2*t4046
      for (fij.s4.r256$x, 0, n23) {
       let t4048 = (npairs*t4047)*fij.s4.dim
       let t4049 = fij.s4.r256$x + n23
       for (fij.s4.n, 0, npairs) {
        let t3570 = (fij.s4.n*3) + fij.s4.dim
        fij[t3570] = fij[t3570] + (cf2[fij.s4.r256$x]*dd2[(fij.s4.n*t4047) + ((ind23[t4049]*t4046) + (ind23[fij.s4.r256$x] + t4048))])
       }
      }
     }
    }
   }
  }
  free dd2
  free cf2
  consume dd3 {
   consume cf133 {
    consume ind33 {
     let t4050 = nabf3*npairs
     for (fij.s5.dim, 0, 3) {
      let t4053 = nrbf3*t4050
      for (fij.s5.r290$x, 0, n33) {
       let t4054 = (n33*2) + fij.s5.r290$x
       let t4055 = fij.s5.r290$x + n33
       for (fij.s5.n, 0, npairs) {
        let t3573 = (fij.s5.n*3) + fij.s5.dim
        fij[t3573] = fij[t3573] + (cf133[fij.s5.r290$x]*dd3[(fij.s5.n*3) + (((ind33[fij.s5.r290$x]*npairs)*3) + (((ind33[t4055]*t4050)*3) + (((ind33[t4054]*t4053)*3) + fij.s5.dim)))])
       }
      }
     }
    }
   }
  }
  free cf133
  consume dd3 {
   consume cf233 {
    consume ind33 {
     let t4056 = nabf3*npairs
     for (fij.s6.dim, 0, 3) {
      let t4059 = nrbf3*t4056
      for (fij.s6.r290$x, 0, n33) {
       let t4060 = (n33*2) + fij.s6.r290$x
       let t4061 = fij.s6.r290$x + n33
       for (fij.s6.n, 0, npairs) {
        let t3575 = (fij.s6.n*3) + fij.s6.dim
        fij[t3575] = fij[t3575] + (cf233[fij.s6.r290$x]*dd3[(fij.s6.n*3) + (((ind33[fij.s6.r290$x]*npairs)*3) + (((ind33[t4061]*t4056)*3) + (((ind33[t4060]*t4059)*3) + fij.s6.dim)))])
       }
      }
     }
    }
   }
  }
  free cf233
  free dd3
  consume cu4 {
   consume U {
    if (nelements == 1) {
     let t4062 = (k4 + 1)*cu4.ne.extent_realized
     let t4063 = U.k.extent_realized*npairs
     for (fij.s7.r319$x, 0, nrbf4) {
      let t4065 = fij.s7.r319$x*t4063
      let t4064 = fij.s7.r319$x*t4062
      for (fij.s7.r319$y, 0, k4) {
       let t4067 = (fij.s7.r319$y*npairs) + t4065
       let t4066 = (cu4.ne.extent_realized*fij.s7.r319$y) + t4064
       for (fij.s7.r319$z, 0, npairs) {
        fij[fij.s7.r319$z*3] = fij[fij.s7.r319$z*3] + (cu4[t4066]*U[(fij.s7.r319$z + t4067)*4])
        fij[(fij.s7.r319$z*3) + 1] = fij[(fij.s7.r319$z*3) + 1] + (cu4[t4066]*U[((fij.s7.r319$z + t4067)*4) + 1])
        fij[(fij.s7.r319$z*3) + 2] = fij[(fij.s7.r319$z*3) + 2] + (cu4[t4066]*U[((fij.s7.r319$z + t4067)*4) + 2])
       }
      }
     }
    } else {
     let t4068 = (k4 + 1)*cu4.ne.extent_realized
     let t4069 = U.k.extent_realized*npairs
     for (fij.s7.r319$x, 0, nrbf4) {
      let t4071 = fij.s7.r319$x*t4069
      let t4070 = fij.s7.r319$x*t4068
      for (fij.s7.r319$y, 0, k4) {
       let t4073 = (fij.s7.r319$y*npairs) + t4071
       let t4072 = (cu4.ne.extent_realized*fij.s7.r319$y) + t4070
       for (fij.s7.r319$z, 0, npairs) {
        fij[fij.s7.r319$z*3] = fij[fij.s7.r319$z*3] + (cu4[(max(min(tj[fij.s7.r319$z - tj.min.0], nelements), 1) + t4072) + -1]*U[(fij.s7.r319$z + t4073)*4])
        fij[(fij.s7.r319$z*3) + 1] = fij[(fij.s7.r319$z*3) + 1] + (cu4[(max(min(tj[fij.s7.r319$z - tj.min.0], nelements), 1) + t4072) + -1]*U[((fij.s7.r319$z + t4073)*4) + 1])
        fij[(fij.s7.r319$z*3) + 2] = fij[(fij.s7.r319$z*3) + 2] + (cu4[(max(min(tj[fij.s7.r319$z - tj.min.0], nelements), 1) + t4072) + -1]*U[((fij.s7.r319$z + t4073)*4) + 2])
       }
      }
     }
    }
   }
  }
  free U
  free cu4
 }
 produce fij_o {
  consume fij {
   for (fij_o.s0.n, 0, npairs) {
    let t4074 = fij_o.s0.n*3
    for (fij_o.s0.dim, 0, 3) {
     let t3577 = fij_o.s0.dim + t4074
     fij_o[t3577] = fij[t3577]
    }
   }
  }
 }
 free fij
 allocate e[float64 * 1]
 produce e {
  e[0] = 0.000000
  consume rbf$1 {
   let t4075 = (nrbf2*-1) - coeff2.stride.2
   let t4076 = 0 - ti.min.0
   for (e.s1.r115$y, 0, nrbf2) {
    for (e.s1.r115$x, 0, npairs) {
     e[0] = e[0] + (coeff2[(max(min(tj[e.s1.r115$x - tj.min.0], npairs + -1), 1)*nrbf2) + (((max(min(ti[t4076], nelements), 1)*coeff2.stride.2) + t4075) + e.s1.r115$y)]*rbf$1[(e.s1.r115$y*npairs) + e.s1.r115$x])
    }
   }
  }
  free rbf$1
 }
 produce e_o {
  consume e {
   e_o[0] = e[0]
  }
 }
 free e
 allocate d23$0[float64 * n23 * n32]
 produce d23$0 {
  consume ind32 {
   consume d3$0 {
    consume ind23 {
     consume d2$0 {
      let t4078 = max(nelements, 1)
      let t4080 = nabf3*nrbf3
      for (d23$0.s0.d23j, 0, n32) {
       let t4081 = (n32*2) + d23$0.s0.d23j
       let t4082 = d23$0.s0.d23j + n32
       for (d23$0.s0.d23i, 0, n23) {
        d23$0[(d23$0.s0.d23j*n23) + d23$0.s0.d23i] = d2$0[ind23[d23$0.s0.d23i] + (ind23[d23$0.s0.d23i + n23]*t4078)]*d3$0[(ind32[t4082]*nabf3) + (ind32[d23$0.s0.d23j] + (ind32[t4081]*t4080))]
       }
      }
     }
    }
   }
  }
 }
 free d2$0
 free ind23
 free ind32
 allocate e23$0[float64 * 1]
 produce e23$0 {
  e23$0[0] = 0.000000
  consume d23$0 {
   let t4084 = 0 - ti.min.0
   for (e23$0.s1.r251$y, 0, n32) {
    let t4085 = e23$0.s1.r251$y*n23
    for (e23$0.s1.r251$x, 0, n23) {
     e23$0[0] = e23$0[0] + (d23$0[e23$0.s1.r251$x + t4085]*coeff23[(((ti[t4084] + -1)*coeff23.stride.2) + t4085) + e23$0.s1.r251$x])
    }
   }
  }
  free d23$0
 }
 allocate e3$0[float64 * 1]
 produce e3$0 {
  e3$0[0] = 0.000000
  consume sumU {
   let t4092 = ((nelements + 1)*nelements)/2
   let t4086 = sumU.k.extent_realized*sumU.n.extent_realized
   let t4088 = coeff3.min.3*coeff3.stride.3
   let t4089 = coeff3.min.2*coeff3.stride.2
   let t4090 = coeff3.min.1*coeff3.stride.1
   let t4087 = 0 - ti.min.0
   for (e3$0.s1.r234$4, 0, nrbf3) {
    let t4094 = e3$0.s1.r234$4*t4086
    let t4096 = coeff3.stride.1*e3$0.s1.r234$4
    for (e3$0.s1.r234$y, 0, nabf3) {
     let t4098 = e3$0.s1.r234$y - pn3.min.0
     for (e3$0.s1.r234$z, 0, nelements) {
      let e3$0.s1.r234$w.new_min.s = min(e3$0.s1.r234$z, nelements)
      let t4101 = nelements - e3$0.s1.r234$w.new_min.s
      let t4104 = ((e3$0.s1.r234$z/2)*(((nelements*2) - e3$0.s1.r234$z) + -3)) + e3$0.s1.r234$w.new_min.s
      let t4105 = e3$0.s1.r234$z + t4094
      let t4102 = e3$0.s1.r234$w.new_min.s + t4094
      for (e3$0.s1.r234$w.rebased, 0, t4101) {
       let e3$0.s1.r234$x.new_min.s = min(pn3[t4098], k3)
       let e3$0.s1.r234$x.new_max.s = max(min(pn3[t4098 + 1], k3), e3$0.s1.r234$x.new_min.s)
       let t4111 = max(e3$0.s1.r234$x.new_min.s, 0)
       let t4110 = max(min(e3$0.s1.r234$w.rebased + t4104, t4092), 1)*coeff3.stride.2
       let t4109 = coeff3.stride.2*-1
       let t4106 = max(e3$0.s1.r234$x.new_max.s, 0) - t4111
       let t4108 = e3$0.s1.r234$w.rebased + t4102
       for (e3$0.s1.r234$x.rebased, 0, t4106) {
        let t3581 = (e3$0.s1.r234$x.rebased + t4111)*sumU.n.extent_realized
        e3$0[0] = e3$0[0] + (sumU[t3581 + t4108]*(coeff3[(((((((((max(min(ti[t4087], nelements), 1)*coeff3.stride.3) - t4088) - t4089) - t4090) - coeff3.min.0) + t4109) - coeff3.stride.3) + t4096) + e3$0.s1.r234$y) + t4110]*(sumU[t3581 + t4105]*float64(pc3[(t4111 - pc3.min.0) + e3$0.s1.r234$x.rebased]))))
       }
      }
     }
    }
   }
  }
 }
 allocate d33$0[float64 * max(((n33 + 1)*n33)/2, 1)]
 produce d33$0 {
  let t4112 = max(((n33 + 1)*n33)/2, 1)
  for (d33$0.s0.k, 0, t4112) {
   d33$0[d33$0.s0.k] = 0.000000
  }
  consume ind33 {
   consume d3$0 {
    let t4113 = ((n33 + 1)*n33)/2
    let t4114 = nabf3*nrbf3
    for (d33$0.s1.r279$y, 0, n33) {
     let d33$0.s1.r279$x.new_min.s = min(d33$0.s1.r279$y, n33)
     let t4122 = n33*2
     let t4117 = (((n33 + -1)*d33$0.s1.r279$y) + d33$0.s1.r279$x.new_min.s) - (((d33$0.s1.r279$y + -1)*d33$0.s1.r279$y)/2)
     let t4116 = n33 - d33$0.s1.r279$x.new_min.s
     let t4118 = d33$0.s1.r279$y + t4122
     let t4120 = d33$0.s1.r279$x.new_min.s + t4122
     let t4119 = d33$0.s1.r279$y + n33
     let t4121 = d33$0.s1.r279$x.new_min.s + n33
     for (d33$0.s1.r279$x.rebased, 0, t4116) {
      let t3418.s = min(d33$0.s1.r279$x.rebased + t4117, t4113 + -1)
      let t3419 = let t4240 = max(t3418.s, 0) in if_then_else(t4113 < (t4240 + 1), return_second(halide_print((char *)stringify(t4240, " error!\n")), t4240), t4240)
      d33$0[t3419] = d33$0[t3419] + (d3$0[(ind33[t4119]*nabf3) + (ind33[d33$0.s1.r279$y] + (ind33[t4118]*t4114))]*d3$0[(ind33[d33$0.s1.r279$x.rebased + t4121]*nabf3) + (ind33[d33$0.s1.r279$x.new_min.s + d33$0.s1.r279$x.rebased] + (ind33[d33$0.s1.r279$x.rebased + t4120]*t4114))])
     }
    }
   }
  }
  free d3$0
  free ind33
 }
 allocate e33$0[float64 * 1]
 produce e33$0 {
  e33$0[0] = 0.000000
  consume d33$0 {
   let t4123 = ((n33 + 1)*n33)/2
   let t4124 = 0 - ti.min.0
   for (e33$0.s1.r284$x, 0, t4123) {
    e33$0[0] = e33$0[0] + (d33$0[e33$0.s1.r284$x]*coeff33[((max(min(ti[t4124], nelements), 1) + -1)*coeff33.stride.1) + e33$0.s1.r284$x])
   }
  }
  free d33$0
 }
 allocate e4$0[float64 * 1]
 produce e4$0 {
  e4$0[0] = 0.000000
  consume sumU {
   if (nelements == 1) {
    let t4125 = sumU.k.extent_realized*sumU.n.extent_realized
    let t4126 = pb4.min.1*pb4.stride.1
    let t4127 = ((coeff4.min.1*coeff4.stride.1) + ((coeff4.min.3*coeff4.stride.3) + (coeff4.min.2*coeff4.stride.2))) + coeff4.min.0
    for (e4$0.s1.r312$5, 0, nrbf4) {
     let t4129 = e4$0.s1.r312$5*t4125
     let t4132 = (coeff4.stride.1*e4$0.s1.r312$5) - t4127
     let t4133 = ((pb4.stride.1*2) - t4126) - pb4.min.0
     let t4130 = (pb4.stride.1 - t4126) - pb4.min.0
     let t4131 = pb4.min.0 + t4126
     for (e4$0.s1.r312$4, 0, nabf4) {
      let e4$0.s1.r312$w.new_min.s = min(pa4[e4$0.s1.r312$4 - pa4.min.0], q4)
      let e4$0.s1.r312$w.new_max.s = max(min(pa4[(e4$0.s1.r312$4 - pa4.min.0) + 1], q4), e4$0.s1.r312$w.new_min.s)
      let t4137 = max(e4$0.s1.r312$w.new_min.s, 0)
      let t4134 = max(e4$0.s1.r312$w.new_max.s, 0) - t4137
      let t4136 = e4$0.s1.r312$4 + t4132
      for (e4$0.s1.r312$w.rebased, 0, t4134) {
       e4$0[0] = e4$0[0] + ((sumU[(pb4[(t4130 + t4137) + e4$0.s1.r312$w.rebased]*sumU.n.extent_realized) + t4129]*(sumU[(pb4[(t4137 - t4131) + e4$0.s1.r312$w.rebased]*sumU.n.extent_realized) + t4129]*float64(pc4[(t4137 - pc4.min.0) + e4$0.s1.r312$w.rebased])))*(coeff4[t4136]*sumU[(pb4[(t4133 + t4137) + e4$0.s1.r312$w.rebased]*sumU.n.extent_realized) + t4129]))
      }
     }
    }
   } else {
    let t4138 = sumU.k.extent_realized*sumU.n.extent_realized
    let t4139 = pb4.min.1*pb4.stride.1
    let t4141 = coeff4.min.3*coeff4.stride.3
    let t4142 = coeff4.min.2*coeff4.stride.2
    let t4143 = coeff4.min.1*coeff4.stride.1
    let t4140 = 0 - ti.min.0
    for (e4$0.s1.r312$5, 0, nrbf4) {
     let t4145 = e4$0.s1.r312$5*t4138
     let t4148 = coeff4.stride.1*e4$0.s1.r312$5
     let t4149 = ((pb4.stride.1*2) - t4139) - pb4.min.0
     let t4146 = (pb4.stride.1 - t4139) - pb4.min.0
     let t4147 = pb4.min.0 + t4139
     for (e4$0.s1.r312$4, 0, nabf4) {
      let e4_0.s1.r312_w.new_min$1.s = min(pa4[e4$0.s1.r312$4 - pa4.min.0], q4)
      let e4_0.s1.r312_w.new_max$1.s = max(min(pa4[(e4$0.s1.r312$4 - pa4.min.0) + 1], q4), e4_0.s1.r312_w.new_min$1.s)
      let t4152 = max(e4_0.s1.r312_w.new_min$1.s, 0)
      let t4150 = max(e4_0.s1.r312_w.new_max$1.s, 0) - t4152
      for (e4$0.s1.r312$w.rebased, 0, t4150) {
       let t4154 = (t4152 - t4147) + e4$0.s1.r312$w.rebased
       let t4155 = (t4152 - pc4.min.0) + e4$0.s1.r312$w.rebased
       let t4156 = (t4149 + t4152) + e4$0.s1.r312$w.rebased
       let t4153 = (t4146 + t4152) + e4$0.s1.r312$w.rebased
       for (e4$0.s1.r312$x, 0, nelements) {
        let t4157 = (((e4$0.s1.r312$x + 1)*e4$0.s1.r312$x)*(e4$0.s1.r312$x + 2))/6
        for (e4$0.s1.r312$y, 0, e4$0.s1.r312$x + 1) {
         let t4158 = (((e4$0.s1.r312$y + 1)*e4$0.s1.r312$y)/2) + t4157
         for (e4$0.s1.r312$z, 0, e4$0.s1.r312$y + 1) {
          e4$0[0] = e4$0[0] + ((sumU[((pb4[t4153]*sumU.n.extent_realized) + t4145) + e4$0.s1.r312$y]*(sumU[((pb4[t4154]*sumU.n.extent_realized) + t4145) + e4$0.s1.r312$x]*float64(pc4[t4155])))*(coeff4[((e4$0.s1.r312$z + t4158)*coeff4.stride.2) + ((((((((max(min(ti[t4140], nelements), 1)*coeff4.stride.3) - t4141) - t4142) - t4143) - coeff4.min.0) - coeff4.stride.3) + t4148) + e4$0.s1.r312$4)]*sumU[((pb4[t4156]*sumU.n.extent_realized) + t4145) + e4$0.s1.r312$z]))
         }
        }
       }
      }
     }
    }
   }
  }
  free sumU
 }
 produce e3_o {
  consume e3$0 {
   e3_o[0] = e3$0[0]
  }
  free e3$0
  consume e23$0 {
   e3_o[0] = e3_o[0] + e23$0[0]
  }
  free e23$0
  consume e33$0 {
   e3_o[0] = e3_o[0] + e33$0[0]
  }
  free e33$0
  consume e4$0 {
   e3_o[0] = e3_o[0] + e4$0[0]
  }
  free e4$0
 }
}
}


