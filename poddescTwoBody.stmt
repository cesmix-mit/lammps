module name=poddescTwoBody, target=x86-64-linux-sse41
external_plus_metadata func poddescTwoBody (rijs, besselparams, nbesselpars, bdegree, adegree, npairs, nrbfmax, rin, rcut, Phi, ns, coeff2, ti, tj, nrbf2, k3, k4, q4, pq, pn3, pc3, pa4, pb4, pc4, elemindex, nrbf3, nrbf4, nelements, nd23, nd33, nd34, n32, n23, n33, n43, n34, n44, nabf3, nabf4, nrbf23, nrbf33, nrbf34, nrbf44, nabf23, nabf33, nabf34, nabf44, coeff3, coeff23, coeff33, coeff4, coeff34, coeff44, fij_o, e_o, e3_o) {
assert((uint64)reinterpret((halide_buffer_t *)tj.buffer) != (uint64)0, halide_error_buffer_argument_is_null("tj"))
assert((uint64)reinterpret((halide_buffer_t *)ti.buffer) != (uint64)0, halide_error_buffer_argument_is_null("ti"))
assert((uint64)reinterpret((halide_buffer_t *)rijs.buffer) != (uint64)0, halide_error_buffer_argument_is_null("rijs"))
assert((uint64)reinterpret((halide_buffer_t *)pq.buffer) != (uint64)0, halide_error_buffer_argument_is_null("pq"))
assert((uint64)reinterpret((halide_buffer_t *)pn3.buffer) != (uint64)0, halide_error_buffer_argument_is_null("pn3"))
assert((uint64)reinterpret((halide_buffer_t *)pc4.buffer) != (uint64)0, halide_error_buffer_argument_is_null("pc4"))
assert((uint64)reinterpret((halide_buffer_t *)pc3.buffer) != (uint64)0, halide_error_buffer_argument_is_null("pc3"))
assert((uint64)reinterpret((halide_buffer_t *)pb4.buffer) != (uint64)0, halide_error_buffer_argument_is_null("pb4"))
assert((uint64)reinterpret((halide_buffer_t *)pa4.buffer) != (uint64)0, halide_error_buffer_argument_is_null("pa4"))
assert((uint64)reinterpret((halide_buffer_t *)fij_o.buffer) != (uint64)0, halide_error_buffer_argument_is_null("fij_o"))
assert((uint64)reinterpret((halide_buffer_t *)elemindex.buffer) != (uint64)0, halide_error_buffer_argument_is_null("elemindex"))
assert((uint64)reinterpret((halide_buffer_t *)e_o.buffer) != (uint64)0, halide_error_buffer_argument_is_null("e_o"))
assert((uint64)reinterpret((halide_buffer_t *)e3_o.buffer) != (uint64)0, halide_error_buffer_argument_is_null("e3_o"))
assert((uint64)reinterpret((halide_buffer_t *)coeff4.buffer) != (uint64)0, halide_error_buffer_argument_is_null("coeff4"))
assert((uint64)reinterpret((halide_buffer_t *)coeff33.buffer) != (uint64)0, halide_error_buffer_argument_is_null("coeff33"))
assert((uint64)reinterpret((halide_buffer_t *)coeff3.buffer) != (uint64)0, halide_error_buffer_argument_is_null("coeff3"))
assert((uint64)reinterpret((halide_buffer_t *)coeff23.buffer) != (uint64)0, halide_error_buffer_argument_is_null("coeff23"))
assert((uint64)reinterpret((halide_buffer_t *)coeff2.buffer) != (uint64)0, halide_error_buffer_argument_is_null("coeff2"))
assert((uint64)reinterpret((halide_buffer_t *)besselparams.buffer) != (uint64)0, halide_error_buffer_argument_is_null("besselparams"))
assert((uint64)reinterpret((halide_buffer_t *)Phi.buffer) != (uint64)0, halide_error_buffer_argument_is_null("Phi"))
let Phi = (void *)_halide_buffer_get_host((halide_buffer_t *)Phi.buffer)
let Phi.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)Phi.buffer)
let Phi.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)Phi.buffer)
let Phi.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)Phi.buffer)
let Phi.min.0 = _halide_buffer_get_min((halide_buffer_t *)Phi.buffer, 0)
let Phi.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)Phi.buffer, 0)
let Phi.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)Phi.buffer, 0)
let Phi.min.1 = _halide_buffer_get_min((halide_buffer_t *)Phi.buffer, 1)
let Phi.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)Phi.buffer, 1)
let Phi.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)Phi.buffer, 1)
let besselparams = (void *)_halide_buffer_get_host((halide_buffer_t *)besselparams.buffer)
let besselparams.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)besselparams.buffer)
let besselparams.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)besselparams.buffer)
let besselparams.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)besselparams.buffer)
let besselparams.min.0 = _halide_buffer_get_min((halide_buffer_t *)besselparams.buffer, 0)
let besselparams.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)besselparams.buffer, 0)
let besselparams.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)besselparams.buffer, 0)
let coeff2 = (void *)_halide_buffer_get_host((halide_buffer_t *)coeff2.buffer)
let coeff2.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)coeff2.buffer)
let coeff2.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)coeff2.buffer)
let coeff2.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)coeff2.buffer)
let coeff2.min.0 = _halide_buffer_get_min((halide_buffer_t *)coeff2.buffer, 0)
let coeff2.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)coeff2.buffer, 0)
let coeff2.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)coeff2.buffer, 0)
let coeff2.min.1 = _halide_buffer_get_min((halide_buffer_t *)coeff2.buffer, 1)
let coeff2.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)coeff2.buffer, 1)
let coeff2.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)coeff2.buffer, 1)
let coeff2.min.2 = _halide_buffer_get_min((halide_buffer_t *)coeff2.buffer, 2)
let coeff2.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)coeff2.buffer, 2)
let coeff2.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)coeff2.buffer, 2)
let coeff23 = (void *)_halide_buffer_get_host((halide_buffer_t *)coeff23.buffer)
let coeff23.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)coeff23.buffer)
let coeff23.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)coeff23.buffer)
let coeff23.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)coeff23.buffer)
let coeff23.min.0 = _halide_buffer_get_min((halide_buffer_t *)coeff23.buffer, 0)
let coeff23.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)coeff23.buffer, 0)
let coeff23.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)coeff23.buffer, 0)
let coeff23.min.1 = _halide_buffer_get_min((halide_buffer_t *)coeff23.buffer, 1)
let coeff23.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)coeff23.buffer, 1)
let coeff23.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)coeff23.buffer, 1)
let coeff23.min.2 = _halide_buffer_get_min((halide_buffer_t *)coeff23.buffer, 2)
let coeff23.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)coeff23.buffer, 2)
let coeff23.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)coeff23.buffer, 2)
let coeff3 = (void *)_halide_buffer_get_host((halide_buffer_t *)coeff3.buffer)
let coeff3.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)coeff3.buffer)
let coeff3.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)coeff3.buffer)
let coeff3.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)coeff3.buffer)
let coeff3.min.0 = _halide_buffer_get_min((halide_buffer_t *)coeff3.buffer, 0)
let coeff3.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)coeff3.buffer, 0)
let coeff3.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)coeff3.buffer, 0)
let coeff3.min.1 = _halide_buffer_get_min((halide_buffer_t *)coeff3.buffer, 1)
let coeff3.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)coeff3.buffer, 1)
let coeff3.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)coeff3.buffer, 1)
let coeff3.min.2 = _halide_buffer_get_min((halide_buffer_t *)coeff3.buffer, 2)
let coeff3.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)coeff3.buffer, 2)
let coeff3.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)coeff3.buffer, 2)
let coeff3.min.3 = _halide_buffer_get_min((halide_buffer_t *)coeff3.buffer, 3)
let coeff3.extent.3 = _halide_buffer_get_extent((halide_buffer_t *)coeff3.buffer, 3)
let coeff3.stride.3 = _halide_buffer_get_stride((halide_buffer_t *)coeff3.buffer, 3)
let coeff33 = (void *)_halide_buffer_get_host((halide_buffer_t *)coeff33.buffer)
let coeff33.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)coeff33.buffer)
let coeff33.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)coeff33.buffer)
let coeff33.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)coeff33.buffer)
let coeff33.min.0 = _halide_buffer_get_min((halide_buffer_t *)coeff33.buffer, 0)
let coeff33.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)coeff33.buffer, 0)
let coeff33.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)coeff33.buffer, 0)
let coeff33.min.1 = _halide_buffer_get_min((halide_buffer_t *)coeff33.buffer, 1)
let coeff33.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)coeff33.buffer, 1)
let coeff33.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)coeff33.buffer, 1)
let coeff4 = (void *)_halide_buffer_get_host((halide_buffer_t *)coeff4.buffer)
let coeff4.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)coeff4.buffer)
let coeff4.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)coeff4.buffer)
let coeff4.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)coeff4.buffer)
let coeff4.min.0 = _halide_buffer_get_min((halide_buffer_t *)coeff4.buffer, 0)
let coeff4.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)coeff4.buffer, 0)
let coeff4.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)coeff4.buffer, 0)
let coeff4.min.1 = _halide_buffer_get_min((halide_buffer_t *)coeff4.buffer, 1)
let coeff4.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)coeff4.buffer, 1)
let coeff4.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)coeff4.buffer, 1)
let coeff4.min.2 = _halide_buffer_get_min((halide_buffer_t *)coeff4.buffer, 2)
let coeff4.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)coeff4.buffer, 2)
let coeff4.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)coeff4.buffer, 2)
let coeff4.min.3 = _halide_buffer_get_min((halide_buffer_t *)coeff4.buffer, 3)
let coeff4.extent.3 = _halide_buffer_get_extent((halide_buffer_t *)coeff4.buffer, 3)
let coeff4.stride.3 = _halide_buffer_get_stride((halide_buffer_t *)coeff4.buffer, 3)
let e3_o = (void *)_halide_buffer_get_host((halide_buffer_t *)e3_o.buffer)
let e3_o.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)e3_o.buffer)
let e3_o.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)e3_o.buffer)
let e3_o.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)e3_o.buffer)
let e_o = (void *)_halide_buffer_get_host((halide_buffer_t *)e_o.buffer)
let e_o.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)e_o.buffer)
let e_o.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)e_o.buffer)
let e_o.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)e_o.buffer)
let elemindex = (void *)_halide_buffer_get_host((halide_buffer_t *)elemindex.buffer)
let elemindex.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)elemindex.buffer)
let elemindex.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)elemindex.buffer)
let elemindex.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)elemindex.buffer)
let elemindex.min.0 = _halide_buffer_get_min((halide_buffer_t *)elemindex.buffer, 0)
let elemindex.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)elemindex.buffer, 0)
let elemindex.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)elemindex.buffer, 0)
let elemindex.min.1 = _halide_buffer_get_min((halide_buffer_t *)elemindex.buffer, 1)
let elemindex.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)elemindex.buffer, 1)
let elemindex.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)elemindex.buffer, 1)
let fij_o = (void *)_halide_buffer_get_host((halide_buffer_t *)fij_o.buffer)
let fij_o.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)fij_o.buffer)
let fij_o.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)fij_o.buffer)
let fij_o.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)fij_o.buffer)
let fij_o.min.0 = _halide_buffer_get_min((halide_buffer_t *)fij_o.buffer, 0)
let fij_o.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)fij_o.buffer, 0)
let fij_o.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)fij_o.buffer, 0)
let fij_o.min.1 = _halide_buffer_get_min((halide_buffer_t *)fij_o.buffer, 1)
let fij_o.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)fij_o.buffer, 1)
let fij_o.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)fij_o.buffer, 1)
let pa4 = (void *)_halide_buffer_get_host((halide_buffer_t *)pa4.buffer)
let pa4.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)pa4.buffer)
let pa4.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)pa4.buffer)
let pa4.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)pa4.buffer)
let pa4.min.0 = _halide_buffer_get_min((halide_buffer_t *)pa4.buffer, 0)
let pa4.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)pa4.buffer, 0)
let pa4.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)pa4.buffer, 0)
let pb4 = (void *)_halide_buffer_get_host((halide_buffer_t *)pb4.buffer)
let pb4.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)pb4.buffer)
let pb4.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)pb4.buffer)
let pb4.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)pb4.buffer)
let pb4.min.0 = _halide_buffer_get_min((halide_buffer_t *)pb4.buffer, 0)
let pb4.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)pb4.buffer, 0)
let pb4.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)pb4.buffer, 0)
let pb4.min.1 = _halide_buffer_get_min((halide_buffer_t *)pb4.buffer, 1)
let pb4.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)pb4.buffer, 1)
let pb4.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)pb4.buffer, 1)
let pc3 = (void *)_halide_buffer_get_host((halide_buffer_t *)pc3.buffer)
let pc3.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)pc3.buffer)
let pc3.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)pc3.buffer)
let pc3.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)pc3.buffer)
let pc3.min.0 = _halide_buffer_get_min((halide_buffer_t *)pc3.buffer, 0)
let pc3.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)pc3.buffer, 0)
let pc3.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)pc3.buffer, 0)
let pc4 = (void *)_halide_buffer_get_host((halide_buffer_t *)pc4.buffer)
let pc4.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)pc4.buffer)
let pc4.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)pc4.buffer)
let pc4.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)pc4.buffer)
let pc4.min.0 = _halide_buffer_get_min((halide_buffer_t *)pc4.buffer, 0)
let pc4.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)pc4.buffer, 0)
let pc4.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)pc4.buffer, 0)
let pn3 = (void *)_halide_buffer_get_host((halide_buffer_t *)pn3.buffer)
let pn3.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)pn3.buffer)
let pn3.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)pn3.buffer)
let pn3.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)pn3.buffer)
let pn3.min.0 = _halide_buffer_get_min((halide_buffer_t *)pn3.buffer, 0)
let pn3.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)pn3.buffer, 0)
let pn3.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)pn3.buffer, 0)
let pq = (void *)_halide_buffer_get_host((halide_buffer_t *)pq.buffer)
let pq.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)pq.buffer)
let pq.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)pq.buffer)
let pq.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)pq.buffer)
let pq.min.0 = _halide_buffer_get_min((halide_buffer_t *)pq.buffer, 0)
let pq.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)pq.buffer, 0)
let pq.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)pq.buffer, 0)
let rijs = (void *)_halide_buffer_get_host((halide_buffer_t *)rijs.buffer)
let rijs.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)rijs.buffer)
let rijs.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)rijs.buffer)
let rijs.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)rijs.buffer)
let rijs.min.0 = _halide_buffer_get_min((halide_buffer_t *)rijs.buffer, 0)
let rijs.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)rijs.buffer, 0)
let rijs.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)rijs.buffer, 0)
let rijs.min.1 = _halide_buffer_get_min((halide_buffer_t *)rijs.buffer, 1)
let rijs.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)rijs.buffer, 1)
let rijs.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)rijs.buffer, 1)
let ti = (void *)_halide_buffer_get_host((halide_buffer_t *)ti.buffer)
let ti.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)ti.buffer)
let ti.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)ti.buffer)
let ti.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)ti.buffer)
let ti.min.0 = _halide_buffer_get_min((halide_buffer_t *)ti.buffer, 0)
let ti.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)ti.buffer, 0)
let ti.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)ti.buffer, 0)
let tj = (void *)_halide_buffer_get_host((halide_buffer_t *)tj.buffer)
let tj.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)tj.buffer)
let tj.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)tj.buffer)
let tj.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)tj.buffer)
let tj.min.0 = _halide_buffer_get_min((halide_buffer_t *)tj.buffer, 0)
let tj.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)tj.buffer, 0)
let tj.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)tj.buffer, 0)
let U.s0.m.max.s = max(nrbf3, nrbf4)
let U.s0.k.max.s = max(k3, k4)
let sumU.s0.k.max = max(k3 + -1, k4)
let rbf$1.s1.i.max.s = max(nrbf2, nrbf3)
let coeff2.min.2.required.s = min(ti[0 - (ti.min.0*ti.stride.0)], nelements)
let coeff23.extent.2.required.s = let t3513 = ti[0 - (ti.min.0*ti.stride.0)] in (min(nelements, t3513) - max(t3513, 1))
let coeff23.min.2.required.s = ti[0 - (ti.min.0*ti.stride.0)]
let coeff3.extent.2.required.s = min(((nelements + 1)*nelements)/2, (max(max(((nelements + -1)/2)*(nelements + -2), ((nelements + -1)/2)*((nelements*2) + -3)), 0) + nelements) + -1)
let coeff3.min.3.required.s = min(ti[0 - (ti.min.0*ti.stride.0)], nelements)
let coeff3.stride.3.required = max(coeff3.extent.2.required.s, 1)*(nabf3*nrbf3)
let coeff33.extent.0.required = max(((n33 + 1)*n33)/2, 1)
let coeff33.min.1.required.s = min(ti[0 - (ti.min.0*ti.stride.0)], nelements)
let coeff4.extent.2.required.s = let t3514 = min((nelements + -1)/3, 0) in (let t3515 = (t3514*(1 - (t3514*3))) in (let t3516 = min(min(nelements, 3) + ((t3514 + ((nelements + -1)/3))*3), nelements) in (let t3517 = ((1 - (t3514*3))*(t3516 + -1)) in (let t3518 = (t3514*t3516) in (let t3519 = ((t3516 + -1)*t3516) in (let t3520 = min(min(min(0 - (t3515*3), t3517), 0 - (t3518*3)), t3519) in (let t3521 = max(max(max(0 - (t3515*3), t3517), 0 - (t3518*3)), t3519) in (let t3522 = ((nelements + -1)*nelements) in (let t3523 = min(t3522, min(nelements, 1) + -1) in (let t3524 = max(t3522, max(nelements, 1) + -1) in select(nelements == 1, 0, min((((nelements + 1)*nelements)*(nelements + 2))/6, (((max(max(max(max(max(max(max((2 - (t3514*3))*t3520, (t3516 + 1)*t3520), (2 - (t3514*3))*t3521), (t3516 + 1)*t3521), t3523*2), (nelements + 1)*t3523), t3524*2), (nelements + 1)*t3524)/6) + (t3524/2)) + nelements) + -1))))))))))))
let coeff4.min.3.required = select(nelements == 1, 0, max(min(ti[0 - (ti.min.0*ti.stride.0)], nelements), 1) + -1)
let coeff4.stride.3.required = (nabf4*nrbf4)*(coeff4.extent.2.required.s + 1)
let elemindex.extent.0.required = select(nelements == 1, elemindex.extent.0, max(nelements, 1))
let elemindex.min.0.required = select(nelements == 1, elemindex.min.0, 0)
let elemindex.extent.1.required = select(nelements == 1, elemindex.extent.1, nelements)
let elemindex.min.1.required = select(nelements == 1, elemindex.min.1, 0)
let pq.extent.0.required.s = max(k3*2, k3) - min(k3, 0)
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)Phi.buffer) || (rbf$1.s1.i.max.s <= ns), halide_error_constraints_make_required_region_smaller("Input buffer Phi", 1, 0, ns + -1, 0, rbf$1.s1.i.max.s + -1))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff2.buffer) || (1 <= npairs), halide_error_constraints_make_required_region_smaller("Input buffer coeff2", 0, 0, npairs + -1, 0, 0))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff2.buffer) || (max(coeff2.min.2.required.s, 1) <= nelements), let t3525 = max(coeff2.min.2.required.s, 1) in halide_error_constraints_make_required_region_smaller("Input buffer coeff2", 2, 0, nelements + -1, t3525 + -1, t3525 + -1))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff23.buffer) || ((max(coeff23.min.2.required.s, 1) + coeff23.extent.2.required.s) <= nelements), let t3526 = max(coeff23.min.2.required.s, 1) in halide_error_constraints_make_required_region_smaller("Input buffer coeff23", 2, 0, nelements + -1, t3526 + -1, (t3526 + coeff23.extent.2.required.s) + -1))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff33.buffer) || (coeff33.extent.0.required <= (((n33 + 1)*n33)/2)), halide_error_constraints_make_required_region_smaller("Input buffer coeff33", 0, 0, (((n33 + 1)*n33)/2) + -1, 0, coeff33.extent.0.required + -1))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff33.buffer) || (max(coeff33.min.1.required.s, 1) <= nelements), let t3527 = max(coeff33.min.1.required.s, 1) in halide_error_constraints_make_required_region_smaller("Input buffer coeff33", 1, 0, nelements + -1, t3527 + -1, t3527 + -1))
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)Phi.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)Phi.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)Phi.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 2, (halide_dimension_t *)make_struct(0, ns, 1, 0, 0, ns, ns, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)besselparams.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)besselparams.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)besselparams.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 1, (halide_dimension_t *)make_struct(0, nbesselpars, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff2.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)coeff2.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)coeff2.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 3, (halide_dimension_t *)make_struct(0, npairs, nrbf2, 0, 0, nrbf2, 1, 0, 0, nelements, npairs*nrbf2, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff23.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)coeff23.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)coeff23.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 3, (halide_dimension_t *)make_struct(0, n23, 1, 0, 0, n32, n23, 0, 0, nelements, n23*n32, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff3.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)coeff3.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)coeff3.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 4, (halide_dimension_t *)make_struct(0, nabf3, 1, 0, 0, nrbf3, nabf3, 0, 0, max(coeff3.extent.2.required.s, 1), nabf3*nrbf3, 0, max(coeff3.min.3.required.s, 1) + -1, 1, coeff3.stride.3.required, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff33.buffer)) {
 let t3528 = ((n33 + 1)*n33) in (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)coeff33.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)coeff33.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 2, (halide_dimension_t *)make_struct(0, t3528/2, 1, 0, 0, nelements, t3528/2, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff4.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)coeff4.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)coeff4.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 4, (halide_dimension_t *)make_struct(0, nabf4, 1, 0, 0, nrbf4, nabf4, 0, 0, coeff4.extent.2.required.s + 1, nabf4*nrbf4, 0, coeff4.min.3.required, 1, coeff4.stride.3.required, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)e3_o.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)e3_o.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)e3_o.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 0, (halide_dimension_t *)make_struct(), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)e_o.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)e_o.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)e_o.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 0, (halide_dimension_t *)make_struct(), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)elemindex.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)elemindex.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)elemindex.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 2, (halide_dimension_t *)make_struct(elemindex.min.0.required, elemindex.extent.0.required, 1, 0, elemindex.min.1.required, elemindex.extent.1.required, elemindex.extent.0.required, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)fij_o.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)fij_o.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)fij_o.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 2, (halide_dimension_t *)make_struct(0, npairs, 3, 0, 0, 3, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pa4.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)pa4.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)pa4.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(0, nabf4 + 1, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pb4.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)pb4.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)pb4.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 2, (halide_dimension_t *)make_struct(0, q4, 1, 0, 0, 3, q4, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pc3.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)pc3.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)pc3.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(0, k3, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pc4.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)pc4.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)pc4.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(0, q4, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pn3.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)pn3.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)pn3.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(0, nabf3 + 1, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pq.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)pq.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)pq.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(min(k3, 0) + 1, pq.extent.0.required.s + 1, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)rijs.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)rijs.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)rijs.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 2, (halide_dimension_t *)make_struct(0, 3, 1, 0, 0, npairs, 3, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)ti.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)ti.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)ti.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(0, 1, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)tj.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)tj.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)tj.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(0, npairs, 1, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)tj.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)ti.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)rijs.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pq.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pn3.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pc4.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pc3.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pb4.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pa4.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)fij_o.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)elemindex.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)e_o.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)e3_o.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff4.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff33.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff3.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff23.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)coeff2.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)Phi.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)besselparams.buffer))))))))))))))))))))) {
 assert(Phi.type == (uint32)81922, halide_error_bad_type("Input buffer Phi", Phi.type, (uint32)81922))
 assert(Phi.dimensions == 2, halide_error_bad_dimensions("Input buffer Phi", Phi.dimensions, 2))
 assert(besselparams.type == (uint32)81922, halide_error_bad_type("Input buffer besselparams", besselparams.type, (uint32)81922))
 assert(besselparams.dimensions == 1, halide_error_bad_dimensions("Input buffer besselparams", besselparams.dimensions, 1))
 assert(coeff2.type == (uint32)81922, halide_error_bad_type("Input buffer coeff2", coeff2.type, (uint32)81922))
 assert(coeff2.dimensions == 3, halide_error_bad_dimensions("Input buffer coeff2", coeff2.dimensions, 3))
 assert(coeff23.type == (uint32)81922, halide_error_bad_type("Input buffer coeff23", coeff23.type, (uint32)81922))
 assert(coeff23.dimensions == 3, halide_error_bad_dimensions("Input buffer coeff23", coeff23.dimensions, 3))
 assert(coeff3.type == (uint32)81922, halide_error_bad_type("Input buffer coeff3", coeff3.type, (uint32)81922))
 assert(coeff3.dimensions == 4, halide_error_bad_dimensions("Input buffer coeff3", coeff3.dimensions, 4))
 assert(coeff33.type == (uint32)81922, halide_error_bad_type("Input buffer coeff33", coeff33.type, (uint32)81922))
 assert(coeff33.dimensions == 2, halide_error_bad_dimensions("Input buffer coeff33", coeff33.dimensions, 2))
 assert(coeff4.type == (uint32)81922, halide_error_bad_type("Input buffer coeff4", coeff4.type, (uint32)81922))
 assert(coeff4.dimensions == 4, halide_error_bad_dimensions("Input buffer coeff4", coeff4.dimensions, 4))
 assert(e3_o.type == (uint32)81922, halide_error_bad_type("Output buffer e3_o", e3_o.type, (uint32)81922))
 assert(e3_o.dimensions == 0, halide_error_bad_dimensions("Output buffer e3_o", e3_o.dimensions, 0))
 assert(e_o.type == (uint32)81922, halide_error_bad_type("Output buffer e_o", e_o.type, (uint32)81922))
 assert(e_o.dimensions == 0, halide_error_bad_dimensions("Output buffer e_o", e_o.dimensions, 0))
 assert(elemindex.type == (uint32)73728, halide_error_bad_type("Input buffer elemindex", elemindex.type, (uint32)73728))
 assert(elemindex.dimensions == 2, halide_error_bad_dimensions("Input buffer elemindex", elemindex.dimensions, 2))
 assert(fij_o.type == (uint32)81922, halide_error_bad_type("Output buffer fij_o", fij_o.type, (uint32)81922))
 assert(fij_o.dimensions == 2, halide_error_bad_dimensions("Output buffer fij_o", fij_o.dimensions, 2))
 assert(pa4.type == (uint32)73728, halide_error_bad_type("Input buffer pa4", pa4.type, (uint32)73728))
 assert(pa4.dimensions == 1, halide_error_bad_dimensions("Input buffer pa4", pa4.dimensions, 1))
 assert(pb4.type == (uint32)73728, halide_error_bad_type("Input buffer pb4", pb4.type, (uint32)73728))
 assert(pb4.dimensions == 2, halide_error_bad_dimensions("Input buffer pb4", pb4.dimensions, 2))
 assert(pc3.type == (uint32)73728, halide_error_bad_type("Input buffer pc3", pc3.type, (uint32)73728))
 assert(pc3.dimensions == 1, halide_error_bad_dimensions("Input buffer pc3", pc3.dimensions, 1))
 assert(pc4.type == (uint32)73728, halide_error_bad_type("Input buffer pc4", pc4.type, (uint32)73728))
 assert(pc4.dimensions == 1, halide_error_bad_dimensions("Input buffer pc4", pc4.dimensions, 1))
 assert(pn3.type == (uint32)73728, halide_error_bad_type("Input buffer pn3", pn3.type, (uint32)73728))
 assert(pn3.dimensions == 1, halide_error_bad_dimensions("Input buffer pn3", pn3.dimensions, 1))
 assert(pq.type == (uint32)73728, halide_error_bad_type("Input buffer pq", pq.type, (uint32)73728))
 assert(pq.dimensions == 1, halide_error_bad_dimensions("Input buffer pq", pq.dimensions, 1))
 assert(rijs.type == (uint32)81922, halide_error_bad_type("Input buffer rijs", rijs.type, (uint32)81922))
 assert(rijs.dimensions == 2, halide_error_bad_dimensions("Input buffer rijs", rijs.dimensions, 2))
 assert(ti.type == (uint32)73728, halide_error_bad_type("Input buffer ti", ti.type, (uint32)73728))
 assert(ti.dimensions == 1, halide_error_bad_dimensions("Input buffer ti", ti.dimensions, 1))
 assert(tj.type == (uint32)73728, halide_error_bad_type("Input buffer tj", tj.type, (uint32)73728))
 assert(tj.dimensions == 1, halide_error_bad_dimensions("Input buffer tj", tj.dimensions, 1))
 assert((Phi.min.0 <= 0) && (ns <= (Phi.extent.0 + Phi.min.0)), halide_error_access_out_of_bounds("Input buffer Phi", 0, 0, ns + -1, Phi.min.0, (Phi.extent.0 + Phi.min.0) + -1))
 assert(0 <= Phi.extent.0, halide_error_buffer_extents_negative("Input buffer Phi", 0, Phi.extent.0))
 assert((Phi.min.1 <= 0) && (rbf$1.s1.i.max.s <= (Phi.extent.1 + Phi.min.1)), halide_error_access_out_of_bounds("Input buffer Phi", 1, 0, rbf$1.s1.i.max.s + -1, Phi.min.1, (Phi.extent.1 + Phi.min.1) + -1))
 assert(0 <= Phi.extent.1, halide_error_buffer_extents_negative("Input buffer Phi", 1, Phi.extent.1))
 assert((besselparams.min.0 <= 0) && (nbesselpars <= (besselparams.extent.0 + besselparams.min.0)), halide_error_access_out_of_bounds("Input buffer besselparams", 0, 0, nbesselpars + -1, besselparams.min.0, (besselparams.extent.0 + besselparams.min.0) + -1))
 assert(0 <= besselparams.extent.0, halide_error_buffer_extents_negative("Input buffer besselparams", 0, besselparams.extent.0))
 assert((coeff2.min.0 <= 0) && ((max(npairs, 2) + -1) <= (coeff2.extent.0 + coeff2.min.0)), halide_error_access_out_of_bounds("Input buffer coeff2", 0, 0, max(npairs, 2) + -2, coeff2.min.0, (coeff2.extent.0 + coeff2.min.0) + -1))
 assert(0 <= coeff2.extent.0, halide_error_buffer_extents_negative("Input buffer coeff2", 0, coeff2.extent.0))
 assert((coeff2.min.1 <= 0) && (nrbf2 <= (coeff2.extent.1 + coeff2.min.1)), halide_error_access_out_of_bounds("Input buffer coeff2", 1, 0, nrbf2 + -1, coeff2.min.1, (coeff2.extent.1 + coeff2.min.1) + -1))
 assert(0 <= coeff2.extent.1, halide_error_buffer_extents_negative("Input buffer coeff2", 1, coeff2.extent.1))
 assert(let t3529 = max(coeff2.min.2.required.s, 1) in (((coeff2.min.2 + 1) <= t3529) && (t3529 <= (coeff2.extent.2 + coeff2.min.2))), let t3530 = max(coeff2.min.2.required.s, 1) in halide_error_access_out_of_bounds("Input buffer coeff2", 2, t3530 + -1, t3530 + -1, coeff2.min.2, (coeff2.extent.2 + coeff2.min.2) + -1))
 assert(0 <= coeff2.extent.2, halide_error_buffer_extents_negative("Input buffer coeff2", 2, coeff2.extent.2))
 assert((coeff23.min.0 <= 0) && (n23 <= (coeff23.extent.0 + coeff23.min.0)), halide_error_access_out_of_bounds("Input buffer coeff23", 0, 0, n23 + -1, coeff23.min.0, (coeff23.extent.0 + coeff23.min.0) + -1))
 assert(0 <= coeff23.extent.0, halide_error_buffer_extents_negative("Input buffer coeff23", 0, coeff23.extent.0))
 assert((coeff23.min.1 <= 0) && (n32 <= (coeff23.extent.1 + coeff23.min.1)), halide_error_access_out_of_bounds("Input buffer coeff23", 1, 0, n32 + -1, coeff23.min.1, (coeff23.extent.1 + coeff23.min.1) + -1))
 assert(0 <= coeff23.extent.1, halide_error_buffer_extents_negative("Input buffer coeff23", 1, coeff23.extent.1))
 assert(let t3531 = max(coeff23.min.2.required.s, 1) in (((coeff23.min.2 + 1) <= t3531) && ((t3531 + coeff23.extent.2.required.s) <= (coeff23.extent.2 + coeff23.min.2))), let t3532 = max(coeff23.min.2.required.s, 1) in halide_error_access_out_of_bounds("Input buffer coeff23", 2, t3532 + -1, (t3532 + coeff23.extent.2.required.s) + -1, coeff23.min.2, (coeff23.extent.2 + coeff23.min.2) + -1))
 assert(0 <= coeff23.extent.2, halide_error_buffer_extents_negative("Input buffer coeff23", 2, coeff23.extent.2))
 assert((coeff3.min.0 <= 0) && (nabf3 <= (coeff3.extent.0 + coeff3.min.0)), halide_error_access_out_of_bounds("Input buffer coeff3", 0, 0, nabf3 + -1, coeff3.min.0, (coeff3.extent.0 + coeff3.min.0) + -1))
 assert(0 <= coeff3.extent.0, halide_error_buffer_extents_negative("Input buffer coeff3", 0, coeff3.extent.0))
 assert((coeff3.min.1 <= 0) && (nrbf3 <= (coeff3.extent.1 + coeff3.min.1)), halide_error_access_out_of_bounds("Input buffer coeff3", 1, 0, nrbf3 + -1, coeff3.min.1, (coeff3.extent.1 + coeff3.min.1) + -1))
 assert(0 <= coeff3.extent.1, halide_error_buffer_extents_negative("Input buffer coeff3", 1, coeff3.extent.1))
 assert((coeff3.min.2 <= 0) && (max(coeff3.extent.2.required.s, 1) <= (coeff3.extent.2 + coeff3.min.2)), halide_error_access_out_of_bounds("Input buffer coeff3", 2, 0, max(coeff3.extent.2.required.s, 1) + -1, coeff3.min.2, (coeff3.extent.2 + coeff3.min.2) + -1))
 assert(0 <= coeff3.extent.2, halide_error_buffer_extents_negative("Input buffer coeff3", 2, coeff3.extent.2))
 assert(let t3533 = max(coeff3.min.3.required.s, 1) in (((coeff3.min.3 + 1) <= t3533) && (t3533 <= (coeff3.extent.3 + coeff3.min.3))), let t3534 = max(coeff3.min.3.required.s, 1) in halide_error_access_out_of_bounds("Input buffer coeff3", 3, t3534 + -1, t3534 + -1, coeff3.min.3, (coeff3.extent.3 + coeff3.min.3) + -1))
 assert(0 <= coeff3.extent.3, halide_error_buffer_extents_negative("Input buffer coeff3", 3, coeff3.extent.3))
 assert((coeff33.min.0 <= 0) && (coeff33.extent.0.required <= (coeff33.extent.0 + coeff33.min.0)), halide_error_access_out_of_bounds("Input buffer coeff33", 0, 0, coeff33.extent.0.required + -1, coeff33.min.0, (coeff33.extent.0 + coeff33.min.0) + -1))
 assert(0 <= coeff33.extent.0, halide_error_buffer_extents_negative("Input buffer coeff33", 0, coeff33.extent.0))
 assert(let t3535 = max(coeff33.min.1.required.s, 1) in (((coeff33.min.1 + 1) <= t3535) && (t3535 <= (coeff33.extent.1 + coeff33.min.1))), let t3536 = max(coeff33.min.1.required.s, 1) in halide_error_access_out_of_bounds("Input buffer coeff33", 1, t3536 + -1, t3536 + -1, coeff33.min.1, (coeff33.extent.1 + coeff33.min.1) + -1))
 assert(0 <= coeff33.extent.1, halide_error_buffer_extents_negative("Input buffer coeff33", 1, coeff33.extent.1))
 assert((coeff4.min.0 <= 0) && (nabf4 <= (coeff4.extent.0 + coeff4.min.0)), halide_error_access_out_of_bounds("Input buffer coeff4", 0, 0, nabf4 + -1, coeff4.min.0, (coeff4.extent.0 + coeff4.min.0) + -1))
 assert(0 <= coeff4.extent.0, halide_error_buffer_extents_negative("Input buffer coeff4", 0, coeff4.extent.0))
 assert((coeff4.min.1 <= 0) && (nrbf4 <= (coeff4.extent.1 + coeff4.min.1)), halide_error_access_out_of_bounds("Input buffer coeff4", 1, 0, nrbf4 + -1, coeff4.min.1, (coeff4.extent.1 + coeff4.min.1) + -1))
 assert(0 <= coeff4.extent.1, halide_error_buffer_extents_negative("Input buffer coeff4", 1, coeff4.extent.1))
 assert((coeff4.min.2 <= 0) && ((coeff4.extent.2.required.s + 1) <= (coeff4.extent.2 + coeff4.min.2)), halide_error_access_out_of_bounds("Input buffer coeff4", 2, 0, coeff4.extent.2.required.s, coeff4.min.2, (coeff4.extent.2 + coeff4.min.2) + -1))
 assert(0 <= coeff4.extent.2, halide_error_buffer_extents_negative("Input buffer coeff4", 2, coeff4.extent.2))
 assert((coeff4.min.3 <= coeff4.min.3.required) && ((coeff4.min.3.required + 1) <= (coeff4.extent.3 + coeff4.min.3)), halide_error_access_out_of_bounds("Input buffer coeff4", 3, coeff4.min.3.required, coeff4.min.3.required, coeff4.min.3, (coeff4.extent.3 + coeff4.min.3) + -1))
 assert(0 <= coeff4.extent.3, halide_error_buffer_extents_negative("Input buffer coeff4", 3, coeff4.extent.3))
 assert(let t3537 = (elemindex.extent.0 + elemindex.min.0) in ((elemindex.min.0 <= elemindex.min.0.required) && (select(nelements == 1, t3537, elemindex.extent.0.required + elemindex.min.0.required) <= t3537)), let t3538 = (elemindex.extent.0 + elemindex.min.0) in halide_error_access_out_of_bounds("Input buffer elemindex", 0, elemindex.min.0.required, select(nelements == 1, t3538, elemindex.extent.0.required + elemindex.min.0.required) + -1, elemindex.min.0, t3538 + -1))
 assert(0 <= elemindex.extent.0, halide_error_buffer_extents_negative("Input buffer elemindex", 0, elemindex.extent.0))
 assert(let t3539 = (elemindex.extent.1 + elemindex.min.1) in ((elemindex.min.1 <= elemindex.min.1.required) && (select(nelements == 1, t3539, elemindex.extent.1.required + elemindex.min.1.required) <= t3539)), let t3540 = (elemindex.extent.1 + elemindex.min.1) in halide_error_access_out_of_bounds("Input buffer elemindex", 1, elemindex.min.1.required, select(nelements == 1, t3540, elemindex.extent.1.required + elemindex.min.1.required) + -1, elemindex.min.1, t3540 + -1))
 assert(0 <= elemindex.extent.1, halide_error_buffer_extents_negative("Input buffer elemindex", 1, elemindex.extent.1))
 assert((fij_o.min.0 <= 0) && (npairs <= (fij_o.extent.0 + fij_o.min.0)), halide_error_access_out_of_bounds("Output buffer fij_o", 0, 0, npairs + -1, fij_o.min.0, (fij_o.extent.0 + fij_o.min.0) + -1))
 assert(0 <= fij_o.extent.0, halide_error_buffer_extents_negative("Output buffer fij_o", 0, fij_o.extent.0))
 assert((fij_o.min.1 <= 0) && (3 <= (fij_o.extent.1 + fij_o.min.1)), halide_error_access_out_of_bounds("Output buffer fij_o", 1, 0, 2, fij_o.min.1, (fij_o.extent.1 + fij_o.min.1) + -1))
 assert(0 <= fij_o.extent.1, halide_error_buffer_extents_negative("Output buffer fij_o", 1, fij_o.extent.1))
 assert((pa4.min.0 <= 0) && ((nabf4 + 1) <= (pa4.extent.0 + pa4.min.0)), halide_error_access_out_of_bounds("Input buffer pa4", 0, 0, nabf4, pa4.min.0, (pa4.extent.0 + pa4.min.0) + -1))
 assert(0 <= pa4.extent.0, halide_error_buffer_extents_negative("Input buffer pa4", 0, pa4.extent.0))
 assert((pb4.min.0 <= 0) && (q4 <= (pb4.extent.0 + pb4.min.0)), halide_error_access_out_of_bounds("Input buffer pb4", 0, 0, q4 + -1, pb4.min.0, (pb4.extent.0 + pb4.min.0) + -1))
 assert(0 <= pb4.extent.0, halide_error_buffer_extents_negative("Input buffer pb4", 0, pb4.extent.0))
 assert((pb4.min.1 <= 0) && (3 <= (pb4.extent.1 + pb4.min.1)), halide_error_access_out_of_bounds("Input buffer pb4", 1, 0, 2, pb4.min.1, (pb4.extent.1 + pb4.min.1) + -1))
 assert(0 <= pb4.extent.1, halide_error_buffer_extents_negative("Input buffer pb4", 1, pb4.extent.1))
 assert((pc3.min.0 <= 0) && (k3 <= (pc3.extent.0 + pc3.min.0)), halide_error_access_out_of_bounds("Input buffer pc3", 0, 0, k3 + -1, pc3.min.0, (pc3.extent.0 + pc3.min.0) + -1))
 assert(0 <= pc3.extent.0, halide_error_buffer_extents_negative("Input buffer pc3", 0, pc3.extent.0))
 assert((pc4.min.0 <= 0) && (q4 <= (pc4.extent.0 + pc4.min.0)), halide_error_access_out_of_bounds("Input buffer pc4", 0, 0, q4 + -1, pc4.min.0, (pc4.extent.0 + pc4.min.0) + -1))
 assert(0 <= pc4.extent.0, halide_error_buffer_extents_negative("Input buffer pc4", 0, pc4.extent.0))
 assert((pn3.min.0 <= 0) && ((nabf3 + 1) <= (pn3.extent.0 + pn3.min.0)), halide_error_access_out_of_bounds("Input buffer pn3", 0, 0, nabf3, pn3.min.0, (pn3.extent.0 + pn3.min.0) + -1))
 assert(0 <= pn3.extent.0, halide_error_buffer_extents_negative("Input buffer pn3", 0, pn3.extent.0))
 assert(let t3541 = min(k3, 0) in (((pq.min.0 + -1) <= t3541) && (((t3541 + pq.extent.0.required.s) + 2) <= (pq.extent.0 + pq.min.0))), let t3542 = min(k3, 0) in halide_error_access_out_of_bounds("Input buffer pq", 0, t3542 + 1, (t3542 + pq.extent.0.required.s) + 1, pq.min.0, (pq.extent.0 + pq.min.0) + -1))
 assert(0 <= pq.extent.0, halide_error_buffer_extents_negative("Input buffer pq", 0, pq.extent.0))
 assert((rijs.min.0 <= 0) && (3 <= (rijs.extent.0 + rijs.min.0)), halide_error_access_out_of_bounds("Input buffer rijs", 0, 0, 2, rijs.min.0, (rijs.extent.0 + rijs.min.0) + -1))
 assert(0 <= rijs.extent.0, halide_error_buffer_extents_negative("Input buffer rijs", 0, rijs.extent.0))
 assert((rijs.min.1 <= 0) && (npairs <= (rijs.extent.1 + rijs.min.1)), halide_error_access_out_of_bounds("Input buffer rijs", 1, 0, npairs + -1, rijs.min.1, (rijs.extent.1 + rijs.min.1) + -1))
 assert(0 <= rijs.extent.1, halide_error_buffer_extents_negative("Input buffer rijs", 1, rijs.extent.1))
 assert((ti.min.0 <= 0) && (1 <= (ti.extent.0 + ti.min.0)), halide_error_access_out_of_bounds("Input buffer ti", 0, 0, 0, ti.min.0, (ti.extent.0 + ti.min.0) + -1))
 assert(0 <= ti.extent.0, halide_error_buffer_extents_negative("Input buffer ti", 0, ti.extent.0))
 assert((tj.min.0 <= 0) && (npairs <= (tj.extent.0 + tj.min.0)), halide_error_access_out_of_bounds("Input buffer tj", 0, 0, npairs + -1, tj.min.0, (tj.extent.0 + tj.min.0) + -1))
 assert(0 <= tj.extent.0, halide_error_buffer_extents_negative("Input buffer tj", 0, tj.extent.0))
 assert(Phi.stride.0 == 1, halide_error_constraint_violated("Phi.stride.0", Phi.stride.0, "1", 1))
 assert(Phi.min.0 == 0, halide_error_constraint_violated("Phi.min.0", Phi.min.0, "0", 0))
 assert(Phi.extent.0 == ns, halide_error_constraint_violated("Phi.extent.0", Phi.extent.0, "ns", ns))
 assert(Phi.stride.1 == ns, halide_error_constraint_violated("Phi.stride.1", Phi.stride.1, "ns", ns))
 assert(Phi.min.1 == 0, halide_error_constraint_violated("Phi.min.1", Phi.min.1, "0", 0))
 assert(Phi.extent.1 == ns, halide_error_constraint_violated("Phi.extent.1", Phi.extent.1, "ns", ns))
 assert(besselparams.stride.0 == 1, halide_error_constraint_violated("besselparams.stride.0", besselparams.stride.0, "1", 1))
 assert(besselparams.min.0 == 0, halide_error_constraint_violated("besselparams.min.0", besselparams.min.0, "0", 0))
 assert(besselparams.extent.0 == nbesselpars, halide_error_constraint_violated("besselparams.extent.0", besselparams.extent.0, "nbesselpars", nbesselpars))
 assert(coeff2.stride.0 == nrbf2, halide_error_constraint_violated("coeff2.stride.0", coeff2.stride.0, "nrbf2", nrbf2))
 assert(coeff2.min.0 == 0, halide_error_constraint_violated("coeff2.min.0", coeff2.min.0, "0", 0))
 assert(coeff2.extent.0 == npairs, halide_error_constraint_violated("coeff2.extent.0", coeff2.extent.0, "npairs", npairs))
 assert(coeff2.stride.1 == 1, halide_error_constraint_violated("coeff2.stride.1", coeff2.stride.1, "1", 1))
 assert(coeff2.min.1 == 0, halide_error_constraint_violated("coeff2.min.1", coeff2.min.1, "0", 0))
 assert(coeff2.extent.1 == nrbf2, halide_error_constraint_violated("coeff2.extent.1", coeff2.extent.1, "nrbf2", nrbf2))
 assert(coeff2.stride.2 == (npairs*nrbf2), halide_error_constraint_violated("coeff2.stride.2", coeff2.stride.2, "(nrbf2*npairs)", npairs*nrbf2))
 assert(coeff2.min.2 == 0, halide_error_constraint_violated("coeff2.min.2", coeff2.min.2, "0", 0))
 assert(coeff2.extent.2 == nelements, halide_error_constraint_violated("coeff2.extent.2", coeff2.extent.2, "nelements", nelements))
 assert(coeff23.stride.0 == 1, halide_error_constraint_violated("coeff23.stride.0", coeff23.stride.0, "1", 1))
 assert(coeff23.min.0 == 0, halide_error_constraint_violated("coeff23.min.0", coeff23.min.0, "0", 0))
 assert(coeff23.extent.0 == n23, halide_error_constraint_violated("coeff23.extent.0", coeff23.extent.0, "n23", n23))
 assert(coeff23.stride.1 == n23, halide_error_constraint_violated("coeff23.stride.1", coeff23.stride.1, "n23", n23))
 assert(coeff23.min.1 == 0, halide_error_constraint_violated("coeff23.min.1", coeff23.min.1, "0", 0))
 assert(coeff23.extent.1 == n32, halide_error_constraint_violated("coeff23.extent.1", coeff23.extent.1, "n32", n32))
 assert(coeff23.stride.2 == (n23*n32), halide_error_constraint_violated("coeff23.stride.2", coeff23.stride.2, "(n23*n32)", n23*n32))
 assert(coeff23.min.2 == 0, halide_error_constraint_violated("coeff23.min.2", coeff23.min.2, "0", 0))
 assert(coeff23.extent.2 == nelements, halide_error_constraint_violated("coeff23.extent.2", coeff23.extent.2, "nelements", nelements))
 assert(coeff3.stride.0 == 1, halide_error_constraint_violated("coeff3.stride.0", coeff3.stride.0, "1", 1))
 assert(coeff33.stride.0 == 1, halide_error_constraint_violated("coeff33.stride.0", coeff33.stride.0, "1", 1))
 assert(coeff33.min.0 == 0, halide_error_constraint_violated("coeff33.min.0", coeff33.min.0, "0", 0))
 assert(coeff33.extent.0 == (((n33 + 1)*n33)/2), halide_error_constraint_violated("coeff33.extent.0", coeff33.extent.0, "((n33*(n33 + 1))/2)", ((n33 + 1)*n33)/2))
 assert(coeff33.stride.1 == (((n33 + 1)*n33)/2), halide_error_constraint_violated("coeff33.stride.1", coeff33.stride.1, "((n33*(n33 + 1))/2)", ((n33 + 1)*n33)/2))
 assert(coeff33.min.1 == 0, halide_error_constraint_violated("coeff33.min.1", coeff33.min.1, "0", 0))
 assert(coeff33.extent.1 == nelements, halide_error_constraint_violated("coeff33.extent.1", coeff33.extent.1, "nelements", nelements))
 assert(coeff4.stride.0 == 1, halide_error_constraint_violated("coeff4.stride.0", coeff4.stride.0, "1", 1))
 assert(elemindex.stride.0 == 1, halide_error_constraint_violated("elemindex.stride.0", elemindex.stride.0, "1", 1))
 assert(fij_o.stride.0 == 3, halide_error_constraint_violated("fij_o.stride.0", fij_o.stride.0, "3", 3))
 assert(fij_o.min.0 == 0, halide_error_constraint_violated("fij_o.min.0", fij_o.min.0, "0", 0))
 assert(fij_o.extent.0 == npairs, halide_error_constraint_violated("fij_o.extent.0", fij_o.extent.0, "npairs", npairs))
 assert(fij_o.stride.1 == 1, halide_error_constraint_violated("fij_o.stride.1", fij_o.stride.1, "1", 1))
 assert(fij_o.min.1 == 0, halide_error_constraint_violated("fij_o.min.1", fij_o.min.1, "0", 0))
 assert(fij_o.extent.1 == 3, halide_error_constraint_violated("fij_o.extent.1", fij_o.extent.1, "3", 3))
 assert(pa4.stride.0 == 1, halide_error_constraint_violated("pa4.stride.0", pa4.stride.0, "1", 1))
 assert(pb4.stride.0 == 1, halide_error_constraint_violated("pb4.stride.0", pb4.stride.0, "1", 1))
 assert(pc3.stride.0 == 1, halide_error_constraint_violated("pc3.stride.0", pc3.stride.0, "1", 1))
 assert(pc4.stride.0 == 1, halide_error_constraint_violated("pc4.stride.0", pc4.stride.0, "1", 1))
 assert(pn3.stride.0 == 1, halide_error_constraint_violated("pn3.stride.0", pn3.stride.0, "1", 1))
 assert(pq.stride.0 == 1, halide_error_constraint_violated("pq.stride.0", pq.stride.0, "1", 1))
 assert(rijs.stride.0 == 1, halide_error_constraint_violated("rijs.stride.0", rijs.stride.0, "1", 1))
 assert(rijs.min.0 == 0, halide_error_constraint_violated("rijs.min.0", rijs.min.0, "0", 0))
 assert(rijs.extent.0 == 3, halide_error_constraint_violated("rijs.extent.0", rijs.extent.0, "3", 3))
 assert(rijs.stride.1 == 3, halide_error_constraint_violated("rijs.stride.1", rijs.stride.1, "3", 3))
 assert(rijs.min.1 == 0, halide_error_constraint_violated("rijs.min.1", rijs.min.1, "0", 0))
 assert(rijs.extent.1 == npairs, halide_error_constraint_violated("rijs.extent.1", rijs.extent.1, "npairs", npairs))
 assert(ti.stride.0 == 1, halide_error_constraint_violated("ti.stride.0", ti.stride.0, "1", 1))
 assert(tj.stride.0 == 1, halide_error_constraint_violated("tj.stride.0", tj.stride.0, "1", 1))
 let Phi.total_extent.1 = int64(ns)*int64(ns)
 let coeff2.total_extent.1 = int64(nrbf2)*int64(npairs)
 let coeff2.total_extent.2 = coeff2.total_extent.1*int64(nelements)
 let coeff23.total_extent.1 = int64(n32)*int64(n23)
 let coeff23.total_extent.2 = coeff23.total_extent.1*int64(nelements)
 let coeff3.total_extent.1 = int64(coeff3.extent.1)*int64(coeff3.extent.0)
 let coeff3.total_extent.2 = coeff3.total_extent.1*int64(coeff3.extent.2)
 let coeff3.total_extent.3 = coeff3.total_extent.2*int64(coeff3.extent.3)
 let coeff33.total_extent.1 = int64(nelements)*int64(coeff33.extent.0)
 let coeff4.total_extent.1 = int64(coeff4.extent.1)*int64(coeff4.extent.0)
 let coeff4.total_extent.2 = coeff4.total_extent.1*int64(coeff4.extent.2)
 let coeff4.total_extent.3 = coeff4.total_extent.2*int64(coeff4.extent.3)
 let elemindex.total_extent.1 = int64(elemindex.extent.1)*int64(elemindex.extent.0)
 let pb4.total_extent.1 = int64(pb4.extent.1)*int64(pb4.extent.0)
 assert((uint64)abs(int64(ns)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("Phi", (uint64)abs(int64(ns)), (uint64)2147483647))
 assert((uint64)abs(Phi.total_extent.1) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("Phi", (uint64)abs(Phi.total_extent.1), (uint64)2147483647))
 assert(Phi.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("Phi", Phi.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(nbesselpars)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("besselparams", (uint64)abs(int64(nbesselpars)), (uint64)2147483647))
 assert((uint64)abs(int64(npairs)*int64(nrbf2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff2", (uint64)abs(int64(npairs)*int64(nrbf2)), (uint64)2147483647))
 assert((uint64)abs(int64(nrbf2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff2", (uint64)abs(int64(nrbf2)), (uint64)2147483647))
 assert(coeff2.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff2", coeff2.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(nelements)*int64(coeff2.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff2", (uint64)abs(int64(nelements)*int64(coeff2.stride.2)), (uint64)2147483647))
 assert(coeff2.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff2", coeff2.total_extent.2, (int64)2147483647))
 assert((uint64)abs(int64(n23)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff23", (uint64)abs(int64(n23)), (uint64)2147483647))
 assert((uint64)abs(coeff23.total_extent.1) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff23", (uint64)abs(coeff23.total_extent.1), (uint64)2147483647))
 assert(coeff23.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff23", coeff23.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(nelements)*int64(coeff23.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff23", (uint64)abs(int64(nelements)*int64(coeff23.stride.2)), (uint64)2147483647))
 assert(coeff23.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff23", coeff23.total_extent.2, (int64)2147483647))
 assert(uint64(coeff3.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff3", uint64(coeff3.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(coeff3.extent.1)*int64(coeff3.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff3", (uint64)abs(int64(coeff3.extent.1)*int64(coeff3.stride.1)), (uint64)2147483647))
 assert(coeff3.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff3", coeff3.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(coeff3.extent.2)*int64(coeff3.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff3", (uint64)abs(int64(coeff3.extent.2)*int64(coeff3.stride.2)), (uint64)2147483647))
 assert(coeff3.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff3", coeff3.total_extent.2, (int64)2147483647))
 assert((uint64)abs(int64(coeff3.extent.3)*int64(coeff3.stride.3)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff3", (uint64)abs(int64(coeff3.extent.3)*int64(coeff3.stride.3)), (uint64)2147483647))
 assert(coeff3.total_extent.3 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff3", coeff3.total_extent.3, (int64)2147483647))
 assert(uint64(coeff33.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff33", uint64(coeff33.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(nelements)*int64(coeff33.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff33", (uint64)abs(int64(nelements)*int64(coeff33.stride.1)), (uint64)2147483647))
 assert(coeff33.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff33", coeff33.total_extent.1, (int64)2147483647))
 assert(uint64(coeff4.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff4", uint64(coeff4.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(coeff4.extent.1)*int64(coeff4.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff4", (uint64)abs(int64(coeff4.extent.1)*int64(coeff4.stride.1)), (uint64)2147483647))
 assert(coeff4.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff4", coeff4.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(coeff4.extent.2)*int64(coeff4.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff4", (uint64)abs(int64(coeff4.extent.2)*int64(coeff4.stride.2)), (uint64)2147483647))
 assert(coeff4.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff4", coeff4.total_extent.2, (int64)2147483647))
 assert((uint64)abs(int64(coeff4.extent.3)*int64(coeff4.stride.3)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("coeff4", (uint64)abs(int64(coeff4.extent.3)*int64(coeff4.stride.3)), (uint64)2147483647))
 assert(coeff4.total_extent.3 <= (int64)2147483647, halide_error_buffer_extents_too_large("coeff4", coeff4.total_extent.3, (int64)2147483647))
 assert(uint64(elemindex.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("elemindex", uint64(elemindex.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(elemindex.extent.1)*int64(elemindex.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("elemindex", (uint64)abs(int64(elemindex.extent.1)*int64(elemindex.stride.1)), (uint64)2147483647))
 assert(elemindex.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("elemindex", elemindex.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(npairs)*(int64)3) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("fij_o", (uint64)abs(int64(npairs)*(int64)3), (uint64)2147483647))
 assert(int64(npairs) <= (int64)715827882, halide_error_buffer_extents_too_large("fij_o", int64(npairs)*(int64)3, (int64)2147483647))
 assert(uint64(pa4.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pa4", uint64(pa4.extent.0), (uint64)2147483647))
 assert(uint64(pb4.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pb4", uint64(pb4.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(pb4.extent.1)*int64(pb4.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pb4", (uint64)abs(int64(pb4.extent.1)*int64(pb4.stride.1)), (uint64)2147483647))
 assert(pb4.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("pb4", pb4.total_extent.1, (int64)2147483647))
 assert(uint64(pc3.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pc3", uint64(pc3.extent.0), (uint64)2147483647))
 assert(uint64(pc4.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pc4", uint64(pc4.extent.0), (uint64)2147483647))
 assert(uint64(pn3.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pn3", uint64(pn3.extent.0), (uint64)2147483647))
 assert(uint64(pq.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pq", uint64(pq.extent.0), (uint64)2147483647))
 assert(uint64(ti.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("ti", uint64(ti.extent.0), (uint64)2147483647))
 assert(uint64(tj.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("tj", uint64(tj.extent.0), (uint64)2147483647))
 assert(!Phi.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer Phi"))
 assert(!besselparams.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer besselparams"))
 assert(!coeff2.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer coeff2"))
 assert(!coeff23.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer coeff23"))
 assert(!coeff3.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer coeff3"))
 assert(!coeff33.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer coeff33"))
 assert(!coeff4.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer coeff4"))
 assert(!e3_o.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer e3_o"))
 assert(!e_o.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer e_o"))
 assert(!elemindex.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer elemindex"))
 assert(!fij_o.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer fij_o"))
 assert(!pa4.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer pa4"))
 assert(!pb4.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer pb4"))
 assert(!pc3.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer pc3"))
 assert(!pc4.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer pc4"))
 assert(!pn3.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer pn3"))
 assert(!pq.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer pq"))
 assert(!rijs.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer rijs"))
 assert(!ti.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer ti"))
 assert(!tj.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer tj"))
 assert(Phi != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer Phi"))
 assert(besselparams != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer besselparams"))
 assert(coeff2 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer coeff2"))
 assert(coeff23 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer coeff23"))
 assert(coeff3 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer coeff3"))
 assert(coeff33 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer coeff33"))
 assert(coeff4 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer coeff4"))
 assert(e3_o != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer e3_o"))
 assert(e_o != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer e_o"))
 assert((elemindex != (void *)reinterpret((uint64)0)) || (nelements == 1), halide_error_host_is_null("Input buffer elemindex"))
 assert(fij_o != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer fij_o"))
 assert(pa4 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer pa4"))
 assert(pb4 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer pb4"))
 assert(pc3 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer pc3"))
 assert(pc4 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer pc4"))
 assert(pn3 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer pn3"))
 assert(pq != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer pq"))
 assert(rijs != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer rijs"))
 assert(ti != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer ti"))
 assert(tj != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer tj"))
 let tm.abfip.extent_realized.s = max(k3*3, k3 + 2)
 allocate tm[float64 * 1 * max(tm.abfip.extent_realized.s, 1) * 4]
 allocate abf4[float64 * npairs * k3 * 4]
 produce abf4 {
  for (abf4.s0.pairindex, 0, npairs) {
   for (abf4.s0.abfi, 0, k3) {
    let tm.s0.abfip.max_1 = max((k3*3) + -1, abf4.s0.abfi)
    produce tm {
     for (tm.s0.abfip, 0, tm.s0.abfip.max_1 + 1) {
      let t2964 = tm.s0.abfip*4
      for (tm.s0.c, 0, 4) {
       tm[t2964 + tm.s0.c] = 0.000000
      }
     }
     tm[0] = 1.000000
     let t2966 = abf4.s0.pairindex*3
     for (tm.s2.r136$x.rebased, 0, k3 + 1) {
      let t2549 = pq[((k3 - pq.min.0) + tm.s2.r136$x.rebased) + 1]
      let t2550 = rijs[t2966 + 2]
      let t2551 = rijs[t2966]
      let t2552 = rijs[t2966 + 1]
      let t2553 = (float64)sqrt_f64((t2550*t2550) + ((t2551*t2551) + (t2552*t2552)))
      tm[(tm.s2.r136$x.rebased*4) + 4] = tm[(max(min(pq[(tm.s2.r136$x.rebased - pq.min.0) + 1], k3*3), 1)*4) + -4]*select(1 < t2549, select(t2549 == 2, (1.000000/t2553)*t2552, select(t2549 < 3, 0.000000, (1.000000/t2553)*t2550)), (1.000000/t2553)*t2551)
     }
     let t2970 = abf4.s0.pairindex*3
     for (tm.s2.r136$x.rebased, 0, k3 + 1) {
      let t2554 = pq[((k3 - pq.min.0) + tm.s2.r136$x.rebased) + 1]
      let t2555 = 1 < t2554
      let t2556.s = min(pq[(tm.s2.r136$x.rebased - pq.min.0) + 1], k3*3)
      let t2557 = rijs[t2970 + 2]
      let t2558 = rijs[t2970]
      let t2559 = rijs[t2970 + 1]
      let t2560 = (float64)sqrt_f64((t2557*t2557) + ((t2558*t2558) + (t2559*t2559)))
      let t2848 = max(t2556.s, 1)
      tm[(tm.s2.r136$x.rebased*4) + 5] = select(t2555, 0.000000, tm[(t2848*4) + -4]) + (tm[(t2848*4) + -3]*select(t2555, select(t2554 == 2, (1.000000/t2560)*t2559, select(t2554 < 3, 0.000000, (1.000000/t2560)*t2557)), (1.000000/t2560)*t2558))
     }
     let t2973 = abf4.s0.pairindex*3
     for (tm.s2.r136$x.rebased, 0, k3 + 1) {
      let t2561 = pq[((k3 - pq.min.0) + tm.s2.r136$x.rebased) + 1]
      let t2562 = t2561 == 2
      let t2563.s = min(pq[(tm.s2.r136$x.rebased - pq.min.0) + 1], k3*3)
      let t2564 = rijs[t2973 + 2]
      let t2565 = rijs[t2973]
      let t2566 = rijs[t2973 + 1]
      let t2567 = (float64)sqrt_f64((t2564*t2564) + ((t2565*t2565) + (t2566*t2566)))
      let t2849 = max(t2563.s, 1)
      tm[(tm.s2.r136$x.rebased*4) + 6] = select(t2562, tm[(t2849*4) + -4], 0.000000) + (tm[(t2849*4) + -2]*select(1 < t2561, select(t2562, (1.000000/t2567)*t2566, select(t2561 < 3, 0.000000, (1.000000/t2567)*t2564)), (1.000000/t2567)*t2565))
     }
     let t2976 = abf4.s0.pairindex*3
     for (tm.s2.r136$x.rebased, 0, k3 + 1) {
      let t2568 = pq[((k3 - pq.min.0) + tm.s2.r136$x.rebased) + 1]
      let t2569 = t2568 < 3
      let t2570.s = min(pq[(tm.s2.r136$x.rebased - pq.min.0) + 1], k3*3)
      let t2571 = rijs[t2976 + 2]
      let t2572 = rijs[t2976]
      let t2573 = rijs[t2976 + 1]
      let t2574 = (float64)sqrt_f64((t2571*t2571) + ((t2572*t2572) + (t2573*t2573)))
      let t2850 = max(t2570.s, 1)
      tm[(tm.s2.r136$x.rebased*4) + 7] = select(t2569, 0.000000, tm[(t2850*4) + -4]) + (tm[(t2850*4) + -1]*select(1 < t2568, select(t2568 == 2, (1.000000/t2574)*t2573, select(t2569, 0.000000, (1.000000/t2574)*t2571)), (1.000000/t2574)*t2572))
     }
    }
    consume tm {
     abf4[((abf4.s0.abfi*npairs) + abf4.s0.pairindex)*4] = tm[abf4.s0.abfi*4]
     let t2575 = rijs[(abf4.s0.pairindex*3) + 2]
     let t2577 = rijs[abf4.s0.pairindex*3]
     let t2578 = rijs[(abf4.s0.pairindex*3) + 1]
     let t2580 = (float64)sqrt_f64((t2575*t2575) + ((t2577*t2577) + (t2578*t2578)))
     let t2581 = (1.000000/t2580)*((1.000000/t2580)*(1.000000/t2580))
     abf4[(((abf4.s0.abfi*npairs) + abf4.s0.pairindex)*4) + 1] = ((tm[(abf4.s0.abfi*4) + 1]*(((t2578*t2578) + (t2575*t2575))*t2581)) - (tm[(abf4.s0.abfi*4) + 2]*((t2577*t2578)*t2581))) - (tm[(abf4.s0.abfi*4) + 3]*((t2575*t2577)*t2581))
     let t2582 = rijs[(abf4.s0.pairindex*3) + 2]
     let t2584 = rijs[abf4.s0.pairindex*3]
     let t2586 = rijs[(abf4.s0.pairindex*3) + 1]
     let t2587 = (float64)sqrt_f64((t2582*t2582) + ((t2584*t2584) + (t2586*t2586)))
     let t2588 = (1.000000/t2587)*((1.000000/t2587)*(1.000000/t2587))
     abf4[(((abf4.s0.abfi*npairs) + abf4.s0.pairindex)*4) + 2] = ((tm[(abf4.s0.abfi*4) + 2]*(((t2584*t2584) + (t2582*t2582))*t2588)) - (tm[(abf4.s0.abfi*4) + 1]*((t2584*t2586)*t2588))) - (tm[(abf4.s0.abfi*4) + 3]*((t2582*t2586)*t2588))
     let t2589 = rijs[abf4.s0.pairindex*3]
     let t2590 = rijs[(abf4.s0.pairindex*3) + 1]
     let t2591 = (t2589*t2589) + (t2590*t2590)
     let t2592 = rijs[(abf4.s0.pairindex*3) + 2]
     let t2593 = (float64)sqrt_f64((t2592*t2592) + t2591)
     let t2594 = (1.000000/t2593)*((1.000000/t2593)*(1.000000/t2593))
     abf4[(((abf4.s0.abfi*npairs) + abf4.s0.pairindex)*4) + 3] = (tm[(abf4.s0.abfi*4) + 3]*(t2591*t2594)) - ((tm[(abf4.s0.abfi*4) + 2]*((t2590*t2592)*t2594)) + (tm[(abf4.s0.abfi*4) + 1]*((t2589*t2592)*t2594)))
    }
   }
  }
 }
 free tm
 allocate abf_f[float64 * adegree * npairs]
 allocate dabf_f[float64 * adegree * npairs * 3]
 produce dabf_f {
  produce abf_f {
   let t2984 = (float64)rcut - (float64)rin
   let t2985 = adegree*npairs
   let t2980 = (float64)exp_f64(-1.000000)
   let t2977 = max(npairs, 0)
   let t2978 = max(adegree, 0)
   let t2979 = 1.000000/t2984
   for (abf_f.s0.fused.pairindex, 0, t2977) {
    let t2991 = abf_f.s0.fused.pairindex*adegree
    let t2988 = 3.000000/(t2980*t2984)
    let t2986 = abf_f.s0.fused.pairindex*3
    let t2990 = (t2985*2) + t2991
    let t2989 = t2985 + t2991
    for (abf_f.s0.fused.basis function index, 0, t2978) {
     let t2595 = rijs[t2986 + 2]
     let t2596 = rijs[t2986]
     let t2597 = rijs[t2986 + 1]
     let t2598 = (float64)sqrt_f64((t2595*t2595) + ((t2596*t2596) + (t2597*t2597)))
     let t2599 = (t2598 - (float64)rin)*t2979
     let t2851 = (t2599*t2599)*t2599
     abf_f[abf_f.s0.fused.basis function index + t2991] = ((float64)exp_f64(-1.000000/(float64)sqrt_f64(((1.000000 - t2851)*(1.000000 - t2851)) + 0.000001))/t2980)*(1.000000/(float64)pow_f64(t2598, float64((abf_f.s0.fused.basis function index + 1))))
     let t2601 = rijs[t2986]
     let t2602 = rijs[t2986 + 2]
     let t2603 = rijs[t2986 + 1]
     let t2604 = (float64)sqrt_f64((t2602*t2602) + ((t2601*t2601) + (t2603*t2603)))
     let t2606 = (t2604 - (float64)rin)*t2979
     let t2609 = let t3543 = ((t2606*t2606)*t2606) in ((1.000000 - t3543)*(1.000000 - t3543))
     let t2611 = (float64)exp_f64(-1.000000/(float64)sqrt_f64(t2609 + 0.000001))
     let t2853 = t2606*t2606
     dabf_f[abf_f.s0.fused.basis function index + t2991] = ((1.000000/t2604)*t2601)*((1.000000/(float64)pow_f64(t2604, float64((abf_f.s0.fused.basis function index + 1))))*(((1.000000/(float64)pow_f64(t2609 + 0.000001, 1.500000))*(((t2853*t2988)*t2611)*((t2606*t2853) + -1.000000))) - ((1.000000/t2604)*((t2611/t2980)*(float64(abf_f.s0.fused.basis function index) + 1.000000)))))
     let t2612 = rijs[t2986 + 1]
     let t2613 = rijs[t2986 + 2]
     let t2614 = rijs[t2986]
     let t2615 = (float64)sqrt_f64((t2613*t2613) + ((t2614*t2614) + (t2612*t2612)))
     let t2617 = (t2615 - (float64)rin)*t2979
     let t2620 = let t3544 = ((t2617*t2617)*t2617) in ((1.000000 - t3544)*(1.000000 - t3544))
     let t2622 = (float64)exp_f64(-1.000000/(float64)sqrt_f64(t2620 + 0.000001))
     let t2855 = t2617*t2617
     dabf_f[abf_f.s0.fused.basis function index + t2989] = ((1.000000/t2615)*t2612)*((1.000000/(float64)pow_f64(t2615, float64((abf_f.s0.fused.basis function index + 1))))*(((1.000000/(float64)pow_f64(t2620 + 0.000001, 1.500000))*(((t2855*t2988)*t2622)*((t2617*t2855) + -1.000000))) - ((1.000000/t2615)*((t2622/t2980)*(float64(abf_f.s0.fused.basis function index) + 1.000000)))))
     let t2623 = rijs[t2986 + 2]
     let t2624 = rijs[t2986]
     let t2625 = rijs[t2986 + 1]
     let t2626 = (float64)sqrt_f64((t2623*t2623) + ((t2624*t2624) + (t2625*t2625)))
     let t2628 = (t2626 - (float64)rin)*t2979
     let t2631 = let t3545 = ((t2628*t2628)*t2628) in ((1.000000 - t3545)*(1.000000 - t3545))
     let t2633 = (float64)exp_f64(-1.000000/(float64)sqrt_f64(t2631 + 0.000001))
     let t2857 = t2628*t2628
     dabf_f[abf_f.s0.fused.basis function index + t2990] = ((1.000000/t2626)*t2623)*((1.000000/(float64)pow_f64(t2626, float64((abf_f.s0.fused.basis function index + 1))))*(((1.000000/(float64)pow_f64(t2631 + 0.000001, 1.500000))*(((t2857*t2988)*t2633)*((t2628*t2857) + -1.000000))) - ((1.000000/t2626)*((t2633/t2980)*(float64(abf_f.s0.fused.basis function index) + 1.000000)))))
    }
   }
  }
 }
 allocate drbf_f[float64 * nbesselpars * bdegree * npairs * 3]
 allocate rbf[float64 * nbesselpars * bdegree * npairs]
 produce rbf {
  produce drbf_f {
   let t2999 = (float64)rcut - (float64)rin
   let t2996 = (float64)exp_f64(-1.000000)
   let t2992 = max(npairs, 0)
   let t2993 = max(nbesselpars, 0)
   let t2994 = max(bdegree, 0)
   let t2995 = 1.000000/t2999
   let t2998 = bdegree*nbesselpars
   for (drbf_f.s0.fused.pairindex, 0, t2992) {
    let t3007 = drbf_f.s0.fused.pairindex*t2998
    let t3008 = 1.000000/t2999
    let t3001 = (float64)sqrt_f64(t3008*2.000000)
    let t3003 = 3.000000/(t2996*t2999)
    let t3005 = (drbf_f.s0.fused.pairindex + npairs)*t2998
    let t3000 = drbf_f.s0.fused.pairindex*3
    let t3006 = ((npairs*t2998)*2) + t3007
    for (drbf_f.s0.fused.basis function param, 0, t2993) {
     let t3009 = drbf_f.s0.fused.basis function param + t3007
     let t3011 = drbf_f.s0.fused.basis function param + t3006
     let t3010 = drbf_f.s0.fused.basis function param + t3005
     for (drbf_f.s0.fused.basis function index, 0, t2994) {
      let t2634 = rijs[t3000]
      let t2635 = rijs[t3000 + 2]
      let t2636 = rijs[t3000 + 1]
      let t2637 = (float64)sqrt_f64((t2635*t2635) + ((t2634*t2634) + (t2636*t2636)))
      let t2639.s = besselparams[drbf_f.s0.fused.basis function param]
      let t2641 = (float64)exp_f64(0.000000 - ((max(t2639.s, 0.001000)*(t2637 - (float64)rin))*t2995))
      let t2642 = (float64)exp_f64(0.000000 - max(t2639.s, 0.001000))
      let t2643 = ((1.000000 - t2641)/(1.000000 - t2642))*float64((drbf_f.s0.fused.basis function index + 1))
      let t2644 = (t2637 - (float64)rin)*t2995
      let t2647 = let t3546 = ((t2644*t2644)*t2644) in ((1.000000 - t3546)*(1.000000 - t3546))
      let t2648 = (float64)exp_f64(-1.000000/(float64)sqrt_f64(t2647 + 0.000001))
      let t2650 = t2648/t2996
      let t2651 = (float64)sin_f64(t2643*3.141593)
      let t2860 = t2637 - (float64)rin
      let t2861 = t2644*t2644
      drbf_f[(drbf_f.s0.fused.basis function index*nbesselpars) + t3009] = ((1.000000/t2637)*t2634)*((t3001/float64((drbf_f.s0.fused.basis function index + 1)))*(((((((max(t2639.s, 0.001000)*t3008)*t2641)/(1.000000 - t2642))*(((float64)cos_f64(t2643*3.141593)*float64((drbf_f.s0.fused.basis function index + 1)))*t2650))*3.141593)/t2860) + (((((1.000000/(float64)pow_f64(t2647 + 0.000001, 1.500000))*(((t2861*t3003)*t2648)*((t2644*t2861) + -1.000000)))*t2651)/t2860) - ((t2650*t2651)/(t2860*t2860)))))
      let t2652 = rijs[t3000 + 1]
      let t2653 = rijs[t3000 + 2]
      let t2654 = rijs[t3000]
      let t2655 = (float64)sqrt_f64((t2653*t2653) + ((t2654*t2654) + (t2652*t2652)))
      let t2657.s = besselparams[drbf_f.s0.fused.basis function param]
      let t2659 = (float64)exp_f64(0.000000 - ((max(t2657.s, 0.001000)*(t2655 - (float64)rin))*t2995))
      let t2660 = (float64)exp_f64(0.000000 - max(t2657.s, 0.001000))
      let t2661 = ((1.000000 - t2659)/(1.000000 - t2660))*float64((drbf_f.s0.fused.basis function index + 1))
      let t2662 = (t2655 - (float64)rin)*t2995
      let t2665 = let t3547 = ((t2662*t2662)*t2662) in ((1.000000 - t3547)*(1.000000 - t3547))
      let t2666 = (float64)exp_f64(-1.000000/(float64)sqrt_f64(t2665 + 0.000001))
      let t2668 = t2666/t2996
      let t2669 = (float64)sin_f64(t2661*3.141593)
      let t2864 = t2655 - (float64)rin
      let t2865 = t2662*t2662
      drbf_f[(drbf_f.s0.fused.basis function index*nbesselpars) + t3010] = ((1.000000/t2655)*t2652)*((t3001/float64((drbf_f.s0.fused.basis function index + 1)))*(((((((max(t2657.s, 0.001000)*t3008)*t2659)/(1.000000 - t2660))*(((float64)cos_f64(t2661*3.141593)*float64((drbf_f.s0.fused.basis function index + 1)))*t2668))*3.141593)/t2864) + (((((1.000000/(float64)pow_f64(t2665 + 0.000001, 1.500000))*(((t2865*t3003)*t2666)*((t2662*t2865) + -1.000000)))*t2669)/t2864) - ((t2668*t2669)/(t2864*t2864)))))
      let t2671 = rijs[t3000 + 2]
      let t2672 = rijs[t3000]
      let t2673 = rijs[t3000 + 1]
      let t2674 = (float64)sqrt_f64((t2671*t2671) + ((t2672*t2672) + (t2673*t2673)))
      let t2676.s = besselparams[drbf_f.s0.fused.basis function param]
      let t2678 = (float64)exp_f64(0.000000 - ((max(t2676.s, 0.001000)*(t2674 - (float64)rin))*t2995))
      let t2679 = (float64)exp_f64(0.000000 - max(t2676.s, 0.001000))
      let t2680 = ((1.000000 - t2678)/(1.000000 - t2679))*float64((drbf_f.s0.fused.basis function index + 1))
      let t2681 = (t2674 - (float64)rin)*t2995
      let t2684 = let t3548 = ((t2681*t2681)*t2681) in ((1.000000 - t3548)*(1.000000 - t3548))
      let t2685 = (float64)exp_f64(-1.000000/(float64)sqrt_f64(t2684 + 0.000001))
      let t2687 = t2685/t2996
      let t2688 = (float64)sin_f64(t2680*3.141593)
      let t2869 = t2674 - (float64)rin
      let t2870 = t2681*t2681
      drbf_f[(drbf_f.s0.fused.basis function index*nbesselpars) + t3011] = ((1.000000/t2674)*t2671)*((t3001/float64((drbf_f.s0.fused.basis function index + 1)))*(((((((max(t2676.s, 0.001000)*t3008)*t2678)/(1.000000 - t2679))*(((float64)cos_f64(t2680*3.141593)*float64((drbf_f.s0.fused.basis function index + 1)))*t2687))*3.141593)/t2869) + (((((1.000000/(float64)pow_f64(t2684 + 0.000001, 1.500000))*(((t2870*t3003)*t2685)*((t2681*t2870) + -1.000000)))*t2688)/t2869) - ((t2687*t2688)/(t2869*t2869)))))
      let t2691.s = besselparams[drbf_f.s0.fused.basis function param]
      let t2692 = rijs[t3000 + 2]
      let t2693 = rijs[t3000]
      let t2694 = rijs[t3000 + 1]
      let t2695.s = (float64)sqrt_f64((t2692*t2692) + ((t2693*t2693) + (t2694*t2694)))
      let t2696 = (t2695.s - (float64)rin)*t2995
      let t2873 = max(t2691.s, 0.001000)
      let t2874 = t2695.s - (float64)rin
      let t2875 = (t2696*t2696)*t2696
      rbf[(drbf_f.s0.fused.basis function index*nbesselpars) + t3009] = ((float64)sin_f64((((1.000000 - (float64)exp_f64(0.000000 - ((t2873*t2874)*t3008)))/(1.000000 - (float64)exp_f64(0.000000 - t2873)))*float64((drbf_f.s0.fused.basis function index + 1)))*3.141593)*((t3001/float64((drbf_f.s0.fused.basis function index + 1)))*((float64)exp_f64(-1.000000/(float64)sqrt_f64(((1.000000 - t2875)*(1.000000 - t2875)) + 0.000001))/t2996)))/t2874
     }
    }
   }
  }
 }
 let rbft.rbf_abf_info.min_realized.s = min(select(bdegree < 0, (nbesselpars + -1)*bdegree, 0), bdegree*nbesselpars)
 let rbft.rbf_abf_info.extent_realized = let t3549 = (bdegree < 0) in (let t3550 = ((nbesselpars + -1)*bdegree) in (let t3551 = (bdegree*nbesselpars) in (max(max(select(t3549, 0, t3550) + bdegree, ns), t3551 + adegree) - min(min(select(t3549, t3550, 0), t3551), 0))))
 allocate rbft[float64 * npairs * rbft.rbf_abf_info.extent_realized * 4]
 produce rbft {
  let t3012 = min(rbft.rbf_abf_info.min_realized.s, 0)
  let t3013 = npairs*rbft.rbf_abf_info.extent_realized
  for (rbft.s0.pairindex, 0, npairs) {
   for (rbft.s0.rbf_abf_info, 0, ns) {
    let t3014 = ((rbft.s0.rbf_abf_info - t3012)*npairs) + rbft.s0.pairindex
    for (rbft.s0.rbfty, 0, 4) {
     rbft[(rbft.s0.rbfty*t3013) + t3014] = 0.000000
    }
   }
  }
  consume rbf {
   let t3016 = min(rbft.rbf_abf_info.min_realized.s, 0)
   for (rbft.s1.r87$z, 0, npairs) {
    let t3017 = (bdegree*nbesselpars)*rbft.s1.r87$z
    for (rbft.s1.r87$w, 0, 3) {
     for (rbft.s1.r87$y, 0, bdegree) {
      let t3019 = rbft.s1.r87$y - t3016
      let t3018 = (nbesselpars*rbft.s1.r87$y) + t3017
      for (rbft.s1.r87$x, 0, nbesselpars) {
       rbft[(((bdegree*rbft.s1.r87$x) + t3019)*npairs) + rbft.s1.r87$z] = rbf[rbft.s1.r87$x + t3018]
      }
     }
    }
   }
  }
  free rbf
  consume abf_f {
   let t3020 = (bdegree*nbesselpars) - min(rbft.rbf_abf_info.min_realized.s, 0)
   for (rbft.s2.r92$x, 0, npairs) {
    for (rbft.s2.r92$y, 0, adegree) {
     let t3023 = ((rbft.s2.r92$y + t3020)*npairs) + rbft.s2.r92$x
     let t3022 = (adegree*rbft.s2.r92$x) + rbft.s2.r92$y
     for (rbft.s2.r92$z, 0, 3) {
      rbft[t3023] = abf_f[t3022]
     }
    }
   }
  }
  free abf_f
  consume drbf_f {
   let t3026 = min(rbft.rbf_abf_info.min_realized.s, 0)
   let t3025 = npairs*rbft.rbf_abf_info.extent_realized
   for (rbft.s3.r87$w, 0, 3) {
    let t3030 = bdegree*nbesselpars
    let t3027 = (npairs*t3030)*rbft.s3.r87$w
    let t3029 = (rbft.s3.r87$w + 1)*t3025
    for (rbft.s3.r87$z, 0, npairs) {
     let t3031 = (rbft.s3.r87$z*t3030) + t3027
     let t3032 = rbft.s3.r87$z + t3029
     for (rbft.s3.r87$y, 0, bdegree) {
      let t3034 = rbft.s3.r87$y - t3026
      let t3033 = (nbesselpars*rbft.s3.r87$y) + t3031
      for (rbft.s3.r87$x, 0, nbesselpars) {
       rbft[(((bdegree*rbft.s3.r87$x) + t3034)*npairs) + t3032] = drbf_f[rbft.s3.r87$x + t3033]
      }
     }
    }
   }
  }
  free drbf_f
  consume dabf_f {
   let t3035 = npairs*rbft.rbf_abf_info.extent_realized
   let t3037 = (bdegree*nbesselpars) - min(rbft.rbf_abf_info.min_realized.s, 0)
   for (rbft.s4.r92$x, 0, npairs) {
    let t3038 = adegree*rbft.s4.r92$x
    let t3040 = rbft.s4.r92$x + t3035
    for (rbft.s4.r92$y, 0, adegree) {
     let t3042 = adegree*npairs
     let t3043 = ((rbft.s4.r92$y + t3037)*npairs) + t3040
     let t3041 = rbft.s4.r92$y + t3038
     for (rbft.s4.r92$z, 0, 3) {
      rbft[(rbft.s4.r92$z*t3035) + t3043] = dabf_f[(rbft.s4.r92$z*t3042) + t3041]
     }
    }
   }
  }
  free dabf_f
 }
 let rbf$1.i.extent_realized = max(max(nrbf3, rbf$1.s1.i.max.s), nrbf2)
 allocate rbf$1[float64 * npairs * rbf$1.i.extent_realized * 4]
 produce rbf$1 {
  let t3044 = npairs*rbf$1.i.extent_realized
  for (rbf$1.s0.c, 0, 4) {
   let t3045 = rbf$1.s0.c*t3044
   for (rbf$1.s0.i, 0, rbf$1.s1.i.max.s) {
    let t3046 = (npairs*rbf$1.s0.i) + t3045
    for (rbf$1.s0.j, 0, npairs) {
     rbf$1[rbf$1.s0.j + t3046] = 0.000000
    }
   }
  }
  consume rbft {
   let t3049 = min(rbft.rbf_abf_info.min_realized.s, 0)
   let t3048 = npairs*rbft.rbf_abf_info.extent_realized
   let t3047 = npairs*rbf$1.i.extent_realized
   for (rbf$1.s1.c, 0, 4) {
    let t3051 = rbf$1.s1.c*t3048
    let t3050 = rbf$1.s1.c*t3047
    for (rbf$1.s1.i, 0, rbf$1.s1.i.max.s) {
     let t3053 = ns*rbf$1.s1.i
     let t3052 = (npairs*rbf$1.s1.i) + t3050
     for (rbf$1.s1.j, 0, npairs) {
      let t3054 = rbf$1.s1.j + t3052
      let t3055 = rbf$1.s1.j + t3051
      for (rbf$1.s1.r110$x, 0, ns) {
       rbf$1[t3054] = rbf$1[t3054] + (Phi[rbf$1.s1.r110$x + t3053]*rbft[((rbf$1.s1.r110$x - t3049)*npairs) + t3055])
      }
     }
    }
   }
  }
  free rbft
 }
 let U.m.extent_realized = max(max(U.s0.m.max.s, nrbf4), nrbf3)
 let U.k.extent_realized = max(max(U.s0.k.max.s, k4), k3)
 allocate U[float64 * npairs * U.k.extent_realized * U.m.extent_realized * 4]
 let sumU.m.extent_realized = max(max(U.s0.m.max.s, nrbf4), nrbf3)
 let sumU.k.extent_realized = max(max(k4, sumU.s0.k.max) + 1, k3)
 let sumU.n.extent_realized = let t3552 = (nelements == 1) in max(max(select(t3552, 0, nelements + -1), max(select(t3552, 0, max(nelements, 1) + -1), nelements + -1)) + 1, nelements)
 allocate sumU[float64 * sumU.n.extent_realized * sumU.k.extent_realized * sumU.m.extent_realized]
 produce sumU {
  produce U {
   let t3063 = max(nelements, 1)
   let t3057 = max(sumU.s0.k.max + 1, U.s0.k.max.s)
   let t3058 = max(nelements, npairs)
   let t3056 = max(U.s0.m.max.s, 0)
   let t3059 = min(npairs, t3063)
   let t3061 = sumU.k.extent_realized*sumU.n.extent_realized
   let t3060 = U.k.extent_realized*npairs
   for (U.s0.fused.m, 0, t3056) {
    let U.s0.fused.k.epilogue.s = min(min(U.s0.k.max.s, t3057), sumU.s0.k.max + 1)
    let t3064 = max(U.s0.fused.k.epilogue.s, 0)
    let t3065 = min(max(t3058, 1), t3059)
    let t3067 = U.s0.fused.m*t3061
    let t3066 = U.s0.fused.m*t3060
    for (U.s0.fused.k, 0, t3064) {
     let t3069 = max(t3065, 0)
     let t3071 = (U.s0.fused.k*sumU.n.extent_realized) + t3067
     let t3070 = (U.s0.fused.k*npairs) + t3066
     for (U.s0.fused.n, 0, t3069) {
      let t3072 = (U.s0.fused.n + t3070)*4
      for (U.s0.crab.rebased, 0, 3) {
       U[U.s0.crab.rebased + t3072] = 0.000000
      }
      sumU[U.s0.fused.n + t3071] = 0.000000
     }
     let U.s0.fused.n.new_max.s = max(t3058, t3065)
     let t3077 = max(t3065, 0)
     let t3073 = max(U.s0.fused.n.new_max.s, 1) - t3077
     let t3076 = (U.s0.fused.k*sumU.n.extent_realized) + (t3067 + t3077)
     let t3075 = (U.s0.fused.k*npairs) + (t3066 + t3077)
     for (U.s0.fused.n.rebased, 0, t3073) {
      if (((U.s0.fused.n.rebased + t3077) + 1) <= npairs) {
       let t3078 = (U.s0.fused.n.rebased + t3075)*4
       for (U.s0.crab.rebased, 0, 3) {
        U[U.s0.crab.rebased + t3078] = 0.000000
       }
      }
      if (((U.s0.fused.n.rebased + t3077) + 1) <= t3063) {
       sumU[U.s0.fused.n.rebased + t3076] = 0.000000
      }
     }
    }
    let U.s0.fused.k.new_max.s = max(U.s0.fused.k.epilogue.s, t3057)
    let t3084 = max(U.s0.fused.k.epilogue.s, 0)
    let t3080 = max(t3058, 1)
    let t3083 = U.s0.fused.m*t3061
    let t3082 = U.s0.fused.m*t3060
    let t3079 = max(U.s0.fused.k.new_max.s, 0) - t3084
    for (U.s0.fused.k.rebased, 0, t3079) {
     let t3089 = U.s0.fused.k.rebased + t3084
     let t3085 = (t3089 + 1) <= U.s0.k.max.s
     let t3087 = t3089 <= sumU.s0.k.max
     let t3088 = (sumU.n.extent_realized*t3089) + t3083
     let t3086 = (npairs*t3089) + t3082
     for (U.s0.fused.n, 0, t3080) {
      if (((U.s0.fused.n + 1) <= npairs) && t3085) {
       let t3090 = (U.s0.fused.n + t3086)*4
       for (U.s0.crab.rebased, 0, 3) {
        U[U.s0.crab.rebased + t3090] = 0.000000
       }
      }
      if (((U.s0.fused.n + 1) <= t3063) && t3087) {
       sumU[U.s0.fused.n + t3088] = 0.000000
      }
     }
    }
   }
   consume rbf$1 {
    consume abf4 {
     let t3095 = npairs*rbf$1.i.extent_realized
     let t3092 = U.k.extent_realized*npairs
     for (U.s1.r171$x, 0, nrbf3) {
      let t3097 = U.s1.r171$x*t3092
      let t3096 = U.s1.r171$x*npairs
      for (U.s1.r171$y, 0, k3) {
       let t3105 = U.s1.r171$y*npairs
       let t3103 = (t3095*3) + t3096
       let t3102 = (t3095*2) + t3096
       let t3101 = t3095 + t3096
       for (U.s1.r171$z, 0, npairs) {
        let t2884 = U.s1.r171$z + t3105
        U[((t3097 + t3105) + U.s1.r171$z)*4] = (abf4[(t2884*4) + 1]*rbf$1[U.s1.r171$z + t3096]) + (rbf$1[U.s1.r171$z + t3101]*abf4[t2884*4])
        let t2887 = U.s1.r171$z + t3105
        U[(((t3097 + t3105) + U.s1.r171$z)*4) + 1] = (abf4[(t2887*4) + 2]*rbf$1[U.s1.r171$z + t3096]) + (rbf$1[U.s1.r171$z + t3102]*abf4[t2887*4])
        let t2890 = U.s1.r171$z + t3105
        U[(((t3097 + t3105) + U.s1.r171$z)*4) + 2] = (abf4[(t2890*4) + 3]*rbf$1[U.s1.r171$z + t3096]) + (rbf$1[U.s1.r171$z + t3103]*abf4[t2890*4])
        U[(((t3097 + t3105) + U.s1.r171$z)*4) + 3] = 0.000000
       }
      }
     }
     if (nelements == 1) {
      let t3106 = sumU.k.extent_realized*sumU.n.extent_realized
      for (sumU.s1.r171$x, 0, nrbf3) {
       let t3107 = sumU.s1.r171$x*t3106
       let t3108 = npairs*sumU.s1.r171$x
       for (sumU.s1.r171$y, 0, k3) {
        let t3110 = npairs*sumU.s1.r171$y
        let t3109 = (sumU.n.extent_realized*sumU.s1.r171$y) + t3107
        for (sumU.s1.r171$z, 0, npairs) {
         sumU[t3109] = sumU[t3109] + (rbf$1[sumU.s1.r171$z + t3108]*abf4[(sumU.s1.r171$z + t3110)*4])
        }
       }
      }
     } else {
      let t3111 = sumU.k.extent_realized*sumU.n.extent_realized
      for (sumU.s1.r171$x, 0, nrbf3) {
       let t3112 = sumU.s1.r171$x*t3111
       let t3113 = npairs*sumU.s1.r171$x
       for (sumU.s1.r171$y, 0, k3) {
        let t3115 = npairs*sumU.s1.r171$y
        let t3114 = (sumU.n.extent_realized*sumU.s1.r171$y) + t3112
        for (sumU.s1.r171$z, 0, npairs) {
         let t2719 = max(min(tj[sumU.s1.r171$z - tj.min.0], nelements), 1) + t3114
         sumU[t2719 + -1] = sumU[t2719 + -1] + (rbf$1[sumU.s1.r171$z + t3113]*abf4[(sumU.s1.r171$z + t3115)*4])
        }
       }
      }
     }
    }
   }
   free abf4
  }
 }
 let cU.ne.extent_realized = let t3553 = max(nelements, 1) in max(select(nelements == 1, 1, t3553), t3553)
 allocate cU[float64 * cU.ne.extent_realized * k3 * nrbf3]
 produce cU {
  let t3116 = max(nelements, 1)
  for (cU.s0.rbfThree, 0, nrbf3) {
   let t3118 = (cU.ne.extent_realized*k3)*cU.s0.rbfThree
   for (cU.s0.k3var, 0, k3) {
    let t3119 = (cU.ne.extent_realized*cU.s0.k3var) + t3118
    for (cU.s0.ne, 0, t3116) {
     cU[cU.s0.ne + t3119] = 0.000000
    }
   }
  }
  consume sumU {
   let t3126 = ((nelements + 1)*nelements)/2
   let t3128 = sumU.k.extent_realized*sumU.n.extent_realized
   let t3122 = coeff3.min.3*coeff3.stride.3
   let t3123 = coeff3.min.2*coeff3.stride.2
   let t3124 = coeff3.min.1*coeff3.stride.1
   let t3121 = 0 - ti.min.0
   for (cU.s1.r239$4, 0, nrbf3) {
    let t3129 = (cU.ne.extent_realized*k3)*cU.s1.r239$4
    let t3133 = cU.s1.r239$4*t3128
    let t3131 = cU.s1.r239$4*coeff3.stride.1
    for (cU.s1.r239$y, 0, nabf3) {
     let t3134 = cU.s1.r239$y - pn3.min.0
     for (cU.s1.r239$z, 0, nelements) {
      let cU.s1.r239$w.new_min.s = min(cU.s1.r239$z, nelements)
      let t3137 = nelements - cU.s1.r239$w.new_min.s
      let t3140 = ((cU.s1.r239$z/2)*(((nelements*2) - cU.s1.r239$z) + -3)) + cU.s1.r239$w.new_min.s
      let t3141 = cU.s1.r239$z + t3133
      let t3138 = cU.s1.r239$w.new_min.s + t3129
      for (cU.s1.r239$w.rebased, 0, t3137) {
       let cU.s1.r239$x.new_min.s = min(pn3[t3134], k3)
       let cU.s1.r239_x.new_max$1.s = max(min(pn3[t3134 + 1], k3), cU.s1.r239$x.new_min.s)
       let t3147 = max(cU.s1.r239$x.new_min.s, 0)
       let t3146 = max(min(cU.s1.r239$w.rebased + t3140, t3126), 1)*coeff3.stride.2
       let t3145 = coeff3.stride.2*-1
       let t3142 = max(cU.s1.r239_x.new_max$1.s, 0) - t3147
       let t3143 = cU.s1.r239$w.rebased + t3138
       for (cU.s1.r239$x.rebased, 0, t3142) {
        let t2721 = ((cU.s1.r239$x.rebased + t3147)*cU.ne.extent_realized) + t3143
        cU[t2721] = cU[t2721] + (coeff3[(((((((((max(min(ti[t3121], nelements), 1)*coeff3.stride.3) - t3122) - t3123) - t3124) - coeff3.min.0) + t3145) - coeff3.stride.3) + t3131) + cU.s1.r239$y) + t3146]*(sumU[((cU.s1.r239$x.rebased + t3147)*sumU.n.extent_realized) + t3141]*float64(pc3[(t3147 - pc3.min.0) + cU.s1.r239$x.rebased])))
       }
      }
     }
    }
   }
  }
  consume sumU {
   let t3154 = ((nelements + 1)*nelements)/2
   let t3156 = sumU.k.extent_realized*sumU.n.extent_realized
   let t3150 = coeff3.min.3*coeff3.stride.3
   let t3151 = coeff3.min.2*coeff3.stride.2
   let t3152 = coeff3.min.1*coeff3.stride.1
   let t3149 = 0 - ti.min.0
   for (cU.s2.r239$4, 0, nrbf3) {
    let t3157 = (cU.ne.extent_realized*k3)*cU.s2.r239$4
    let t3161 = cU.s2.r239$4*t3156
    let t3159 = cU.s2.r239$4*coeff3.stride.1
    for (cU.s2.r239$y, 0, nabf3) {
     let t3162 = cU.s2.r239$y - pn3.min.0
     for (cU.s2.r239$z, 0, nelements) {
      let cU.s2.r239$w.new_min.s = min(cU.s2.r239$z, nelements)
      let t3165 = nelements - cU.s2.r239$w.new_min.s
      let t3168 = ((cU.s2.r239$z/2)*(((nelements*2) - cU.s2.r239$z) + -3)) + cU.s2.r239$w.new_min.s
      let t3166 = cU.s2.r239$z + t3157
      let t3169 = cU.s2.r239$w.new_min.s + t3161
      for (cU.s2.r239$w.rebased, 0, t3165) {
       let cU.s2.r239$x.new_min.s = min(pn3[t3162], k3)
       let cU.s2.r239$x.new_max.s = max(min(pn3[t3162 + 1], k3), cU.s2.r239$x.new_min.s)
       let t3175 = max(cU.s2.r239$x.new_min.s, 0)
       let t3173 = max(min(cU.s2.r239$w.rebased + t3168, t3154), 1)*coeff3.stride.2
       let t3172 = coeff3.stride.2*-1
       let t3170 = max(cU.s2.r239$x.new_max.s, 0) - t3175
       let t3174 = cU.s2.r239$w.rebased + t3169
       for (cU.s2.r239$x.rebased, 0, t3170) {
        let t2722 = ((cU.s2.r239$x.rebased + t3175)*cU.ne.extent_realized) + t3166
        cU[t2722] = cU[t2722] + (coeff3[(((((((((max(min(ti[t3149], nelements), 1)*coeff3.stride.3) - t3150) - t3151) - t3152) - coeff3.min.0) + t3172) - coeff3.stride.3) + t3159) + cU.s2.r239$y) + t3173]*(sumU[((cU.s2.r239$x.rebased + t3175)*sumU.n.extent_realized) + t3174]*float64(pc3[(t3175 - pc3.min.0) + cU.s2.r239$x.rebased])))
       }
      }
     }
    }
   }
  }
 }
 allocate dd2[float64 * max(nelements, 1) * nrbf2 * npairs * 3]
 allocate d2$0[float64 * max(nelements, 1) * nrbf2]
 produce d2$0 {
  produce dd2 {
   let t3176 = max(nelements, 1)
   for (d2$0.s0.m, 0, nrbf2) {
    let t3177 = d2$0.s0.m*t3176
    for (d2$0.s0.ne, 0, t3176) {
     d2$0[d2$0.s0.ne + t3177] = 0.000000
    }
   }
   let t3178 = max(nelements, 1)
   for (dd2.s0.dim, 0, 3) {
    for (dd2.s0.n, 0, npairs) {
     let t3181 = nrbf2*t3178
     let t3180 = ((npairs*t3181)*dd2.s0.dim) + (dd2.s0.n*t3181)
     for (dd2.s0.m, 0, nrbf2) {
      let t3182 = (dd2.s0.m*t3178) + t3180
      for (dd2.s0.ne, 0, t3178) {
       dd2[dd2.s0.ne + t3182] = 0.000000
      }
     }
    }
   }
   consume rbf$1 {
    let t3183 = max(nrbf2, 0)
    let t3184 = max(nelements, 1)
    let t3185 = npairs*rbf$1.i.extent_realized
    for (dd2.s1.r197$y, 0, t3183) {
     let t3191 = dd2.s1.r197$y*npairs
     let t3187 = nrbf2*t3184
     let t3186 = dd2.s1.r197$y*t3184
     let t3190 = (t3185*3) + t3191
     let t3189 = (t3185*2) + t3191
     let t3188 = t3185 + t3191
     for (dd2.s1.r197$x, 0, npairs) {
      let t2726 = max(min(tj[dd2.s1.r197$x - tj.min.0], nelements), 1) + ((dd2.s1.r197$x*t3187) + t3186)
      dd2[t2726 + -1] = dd2[t2726 + -1] + rbf$1[dd2.s1.r197$x + t3188]
      let t2729 = max(min(tj[dd2.s1.r197$x - tj.min.0], nelements), 1) + ((dd2.s1.r197$x*t3187) + ((npairs*t3187) + t3186))
      dd2[t2729 + -1] = dd2[t2729 + -1] + rbf$1[dd2.s1.r197$x + t3189]
      let t2733 = max(min(tj[dd2.s1.r197$x - tj.min.0], nelements), 1) + ((dd2.s1.r197$x*t3187) + (((npairs*t3187)*2) + t3186))
      dd2[t2733 + -1] = dd2[t2733 + -1] + rbf$1[dd2.s1.r197$x + t3190]
     }
     let t3192 = dd2.s1.r197$y*t3184
     let t3193 = dd2.s1.r197$y*npairs
     for (d2$0.s1.r197$x, 0, npairs) {
      let t2735 = max(min(tj[d2$0.s1.r197$x - tj.min.0], nelements), 1) + t3192
      d2$0[t2735 + -1] = d2$0[t2735 + -1] + rbf$1[d2$0.s1.r197$x + t3193]
     }
    }
   }
  }
 }
 allocate ind23[int32 * n23 * 2]
 produce ind23 {
  for (ind23.s0.c.rebased, 0, 2) {
   for (ind23.s0.k, 0, n23) {
    let t2736 = ind23.s0.k/nrbf2
    ind23[(ind23.s0.c.rebased*n23) + ind23.s0.k] = mux(ind23.s0.c.rebased + 1, 0, ind23.s0.k - (nrbf2*t2736), t2736)
   }
  }
 }
 allocate cf1[float64 * n32]
 produce cf1 {
  for (cf1.s0.j, 0, n32) {
   cf1[cf1.s0.j] = 0.000000
  }
  consume ind23 {
   consume d2$0 {
    let t3195 = max(nelements, 1)
    let t3196 = 0 - ti.min.0
    for (cf1.s1.j, 0, n32) {
     for (cf1.s1.r261$x, 0, n23) {
      cf1[cf1.s1.j] = cf1[cf1.s1.j] + (d2$0[ind23[cf1.s1.r261$x] + (ind23[cf1.s1.r261$x + n23]*t3195)]*coeff23[(((ti[t3196] + -1)*coeff23.stride.2) + (cf1.s1.j*n23)) + cf1.s1.r261$x])
     }
    }
   }
  }
 }
 let d3$0.kme.extent_realized = max(select(nelements == 1, 1, max(coeff3.extent.2.required.s, 1)), max(((nelements + 1)*nelements)/2, 1))
 allocate d3$0[float64 * nabf3 * nrbf3 * d3$0.kme.extent_realized]
 produce d3$0 {
  let t3198 = max(((nelements + 1)*nelements)/2, 1)
  for (d3$0.s0.kme, 0, t3198) {
   let t3200 = (nabf3*nrbf3)*d3$0.s0.kme
   for (d3$0.s0.rbfThree, 0, nrbf3) {
    let t3201 = (d3$0.s0.rbfThree*nabf3) + t3200
    for (d3$0.s0.abfThree, 0, nabf3) {
     d3$0[d3$0.s0.abfThree + t3201] = 0.000000
    }
   }
  }
  consume sumU {
   if (nelements == 1) {
    let t3202 = sumU.k.extent_realized*sumU.n.extent_realized
    for (d3$0.s1.rbfThree, 0, nrbf3) {
     let t3203 = d3$0.s1.rbfThree*t3202
     let t3204 = d3$0.s1.rbfThree*nabf3
     for (d3$0.s1.r208$y, 0, nabf3) {
      let d3$0.s1.r208$x.new_min.s = min(pn3[d3$0.s1.r208$y - pn3.min.0], k3)
      let d3$0.s1.r208$x.new_max.s = max(min(pn3[(d3$0.s1.r208$y - pn3.min.0) + 1], k3), d3$0.s1.r208$x.new_min.s)
      let t3209 = max(d3$0.s1.r208$x.new_min.s, 0)
      let t3208 = t3209 - pc3.min.0
      let t3205 = max(d3$0.s1.r208$x.new_max.s, 0) - t3209
      let t3207 = d3$0.s1.r208$y + t3204
      for (d3$0.s1.r208$x.rebased, 0, t3205) {
       let t2738 = sumU[((d3$0.s1.r208$x.rebased + t3209)*sumU.n.extent_realized) + t3203]
       d3$0[t3207] = d3$0[t3207] + ((t2738*float64(pc3[d3$0.s1.r208$x.rebased + t3208]))*t2738)
      }
     }
    }
   } else {
    let t3211 = ((nelements + 1)*nelements)/2
    let t3213 = sumU.k.extent_realized*sumU.n.extent_realized
    for (d3$0.s1.rbfThree, 0, nrbf3) {
     let t3214 = (d3$0.s1.rbfThree - nrbf3)*nabf3
     let t3216 = nabf3*nrbf3
     let t3217 = d3$0.s1.rbfThree*t3213
     for (d3$0.s1.r208$y, 0, nabf3) {
      let t3218 = d3$0.s1.r208$y - pn3.min.0
      let t3219 = d3$0.s1.r208$y + t3214
      for (d3$0.s1.r208$w, 0, nelements) {
       let d3$0.s1.r208$z.new_max.s = min(d3$0.s1.r208$w + 1, nelements)
       let t3221 = nelements*2
       for (d3$0.s1.r208$z, 0, d3$0.s1.r208$z.new_max.s) {
        let d3_0.s1.r208_x.new_min$1.s = min(pn3[t3218], k3)
        let d3_0.s1.r208_x.new_max$1.s = max(min(pn3[t3218 + 1], k3), d3_0.s1.r208_x.new_min$1.s)
        let t3228 = max(d3_0.s1.r208_x.new_min$1.s, 0)
        let t3223 = max(d3_0.s1.r208_x.new_max$1.s, 0) - t3228
        let t3224 = (max(min(((d3$0.s1.r208$z/2)*((t3221 - d3$0.s1.r208$z) + -3)) + d3$0.s1.r208$w, t3211), 1)*t3216) + t3219
        let t3227 = d3$0.s1.r208$z + t3217
        let t3226 = d3$0.s1.r208$w + t3217
        for (d3$0.s1.r208$x.rebased, 0, t3223) {
         let t2908 = (d3$0.s1.r208$x.rebased + t3228)*sumU.n.extent_realized
         d3$0[t3224] = d3$0[t3224] + (sumU[t2908 + t3226]*(sumU[t2908 + t3227]*float64(pc3[(t3228 - pc3.min.0) + d3$0.s1.r208$x.rebased])))
        }
       }
      }
     }
    }
   }
  }
 }
 allocate ind33[int32 * n33 * 3]
 produce ind33 {
  for (ind33.s0.c, 0, 3) {
   for (ind33.s0.k, 0, n33) {
    let t2743 = ind33.s0.k/(nabf3*nrbf3)
    let t2744 = ind33.s0.k - ((nabf3*t2743)*nrbf3)
    ind33[(ind33.s0.c*n33) + ind33.s0.k] = mux(ind33.s0.c, t2744 % nabf3, t2744/nabf3, t2743)
   }
  }
 }
 allocate cf133[float64 * n33]
 produce cf133 {
  for (cf133.s0.j, 0, n33) {
   cf133[cf133.s0.j] = 0.000000
  }
  consume ind33 {
   consume d3$0 {
    let t3232 = ((n33 + 1)*n33)/2
    let t3234 = nabf3*nrbf3
    let t3235 = 0 - ti.min.0
    for (cf133.s1.r286$y, 0, n33) {
     let cf133.s1.r286_x.new_min$1.s = min(cf133.s1.r286$y, n33)
     let t3237 = (((n33 + -1)*cf133.s1.r286$y) + cf133.s1.r286_x.new_min$1.s) - (((cf133.s1.r286$y + -1)*cf133.s1.r286$y)/2)
     let t3236 = n33 - cf133.s1.r286_x.new_min$1.s
     let t3238 = (n33*2) + cf133.s1.r286_x.new_min$1.s
     let t3239 = cf133.s1.r286_x.new_min$1.s + n33
     for (cf133.s1.r286$x.rebased, 0, t3236) {
      let t2746.s = min(cf133.s1.r286$x.rebased + t3237, t3232 + -1)
      let t2909 = max(t2746.s, 0)
      cf133[cf133.s1.r286$y] = cf133[cf133.s1.r286$y] + (d3$0[(ind33[cf133.s1.r286$x.rebased + t3239]*nabf3) + (ind33[cf133.s1.r286$x.rebased + cf133.s1.r286_x.new_min$1.s] + (ind33[cf133.s1.r286$x.rebased + t3238]*t3234))]*coeff33[if_then_else(t3232 < (t2909 + 1), return_second(halide_print((char *)stringify(t2909, " error!\n")), t2909), t2909) + ((max(min(ti[t3235], nelements), 1) + -1)*coeff33.stride.1)])
     }
    }
   }
  }
 }
 allocate ind32[int32 * n32 * 3]
 produce ind32 {
  for (ind32.s0.c, 0, 3) {
   for (ind32.s0.k, 0, n32) {
    let t2747 = ind32.s0.k/(nabf3*nrbf3)
    let t2748 = ind32.s0.k - ((nabf3*t2747)*nrbf3)
    ind32[(ind32.s0.c*n32) + ind32.s0.k] = mux(ind32.s0.c, t2748 % nabf3, t2748/nabf3, t2747)
   }
  }
 }
 allocate cf2[float64 * n23]
 produce cf2 {
  for (cf2.s0.i, 0, n23) {
   cf2[cf2.s0.i] = 0.000000
  }
  consume ind32 {
   consume d3$0 {
    let t3244 = nabf3*nrbf3
    let t3245 = 0 - ti.min.0
    for (cf2.s1.i, 0, n23) {
     for (cf2.s1.r268$x, 0, n32) {
      cf2[cf2.s1.i] = cf2[cf2.s1.i] + (d3$0[(ind32[cf2.s1.r268$x + n32]*nabf3) + (ind32[cf2.s1.r268$x] + (ind32[(n32*2) + cf2.s1.r268$x]*t3244))]*coeff23[(cf2.s1.r268$x*n23) + (((ti[t3245] + -1)*coeff23.stride.2) + cf2.s1.i)])
     }
    }
   }
  }
 }
 allocate cf233[float64 * n33]
 produce cf233 {
  for (cf233.s0.j, 0, n33) {
   cf233[cf233.s0.j] = 0.000000
  }
  consume ind33 {
   consume d3$0 {
    let t3247 = ((n33 + 1)*n33)/2
    let t3249 = nabf3*nrbf3
    let t3250 = 0 - ti.min.0
    for (cf233.s1.r286$y, 0, n33) {
     let cf233.s1.r286$x.new_min.s = min(cf233.s1.r286$y, n33)
     let t3252 = (((n33 + -1)*cf233.s1.r286$y) + cf233.s1.r286$x.new_min.s) - (((cf233.s1.r286$y + -1)*cf233.s1.r286$y)/2)
     let t3251 = n33 - cf233.s1.r286$x.new_min.s
     let t3253 = (n33*2) + cf233.s1.r286$y
     let t3254 = cf233.s1.r286$y + n33
     for (cf233.s1.r286$x.rebased, 0, t3251) {
      let t2750.s = min(cf233.s1.r286$x.rebased + t3252, t3247 + -1)
      let t2910 = cf233.s1.r286$x.new_min.s + cf233.s1.r286$x.rebased
      let t2911 = max(t2750.s, 0)
      cf233[t2910] = cf233[t2910] + (d3$0[(ind33[t3254]*nabf3) + (ind33[cf233.s1.r286$y] + (ind33[t3253]*t3249))]*coeff33[if_then_else(t3247 < (t2911 + 1), return_second(halide_print((char *)stringify(t2911, " error!\n")), t2911), t2911) + ((max(min(ti[t3250], nelements), 1) + -1)*coeff33.stride.1)])
     }
    }
   }
  }
 }
 let cu4.ne.extent_realized = let t3554 = (nelements == 1) in (let t3555 = max(nelements, 1) in (max(select(t3554, 0, t3555 + -1), max(select(t3554, 0, nelements + -1), t3555 + -1)) + 1))
 allocate cu4[float64 * cu4.ne.extent_realized * (k4 + 1) * nrbf4]
 produce cu4 {
  let t3255 = max(nelements, 1)
  let t3256 = (k4 + 1)*cu4.ne.extent_realized
  for (cu4.s0.rbf, 0, nrbf4) {
   let t3257 = cu4.s0.rbf*t3256
   for (cu4.s0.kv, 0, k4) {
    let t3258 = (cu4.ne.extent_realized*cu4.s0.kv) + t3257
    for (cu4.s0.ne, 0, t3255) {
     cu4[cu4.s0.ne + t3258] = 0.000000
    }
   }
  }
  consume sumU {
   if (nelements == 1) {
    let t3264 = (k4 + 1)*cu4.ne.extent_realized
    let t3262 = sumU.k.extent_realized*sumU.n.extent_realized
    let t3259 = ((2 - pb4.min.1)*pb4.stride.1) - pb4.min.0
    let t3260 = ((1 - pb4.min.1)*pb4.stride.1) - pb4.min.0
    let t3261 = (pb4.min.1*pb4.stride.1) + pb4.min.0
    let t3263 = ((coeff4.min.1*coeff4.stride.1) + ((coeff4.min.3*coeff4.stride.3) + (coeff4.min.2*coeff4.stride.2))) + coeff4.min.0
    for (cu4.s1.rbf, 0, nrbf4) {
     let t3265 = cu4.s1.rbf*t3264
     for (cu4.s1.r321$5, 0, nrbf4) {
      let t3266 = cu4.s1.r321$5*t3262
      let t3267 = (coeff4.stride.1*cu4.s1.r321$5) - t3263
      for (cu4.s1.r321$4, 0, nabf4) {
       let cu4.s1.r321$w.new_min.s = min(pa4[cu4.s1.r321$4 - pa4.min.0], q4)
       let cu4.s1.r321$w.new_max.s = max(min(pa4[(cu4.s1.r321$4 - pa4.min.0) + 1], q4), cu4.s1.r321$w.new_min.s)
       let t3274 = max(cu4.s1.r321$w.new_min.s, 0)
       let t3271 = t3274 - t3261
       let t3272 = t3274 - pc4.min.0
       let t3268 = max(cu4.s1.r321$w.new_max.s, 0) - t3274
       let t3270 = t3260 + t3274
       let t3269 = t3259 + t3274
       let t3273 = cu4.s1.r321$4 + t3267
       for (cu4.s1.r321$w.rebased, 0, t3268) {
        let t1585 = pb4[cu4.s1.r321$w.rebased + t3269]
        let t1586 = pb4[cu4.s1.r321$w.rebased + t3270]
        let t1587 = pb4[cu4.s1.r321$w.rebased + t3271]
        let t1588.s = pc4[cu4.s1.r321$w.rebased + t3272]
        let t1589 = sumU[(sumU.n.extent_realized*t1587) + t3266]*float64(t1588.s)
        let t1590 = sumU[(sumU.n.extent_realized*t1586) + t3266]
        let t1591 = coeff4[t3273]
        let t1592.s = sumU[(sumU.n.extent_realized*t1585) + t3266]
        cu4[(cu4.ne.extent_realized*t1585) + t3265] = (t1589*t1590)*t1591
        cu4[(cu4.ne.extent_realized*t1586) + t3265] = (t1591*t1592.s)*t1589
        cu4[(cu4.ne.extent_realized*t1587) + t3265] = (t1591*t1592.s)*(t1590*float64(t1588.s))
       }
      }
     }
    }
   } else {
    let t3290 = nelements/3
    let t3291 = t3290*3
    let t3292 = t3291 + 2
    let t3293 = t3291 + 1
    let t3294 = nelements % 3
    let t3285 = t3294 != 0
    let t3288 = t3294 == 2
    let t3287 = ((t3290*t3293)*t3292)/2
    let t3289 = ((t3292*t3293)*(t3291 + 3))/6
    let t3284 = (k4 + 1)*cu4.ne.extent_realized
    let t3279 = sumU.k.extent_realized*sumU.n.extent_realized
    let t3281 = coeff4.min.3*coeff4.stride.3
    let t3282 = coeff4.min.2*coeff4.stride.2
    let t3283 = coeff4.min.1*coeff4.stride.1
    let t3276 = ((2 - pb4.min.1)*pb4.stride.1) - pb4.min.0
    let t3277 = ((1 - pb4.min.1)*pb4.stride.1) - pb4.min.0
    let t3280 = 0 - ti.min.0
    let t3278 = (pb4.min.1*pb4.stride.1) + pb4.min.0
    for (cu4.s1.rbf, 0, nrbf4) {
     let t3297 = cu4.s1.rbf*t3284
     for (cu4.s1.r321$5, 0, nrbf4) {
      let t3302 = cu4.s1.r321$5*t3279
      let t3299 = coeff4.stride.1*cu4.s1.r321$5
      for (cu4.s1.r321$4, 0, nabf4) {
       let cu4.s1.r321_w.new_min$1.s = min(pa4[cu4.s1.r321$4 - pa4.min.0], q4)
       let cu4.s1.r321_w.new_max$1.s = max(min(pa4[(cu4.s1.r321$4 - pa4.min.0) + 1], q4), cu4.s1.r321_w.new_min$1.s)
       let t3310 = max(cu4.s1.r321_w.new_min$1.s, 0)
       let t3306 = t3310 - t3278
       let t3307 = t3310 - pc4.min.0
       let t3303 = max(cu4.s1.r321_w.new_max$1.s, 0) - t3310
       let t3305 = t3277 + t3310
       let t3304 = t3276 + t3310
       for (cu4.s1.r321$w.rebased, 0, t3303) {
        let t3314 = cu4.s1.r321$w.rebased + t3307
        let t3313 = cu4.s1.r321$w.rebased + t3306
        let t3312 = cu4.s1.r321$w.rebased + t3305
        let t3311 = cu4.s1.r321$w.rebased + t3304
        for (cu4.s1.r321$z, 0, nelements) {
         let t3321 = cu4.s1.r321$z + t3289
         let t3319 = cu4.s1.r321$z + t3287
         for (cu4.s1.r321$y.rebased, 0, nelements - cu4.s1.r321$z) {
          let t3325 = cu4.s1.r321$y.rebased + cu4.s1.r321$z
          let t3326 = t3325/3
          let t3322 = t3290 - t3326
          for (cu4.s1.r321$x.r321$x.rebased, 0, t3322) {
           if (t3325 <= (((t3325/3) + cu4.s1.r321$x.r321$x.rebased)*3)) {
            let t1605 = pb4[t3311]
            let t1606 = pb4[t3312]
            let t1607 = pb4[t3313]
            let t1608.s = pc4[t3314]
            let t1609 = sumU[((cu4.s1.r321$x.r321$x.rebased + t3326)*3) + ((sumU.n.extent_realized*t1607) + t3302)]*float64(t1608.s)
            let t1610 = sumU[(((sumU.n.extent_realized*t1606) + t3302) + cu4.s1.r321$z) + cu4.s1.r321$y.rebased]
            let t1611 = let t3556 = ((t3325/3) + cu4.s1.r321$x.r321$x.rebased) in coeff4[(((((((t3556*3) + 1)*t3556)*((t3556*3) + 2))/2) + ((((t3325 + 1)*t3325)/2) + cu4.s1.r321$z))*coeff4.stride.2) + ((((((((max(min(ti[t3280], nelements), 1)*coeff4.stride.3) - t3281) - t3282) - t3283) - coeff4.min.0) - coeff4.stride.3) + t3299) + cu4.s1.r321$4)]
            let t1612.s = sumU[((sumU.n.extent_realized*t1605) + t3302) + cu4.s1.r321$z]
            cu4[((cu4.ne.extent_realized*t1605) + t3297) + cu4.s1.r321$z] = (t1609*t1610)*t1611
            cu4[(((cu4.ne.extent_realized*t1606) + t3297) + cu4.s1.r321$z) + cu4.s1.r321$y.rebased] = (t1611*t1612.s)*t1609
            cu4[((cu4.s1.r321$x.r321$x.rebased + t3326)*3) + ((cu4.ne.extent_realized*t1607) + t3297)] = (t1611*t1612.s)*(t1610*float64(t1608.s))
           }
           if ((t3325 + -1) <= (((t3325/3) + cu4.s1.r321$x.r321$x.rebased)*3)) {
            let t1605 = pb4[t3311]
            let t1606 = pb4[t3312]
            let t1607 = pb4[t3313]
            let t1608.s = pc4[t3314]
            let t1609 = sumU[(((cu4.s1.r321$x.r321$x.rebased + t3326)*3) + ((sumU.n.extent_realized*t1607) + t3302)) + 1]*float64(t1608.s)
            let t1610 = sumU[(((sumU.n.extent_realized*t1606) + t3302) + cu4.s1.r321$z) + cu4.s1.r321$y.rebased]
            let t1611 = let t3557 = ((t3325/3) + cu4.s1.r321$x.r321$x.rebased) in coeff4[(((((((t3557*3) + 2)*((t3557*3) + 1))*((t3557*3) + 3))/6) + ((((t3325 + 1)*t3325)/2) + cu4.s1.r321$z))*coeff4.stride.2) + ((((((((max(min(ti[t3280], nelements), 1)*coeff4.stride.3) - t3281) - t3282) - t3283) - coeff4.min.0) - coeff4.stride.3) + t3299) + cu4.s1.r321$4)]
            let t1612.s = sumU[((sumU.n.extent_realized*t1605) + t3302) + cu4.s1.r321$z]
            cu4[((cu4.ne.extent_realized*t1605) + t3297) + cu4.s1.r321$z] = (t1609*t1610)*t1611
            cu4[(((cu4.ne.extent_realized*t1606) + t3297) + cu4.s1.r321$z) + cu4.s1.r321$y.rebased] = (t1611*t1612.s)*t1609
            cu4[(((cu4.s1.r321$x.r321$x.rebased + t3326)*3) + ((cu4.ne.extent_realized*t1607) + t3297)) + 1] = (t1611*t1612.s)*(t1610*float64(t1608.s))
           }
           let t1605 = pb4[t3311]
           let t1606 = pb4[t3312]
           let t1607 = pb4[t3313]
           let t1608.s = pc4[t3314]
           let t1609 = sumU[(((cu4.s1.r321$x.r321$x.rebased + t3326)*3) + ((sumU.n.extent_realized*t1607) + t3302)) + 2]*float64(t1608.s)
           let t1610 = sumU[(((sumU.n.extent_realized*t1606) + t3302) + cu4.s1.r321$z) + cu4.s1.r321$y.rebased]
           let t1611 = let t3558 = ((t3325/3) + cu4.s1.r321$x.r321$x.rebased) in coeff4[(((((((t3558*3) + 3)*((t3558*3) + 2))*((t3558*3) + 4))/6) + ((((t3325 + 1)*t3325)/2) + cu4.s1.r321$z))*coeff4.stride.2) + ((((((((max(min(ti[t3280], nelements), 1)*coeff4.stride.3) - t3281) - t3282) - t3283) - coeff4.min.0) - coeff4.stride.3) + t3299) + cu4.s1.r321$4)]
           let t1612.s = sumU[((sumU.n.extent_realized*t1605) + t3302) + cu4.s1.r321$z]
           cu4[((cu4.ne.extent_realized*t1605) + t3297) + cu4.s1.r321$z] = (t1609*t1610)*t1611
           cu4[(((cu4.ne.extent_realized*t1606) + t3297) + cu4.s1.r321$z) + cu4.s1.r321$y.rebased] = (t1611*t1612.s)*t1609
           cu4[(((cu4.s1.r321$x.r321$x.rebased + t3326)*3) + ((cu4.ne.extent_realized*t1607) + t3297)) + 2] = (t1611*t1612.s)*(t1610*float64(t1608.s))
          }
          if (t3285) {
           if ((cu4.s1.r321$y.rebased + cu4.s1.r321$z) <= t3291) {
            let t1605 = pb4[t3311]
            let t1606 = pb4[t3312]
            let t1607 = pb4[t3313]
            let t1608.s = pc4[t3314]
            let t1609 = sumU[(sumU.n.extent_realized*t1607) + (t3291 + t3302)]*float64(t1608.s)
            let t1610 = sumU[(((sumU.n.extent_realized*t1606) + t3302) + cu4.s1.r321$z) + cu4.s1.r321$y.rebased]
            let t1611 = let t3559 = (cu4.s1.r321$y.rebased + cu4.s1.r321$z) in coeff4[(((((t3559 + 1)*t3559)/2) + t3319)*coeff4.stride.2) + ((((((((max(min(ti[t3280], nelements), 1)*coeff4.stride.3) - t3281) - t3282) - t3283) - coeff4.min.0) - coeff4.stride.3) + t3299) + cu4.s1.r321$4)]
            let t1612.s = sumU[((sumU.n.extent_realized*t1605) + t3302) + cu4.s1.r321$z]
            cu4[((cu4.ne.extent_realized*t1605) + t3297) + cu4.s1.r321$z] = (t1609*t1610)*t1611
            cu4[(((cu4.ne.extent_realized*t1606) + t3297) + cu4.s1.r321$z) + cu4.s1.r321$y.rebased] = (t1611*t1612.s)*t1609
            cu4[(cu4.ne.extent_realized*t1607) + (t3291 + t3297)] = (t1611*t1612.s)*(t1610*float64(t1608.s))
           }
           if (t3288) {
            let t1605 = pb4[t3311]
            let t1606 = pb4[t3312]
            let t1607 = pb4[t3313]
            let t1608.s = pc4[t3314]
            let t1609 = sumU[((sumU.n.extent_realized*t1607) + (t3291 + t3302)) + 1]*float64(t1608.s)
            let t1610 = sumU[(((sumU.n.extent_realized*t1606) + t3302) + cu4.s1.r321$z) + cu4.s1.r321$y.rebased]
            let t1611 = let t3560 = (cu4.s1.r321$y.rebased + cu4.s1.r321$z) in coeff4[(((((t3560 + 1)*t3560)/2) + t3321)*coeff4.stride.2) + ((((((((max(min(ti[t3280], nelements), 1)*coeff4.stride.3) - t3281) - t3282) - t3283) - coeff4.min.0) - coeff4.stride.3) + t3299) + cu4.s1.r321$4)]
            let t1612.s = sumU[((sumU.n.extent_realized*t1605) + t3302) + cu4.s1.r321$z]
            cu4[((cu4.ne.extent_realized*t1605) + t3297) + cu4.s1.r321$z] = (t1609*t1610)*t1611
            cu4[(((cu4.ne.extent_realized*t1606) + t3297) + cu4.s1.r321$z) + cu4.s1.r321$y.rebased] = (t1611*t1612.s)*t1609
            cu4[((cu4.ne.extent_realized*t1607) + (t3291 + t3297)) + 1] = (t1611*t1612.s)*(t1610*float64(t1608.s))
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 let dd3.kme.extent_realized = let t3561 = max(((nelements + 1)*nelements)/2, 1) in max(select(nelements == 1, 1, t3561), t3561)
 allocate dd3[float64 * 3 * npairs * nabf3 * nrbf3 * dd3.kme.extent_realized]
 produce dd3 {
  let t3327 = max(((nelements + 1)*nelements)/2, 1)
  for (dd3.s0.kme, 0, t3327) {
   let t3331 = nabf3*npairs
   let t3329 = ((nrbf3*t3331)*dd3.s0.kme)*3
   for (dd3.s0.rbfThree, 0, nrbf3) {
    let t3332 = ((dd3.s0.rbfThree*t3331)*3) + t3329
    for (dd3.s0.abfThree, 0, nabf3) {
     let t3333 = ((dd3.s0.abfThree*npairs)*3) + t3332
     for (dd3.s0.nj, 0, npairs) {
      let t3334 = (dd3.s0.nj*3) + t3333
      for (dd3.s0.dim, 0, 3) {
       dd3[dd3.s0.dim + t3334] = 0.000000
      }
     }
    }
   }
  }
  consume sumU {
   consume U {
    if (nelements == 1) {
     let t3336 = sumU.k.extent_realized*sumU.n.extent_realized
     let t3337 = U.k.extent_realized*npairs
     for (dd3.s1.rbfThree, 0, nrbf3) {
      let t3338 = (nabf3*npairs)*dd3.s1.rbfThree
      let t3340 = dd3.s1.rbfThree*t3337
      let t3339 = dd3.s1.rbfThree*t3336
      for (dd3.s1.r215$y, 0, nabf3) {
       let dd3.s1.r215$x.new_min.s = min(pn3[dd3.s1.r215$y - pn3.min.0], k3)
       let dd3.s1.r215$x.new_max.s = max(min(pn3[(dd3.s1.r215$y - pn3.min.0) + 1], k3), dd3.s1.r215$x.new_min.s)
       let t3344 = max(dd3.s1.r215$x.new_min.s, 0)
       let t3341 = max(dd3.s1.r215$x.new_max.s, 0) - t3344
       let t3342 = (dd3.s1.r215$y*npairs) + t3338
       for (dd3.s1.r215$x.rebased, 0, t3341) {
        let t3348 = dd3.s1.r215$x.rebased + t3344
        let t3345 = (sumU.n.extent_realized*t3348) + t3339
        let t3347 = (npairs*t3348) + t3340
        let t3346 = (t3344 - pc3.min.0) + dd3.s1.r215$x.rebased
        for (dd3.s1.r215$w, 0, npairs) {
         let t2812 = dd3.s1.r215$w + t3342
         let t2758 = sumU[t3345]*float64(pc3[t3346])
         dd3[t2812*3] = dd3[t2812*3] + (U[(dd3.s1.r215$w + t3347)*4]*select(tj[dd3.s1.r215$w - tj.min.0] == 1, t2758*2.000000, t2758))
         let t2760 = sumU[t3345]*float64(pc3[t3346])
         dd3[(t2812*3) + 1] = dd3[(t2812*3) + 1] + (U[((dd3.s1.r215$w + t3347)*4) + 1]*select(tj[dd3.s1.r215$w - tj.min.0] == 1, t2760*2.000000, t2760))
         let t2762 = sumU[t3345]*float64(pc3[t3346])
         dd3[(t2812*3) + 2] = dd3[(t2812*3) + 2] + (U[((dd3.s1.r215$w + t3347)*4) + 2]*select(tj[dd3.s1.r215$w - tj.min.0] == 1, t2762*2.000000, t2762))
        }
       }
      }
     }
    } else {
     let t3355 = nabf3*npairs
     let t3352 = ((nelements + 1)*nelements)/2
     let t3350 = sumU.k.extent_realized*sumU.n.extent_realized
     let t3354 = U.k.extent_realized*npairs
     let t3351 = (elemindex.min.1*elemindex.stride.1) + elemindex.min.0
     for (dd3.s1.rbfThree, 0, nrbf3) {
      let t3358 = nrbf3*t3355
      let t3356 = dd3.s1.rbfThree*t3355
      let t3359 = dd3.s1.rbfThree*t3354
      let t3357 = dd3.s1.rbfThree*t3350
      for (dd3.s1.r215$y, 0, nabf3) {
       let dd3.s1.r215_x.new_min$1.s = min(pn3[dd3.s1.r215$y - pn3.min.0], k3)
       let dd3.s1.r215_x.new_max$1.s = max(min(pn3[(dd3.s1.r215$y - pn3.min.0) + 1], k3), dd3.s1.r215_x.new_min$1.s)
       let t3363 = max(dd3.s1.r215_x.new_min$1.s, 0)
       let t3360 = max(dd3.s1.r215_x.new_max$1.s, 0) - t3363
       let t3361 = (dd3.s1.r215$y*npairs) + t3356
       for (dd3.s1.r215$x.rebased, 0, t3360) {
        let t3367 = dd3.s1.r215$x.rebased + t3363
        let t3364 = (sumU.n.extent_realized*t3367) + t3357
        let t3366 = (npairs*t3367) + t3359
        let t3365 = (t3363 - pc3.min.0) + dd3.s1.r215$x.rebased
        for (dd3.s1.r215$z, 0, nelements) {
         let t3369 = (dd3.s1.r215$z*elemindex.stride.1) - t3351
         let t3368 = dd3.s1.r215$z + t3364
         for (dd3.s1.r215$w, 0, npairs) {
          let t2816 = tj[dd3.s1.r215$w - tj.min.0]
          let t2815 = dd3.s1.r215$w + t3361
          let t2770 = sumU[t3368]*float64(pc3[t3365])
          let t2930 = (max(min(elemindex[(max(min(nelements, t2816), 1) + t3369) + -1], t3352 + -1), 0)*t3358) + t2815
          dd3[t2930*3] = dd3[t2930*3] + (U[(dd3.s1.r215$w + t3366)*4]*select(dd3.s1.r215$z == (t2816 + -1), t2770*2.000000, t2770))
          let t2778 = sumU[t3368]*float64(pc3[t3365])
          let t2932 = (max(min(elemindex[(max(min(nelements, t2816), 1) + t3369) + -1], t3352 + -1), 0)*t3358) + t2815
          dd3[(t2932*3) + 1] = dd3[(t2932*3) + 1] + (U[((dd3.s1.r215$w + t3366)*4) + 1]*select(dd3.s1.r215$z == (t2816 + -1), t2778*2.000000, t2778))
          let t2786 = sumU[t3368]*float64(pc3[t3365])
          let t2934 = (max(min(elemindex[(max(min(nelements, t2816), 1) + t3369) + -1], t3352 + -1), 0)*t3358) + t2815
          dd3[(t2934*3) + 2] = dd3[(t2934*3) + 2] + (U[((dd3.s1.r215$w + t3366)*4) + 2]*select(dd3.s1.r215$z == (t2816 + -1), t2786*2.000000, t2786))
         }
        }
       }
      }
     }
    }
   }
  }
 }
 allocate fij[float64 * npairs * 3]
 produce fij {
  for (fij.s0.n, 0, npairs) {
   let t3370 = fij.s0.n*3
   for (fij.s0.dim, 0, 3) {
    fij[fij.s0.dim + t3370] = 0.000000
   }
  }
  consume rbf$1 {
   let t3373 = npairs*rbf$1.i.extent_realized
   let t3371 = (nrbf2*-1) - coeff2.stride.2
   let t3372 = 0 - ti.min.0
   for (fij.s1.r120$y, 0, nrbf2) {
    let t3377 = fij.s1.r120$y*npairs
    let t3376 = (t3373*3) + t3377
    let t3375 = (t3373*2) + t3377
    let t3374 = t3373 + t3377
    for (fij.s1.r120$x, 0, npairs) {
     fij[fij.s1.r120$x*3] = fij[fij.s1.r120$x*3] + (coeff2[(max(min(tj[fij.s1.r120$x - tj.min.0], npairs + -1), 1)*nrbf2) + (((max(min(ti[t3372], nelements), 1)*coeff2.stride.2) + t3371) + fij.s1.r120$y)]*rbf$1[fij.s1.r120$x + t3374])
     fij[(fij.s1.r120$x*3) + 1] = fij[(fij.s1.r120$x*3) + 1] + (coeff2[(max(min(tj[fij.s1.r120$x - tj.min.0], npairs + -1), 1)*nrbf2) + (((max(min(ti[t3372], nelements), 1)*coeff2.stride.2) + t3371) + fij.s1.r120$y)]*rbf$1[fij.s1.r120$x + t3375])
     fij[(fij.s1.r120$x*3) + 2] = fij[(fij.s1.r120$x*3) + 2] + (coeff2[(max(min(tj[fij.s1.r120$x - tj.min.0], npairs + -1), 1)*nrbf2) + (((max(min(ti[t3372], nelements), 1)*coeff2.stride.2) + t3371) + fij.s1.r120$y)]*rbf$1[fij.s1.r120$x + t3376])
    }
   }
  }
  consume cU {
   consume U {
    if (nelements == 1) {
     let t3379 = U.k.extent_realized*npairs
     for (fij.s2.r244$x, 0, nrbf3) {
      let t3380 = (cU.ne.extent_realized*k3)*fij.s2.r244$x
      let t3381 = fij.s2.r244$x*t3379
      for (fij.s2.r244$y, 0, k3) {
       let t3383 = (fij.s2.r244$y*npairs) + t3381
       let t3382 = (cU.ne.extent_realized*fij.s2.r244$y) + t3380
       for (fij.s2.r244$z, 0, npairs) {
        fij[fij.s2.r244$z*3] = fij[fij.s2.r244$z*3] + (cU[t3382]*U[(fij.s2.r244$z + t3383)*4])
        fij[(fij.s2.r244$z*3) + 1] = fij[(fij.s2.r244$z*3) + 1] + (cU[t3382]*U[((fij.s2.r244$z + t3383)*4) + 1])
        fij[(fij.s2.r244$z*3) + 2] = fij[(fij.s2.r244$z*3) + 2] + (cU[t3382]*U[((fij.s2.r244$z + t3383)*4) + 2])
       }
      }
     }
    } else {
     let t3385 = U.k.extent_realized*npairs
     for (fij.s2.r244$x, 0, nrbf3) {
      let t3386 = (cU.ne.extent_realized*k3)*fij.s2.r244$x
      let t3387 = fij.s2.r244$x*t3385
      for (fij.s2.r244$y, 0, k3) {
       let t3389 = (fij.s2.r244$y*npairs) + t3387
       let t3388 = (cU.ne.extent_realized*fij.s2.r244$y) + t3386
       for (fij.s2.r244$z, 0, npairs) {
        fij[fij.s2.r244$z*3] = fij[fij.s2.r244$z*3] + (cU[(max(min(tj[fij.s2.r244$z - tj.min.0], nelements), 1) + t3388) + -1]*U[(fij.s2.r244$z + t3389)*4])
        fij[(fij.s2.r244$z*3) + 1] = fij[(fij.s2.r244$z*3) + 1] + (cU[(max(min(tj[fij.s2.r244$z - tj.min.0], nelements), 1) + t3388) + -1]*U[((fij.s2.r244$z + t3389)*4) + 1])
        fij[(fij.s2.r244$z*3) + 2] = fij[(fij.s2.r244$z*3) + 2] + (cU[(max(min(tj[fij.s2.r244$z - tj.min.0], nelements), 1) + t3388) + -1]*U[((fij.s2.r244$z + t3389)*4) + 2])
       }
      }
     }
    }
   }
  }
  free cU
  consume dd3 {
   consume ind32 {
    consume cf1 {
     let t3390 = nabf3*npairs
     for (fij.s3.r268$x, 0, n32) {
      let t3393 = nrbf3*t3390
      let t3392 = (n32*2) + fij.s3.r268$x
      let t3394 = fij.s3.r268$x + n32
      for (fij.s3.n, 0, npairs) {
       let t3395 = fij.s3.n*3
       for (fij.s3.dim, 0, 3) {
        let t2937 = fij.s3.dim + t3395
        fij[t2937] = fij[t2937] + (cf1[fij.s3.r268$x]*dd3[((((ind32[fij.s3.r268$x]*npairs) + ((ind32[t3392]*t3393) + (ind32[t3394]*t3390)))*3) + t3395) + fij.s3.dim])
       }
      }
     }
    }
   }
  }
  free cf1
  consume cf2 {
   consume ind23 {
    consume dd2 {
     let t3396 = max(nelements, 1)
     for (fij.s4.r261$x, 0, n23) {
      let t3397 = nrbf2*t3396
      let t3398 = fij.s4.r261$x + n23
      for (fij.s4.n, 0, npairs) {
       let t3401 = npairs*t3397
       let t3400 = fij.s4.n*t3397
       let t3399 = fij.s4.n*3
       for (fij.s4.dim, 0, 3) {
        let t2939 = fij.s4.dim + t3399
        fij[t2939] = fij[t2939] + (cf2[fij.s4.r261$x]*dd2[(fij.s4.dim*t3401) + ((ind23[fij.s4.r261$x] + (ind23[t3398]*t3396)) + t3400)])
       }
      }
     }
    }
   }
  }
  free dd2
  free cf2
  consume dd3 {
   consume cf133 {
    consume ind33 {
     let t3402 = nabf3*npairs
     for (fij.s5.r297$x, 0, n33) {
      let t3405 = nrbf3*t3402
      let t3404 = (n33*2) + fij.s5.r297$x
      let t3406 = fij.s5.r297$x + n33
      for (fij.s5.n, 0, npairs) {
       let t3407 = fij.s5.n*3
       for (fij.s5.dim, 0, 3) {
        let t2942 = fij.s5.dim + t3407
        fij[t2942] = fij[t2942] + (cf133[fij.s5.r297$x]*dd3[((((ind33[fij.s5.r297$x]*npairs) + ((ind33[t3404]*t3405) + (ind33[t3406]*t3402)))*3) + t3407) + fij.s5.dim])
       }
      }
     }
    }
   }
  }
  free cf133
  consume dd3 {
   consume cf233 {
    consume ind33 {
     let t3408 = nabf3*npairs
     for (fij.s6.r297$x, 0, n33) {
      let t3411 = nrbf3*t3408
      let t3410 = (n33*2) + fij.s6.r297$x
      let t3412 = fij.s6.r297$x + n33
      for (fij.s6.n, 0, npairs) {
       let t3413 = fij.s6.n*3
       for (fij.s6.dim, 0, 3) {
        let t2944 = fij.s6.dim + t3413
        fij[t2944] = fij[t2944] + (cf233[fij.s6.r297$x]*dd3[((((ind33[fij.s6.r297$x]*npairs) + ((ind33[t3410]*t3411) + (ind33[t3412]*t3408)))*3) + t3413) + fij.s6.dim])
       }
      }
     }
    }
   }
  }
  free cf233
  free dd3
  consume cu4 {
   consume U {
    if (nelements == 1) {
     let t3414 = (k4 + 1)*cu4.ne.extent_realized
     let t3415 = U.k.extent_realized*npairs
     for (fij.s7.r328$x, 0, nrbf4) {
      let t3417 = fij.s7.r328$x*t3415
      let t3416 = fij.s7.r328$x*t3414
      for (fij.s7.r328$y, 0, k4) {
       let t3419 = (fij.s7.r328$y*npairs) + t3417
       let t3418 = (cu4.ne.extent_realized*fij.s7.r328$y) + t3416
       for (fij.s7.r328$z, 0, npairs) {
        fij[fij.s7.r328$z*3] = fij[fij.s7.r328$z*3] + (cu4[t3418]*U[(fij.s7.r328$z + t3419)*4])
        fij[(fij.s7.r328$z*3) + 1] = fij[(fij.s7.r328$z*3) + 1] + (cu4[t3418]*U[((fij.s7.r328$z + t3419)*4) + 1])
        fij[(fij.s7.r328$z*3) + 2] = fij[(fij.s7.r328$z*3) + 2] + (cu4[t3418]*U[((fij.s7.r328$z + t3419)*4) + 2])
       }
      }
     }
    } else {
     let t3420 = (k4 + 1)*cu4.ne.extent_realized
     let t3421 = U.k.extent_realized*npairs
     for (fij.s7.r328$x, 0, nrbf4) {
      let t3423 = fij.s7.r328$x*t3421
      let t3422 = fij.s7.r328$x*t3420
      for (fij.s7.r328$y, 0, k4) {
       let t3425 = (fij.s7.r328$y*npairs) + t3423
       let t3424 = (cu4.ne.extent_realized*fij.s7.r328$y) + t3422
       for (fij.s7.r328$z, 0, npairs) {
        fij[fij.s7.r328$z*3] = fij[fij.s7.r328$z*3] + (cu4[(max(min(tj[fij.s7.r328$z - tj.min.0], nelements), 1) + t3424) + -1]*U[(fij.s7.r328$z + t3425)*4])
        fij[(fij.s7.r328$z*3) + 1] = fij[(fij.s7.r328$z*3) + 1] + (cu4[(max(min(tj[fij.s7.r328$z - tj.min.0], nelements), 1) + t3424) + -1]*U[((fij.s7.r328$z + t3425)*4) + 1])
        fij[(fij.s7.r328$z*3) + 2] = fij[(fij.s7.r328$z*3) + 2] + (cu4[(max(min(tj[fij.s7.r328$z - tj.min.0], nelements), 1) + t3424) + -1]*U[((fij.s7.r328$z + t3425)*4) + 2])
       }
      }
     }
    }
   }
  }
  free U
  free cu4
 }
 produce fij_o {
  consume fij {
   for (fij_o.s0.n, 0, npairs) {
    let t3426 = fij_o.s0.n*3
    for (fij_o.s0.dim, 0, 3) {
     let t2946 = fij_o.s0.dim + t3426
     fij_o[t2946] = fij[t2946]
    }
   }
  }
 }
 free fij
 allocate e[float64 * 1]
 produce e {
  e[0] = 0.000000
  consume rbf$1 {
   let t3427 = (nrbf2*-1) - coeff2.stride.2
   let t3428 = 0 - ti.min.0
   for (e.s1.r120$y, 0, nrbf2) {
    for (e.s1.r120$x, 0, npairs) {
     e[0] = e[0] + (coeff2[(max(min(tj[e.s1.r120$x - tj.min.0], npairs + -1), 1)*nrbf2) + (((max(min(ti[t3428], nelements), 1)*coeff2.stride.2) + t3427) + e.s1.r120$y)]*rbf$1[(e.s1.r120$y*npairs) + e.s1.r120$x])
    }
   }
  }
  free rbf$1
 }
 produce e_o {
  consume e {
   e_o[0] = e[0]
  }
 }
 free e
 allocate d23$0[float64 * n23 * n32]
 produce d23$0 {
  consume ind32 {
   consume d3$0 {
    consume ind23 {
     consume d2$0 {
      let t3430 = max(nelements, 1)
      let t3432 = nabf3*nrbf3
      for (d23$0.s0.d23j, 0, n32) {
       let t3433 = (n32*2) + d23$0.s0.d23j
       let t3434 = d23$0.s0.d23j + n32
       for (d23$0.s0.d23i, 0, n23) {
        d23$0[(d23$0.s0.d23j*n23) + d23$0.s0.d23i] = d2$0[ind23[d23$0.s0.d23i] + (ind23[d23$0.s0.d23i + n23]*t3430)]*d3$0[(ind32[t3434]*nabf3) + (ind32[d23$0.s0.d23j] + (ind32[t3433]*t3432))]
       }
      }
     }
    }
   }
  }
 }
 free d2$0
 free ind23
 free ind32
 allocate e23$0[float64 * 1]
 produce e23$0 {
  e23$0[0] = 0.000000
  consume d23$0 {
   let t3436 = 0 - ti.min.0
   for (e23$0.s1.r256$y, 0, n32) {
    let t3437 = e23$0.s1.r256$y*n23
    for (e23$0.s1.r256$x, 0, n23) {
     e23$0[0] = e23$0[0] + (d23$0[e23$0.s1.r256$x + t3437]*coeff23[(((ti[t3436] + -1)*coeff23.stride.2) + t3437) + e23$0.s1.r256$x])
    }
   }
  }
  free d23$0
 }
 allocate e3$0[float64 * 1]
 produce e3$0 {
  e3$0[0] = 0.000000
  consume sumU {
   let t3444 = ((nelements + 1)*nelements)/2
   let t3438 = sumU.k.extent_realized*sumU.n.extent_realized
   let t3440 = coeff3.min.3*coeff3.stride.3
   let t3441 = coeff3.min.2*coeff3.stride.2
   let t3442 = coeff3.min.1*coeff3.stride.1
   let t3439 = 0 - ti.min.0
   for (e3$0.s1.r239$4, 0, nrbf3) {
    let t3446 = e3$0.s1.r239$4*t3438
    let t3448 = coeff3.stride.1*e3$0.s1.r239$4
    for (e3$0.s1.r239$y, 0, nabf3) {
     let t3450 = e3$0.s1.r239$y - pn3.min.0
     for (e3$0.s1.r239$z, 0, nelements) {
      let e3$0.s1.r239$w.new_min.s = min(e3$0.s1.r239$z, nelements)
      let t3453 = nelements - e3$0.s1.r239$w.new_min.s
      let t3456 = ((e3$0.s1.r239$z/2)*(((nelements*2) - e3$0.s1.r239$z) + -3)) + e3$0.s1.r239$w.new_min.s
      let t3457 = e3$0.s1.r239$z + t3446
      let t3454 = e3$0.s1.r239$w.new_min.s + t3446
      for (e3$0.s1.r239$w.rebased, 0, t3453) {
       let e3$0.s1.r239$x.new_min.s = min(pn3[t3450], k3)
       let e3$0.s1.r239$x.new_max.s = max(min(pn3[t3450 + 1], k3), e3$0.s1.r239$x.new_min.s)
       let t3463 = max(e3$0.s1.r239$x.new_min.s, 0)
       let t3462 = max(min(e3$0.s1.r239$w.rebased + t3456, t3444), 1)*coeff3.stride.2
       let t3461 = coeff3.stride.2*-1
       let t3458 = max(e3$0.s1.r239$x.new_max.s, 0) - t3463
       let t3460 = e3$0.s1.r239$w.rebased + t3454
       for (e3$0.s1.r239$x.rebased, 0, t3458) {
        let t2950 = (e3$0.s1.r239$x.rebased + t3463)*sumU.n.extent_realized
        e3$0[0] = e3$0[0] + (sumU[t2950 + t3460]*(coeff3[(((((((((max(min(ti[t3439], nelements), 1)*coeff3.stride.3) - t3440) - t3441) - t3442) - coeff3.min.0) + t3461) - coeff3.stride.3) + t3448) + e3$0.s1.r239$y) + t3462]*(sumU[t2950 + t3457]*float64(pc3[(t3463 - pc3.min.0) + e3$0.s1.r239$x.rebased]))))
       }
      }
     }
    }
   }
  }
 }
 allocate d33$0[float64 * max(((n33 + 1)*n33)/2, 1)]
 produce d33$0 {
  let t3464 = max(((n33 + 1)*n33)/2, 1)
  for (d33$0.s0.k, 0, t3464) {
   d33$0[d33$0.s0.k] = 0.000000
  }
  consume ind33 {
   consume d3$0 {
    let t3465 = ((n33 + 1)*n33)/2
    let t3466 = nabf3*nrbf3
    for (d33$0.s1.r286$y, 0, n33) {
     let d33$0.s1.r286$x.new_min.s = min(d33$0.s1.r286$y, n33)
     let t3474 = n33*2
     let t3469 = (((n33 + -1)*d33$0.s1.r286$y) + d33$0.s1.r286$x.new_min.s) - (((d33$0.s1.r286$y + -1)*d33$0.s1.r286$y)/2)
     let t3468 = n33 - d33$0.s1.r286$x.new_min.s
     let t3470 = d33$0.s1.r286$y + t3474
     let t3472 = d33$0.s1.r286$x.new_min.s + t3474
     let t3471 = d33$0.s1.r286$y + n33
     let t3473 = d33$0.s1.r286$x.new_min.s + n33
     for (d33$0.s1.r286$x.rebased, 0, t3468) {
      let t2803.s = min(d33$0.s1.r286$x.rebased + t3469, t3465 + -1)
      let t2804 = let t3562 = max(t2803.s, 0) in if_then_else(t3465 < (t3562 + 1), return_second(halide_print((char *)stringify(t3562, " error!\n")), t3562), t3562)
      d33$0[t2804] = d33$0[t2804] + (d3$0[(ind33[t3471]*nabf3) + (ind33[d33$0.s1.r286$y] + (ind33[t3470]*t3466))]*d3$0[(ind33[d33$0.s1.r286$x.rebased + t3473]*nabf3) + (ind33[d33$0.s1.r286$x.new_min.s + d33$0.s1.r286$x.rebased] + (ind33[d33$0.s1.r286$x.rebased + t3472]*t3466))])
     }
    }
   }
  }
  free d3$0
  free ind33
 }
 allocate e33$0[float64 * 1]
 produce e33$0 {
  e33$0[0] = 0.000000
  consume d33$0 {
   let t3475 = ((n33 + 1)*n33)/2
   let t3476 = 0 - ti.min.0
   for (e33$0.s1.r291$x, 0, t3475) {
    e33$0[0] = e33$0[0] + (d33$0[e33$0.s1.r291$x]*coeff33[((max(min(ti[t3476], nelements), 1) + -1)*coeff33.stride.1) + e33$0.s1.r291$x])
   }
  }
  free d33$0
 }
 allocate e4$0[float64 * 1]
 produce e4$0 {
  e4$0[0] = 0.000000
  consume sumU {
   if (nelements == 1) {
    let t3477 = sumU.k.extent_realized*sumU.n.extent_realized
    let t3478 = pb4.min.1*pb4.stride.1
    let t3479 = ((coeff4.min.1*coeff4.stride.1) + ((coeff4.min.3*coeff4.stride.3) + (coeff4.min.2*coeff4.stride.2))) + coeff4.min.0
    for (e4$0.s1.r321$5, 0, nrbf4) {
     let t3481 = e4$0.s1.r321$5*t3477
     let t3484 = (coeff4.stride.1*e4$0.s1.r321$5) - t3479
     let t3485 = ((pb4.stride.1*2) - t3478) - pb4.min.0
     let t3482 = (pb4.stride.1 - t3478) - pb4.min.0
     let t3483 = pb4.min.0 + t3478
     for (e4$0.s1.r321$4, 0, nabf4) {
      let e4$0.s1.r321$w.new_min.s = min(pa4[e4$0.s1.r321$4 - pa4.min.0], q4)
      let e4$0.s1.r321$w.new_max.s = max(min(pa4[(e4$0.s1.r321$4 - pa4.min.0) + 1], q4), e4$0.s1.r321$w.new_min.s)
      let t3489 = max(e4$0.s1.r321$w.new_min.s, 0)
      let t3486 = max(e4$0.s1.r321$w.new_max.s, 0) - t3489
      let t3488 = e4$0.s1.r321$4 + t3484
      for (e4$0.s1.r321$w.rebased, 0, t3486) {
       e4$0[0] = e4$0[0] + ((sumU[(pb4[(t3482 + t3489) + e4$0.s1.r321$w.rebased]*sumU.n.extent_realized) + t3481]*(sumU[(pb4[(t3489 - t3483) + e4$0.s1.r321$w.rebased]*sumU.n.extent_realized) + t3481]*float64(pc4[(t3489 - pc4.min.0) + e4$0.s1.r321$w.rebased])))*(coeff4[t3488]*sumU[(pb4[(t3485 + t3489) + e4$0.s1.r321$w.rebased]*sumU.n.extent_realized) + t3481]))
      }
     }
    }
   } else {
    let t3490 = sumU.k.extent_realized*sumU.n.extent_realized
    let t3491 = pb4.min.1*pb4.stride.1
    let t3493 = coeff4.min.3*coeff4.stride.3
    let t3494 = coeff4.min.2*coeff4.stride.2
    let t3495 = coeff4.min.1*coeff4.stride.1
    let t3492 = 0 - ti.min.0
    for (e4$0.s1.r321$5, 0, nrbf4) {
     let t3497 = e4$0.s1.r321$5*t3490
     let t3500 = coeff4.stride.1*e4$0.s1.r321$5
     let t3501 = ((pb4.stride.1*2) - t3491) - pb4.min.0
     let t3498 = (pb4.stride.1 - t3491) - pb4.min.0
     let t3499 = pb4.min.0 + t3491
     for (e4$0.s1.r321$4, 0, nabf4) {
      let e4_0.s1.r321_w.new_min$1.s = min(pa4[e4$0.s1.r321$4 - pa4.min.0], q4)
      let e4_0.s1.r321_w.new_max$1.s = max(min(pa4[(e4$0.s1.r321$4 - pa4.min.0) + 1], q4), e4_0.s1.r321_w.new_min$1.s)
      let t3504 = max(e4_0.s1.r321_w.new_min$1.s, 0)
      let t3502 = max(e4_0.s1.r321_w.new_max$1.s, 0) - t3504
      for (e4$0.s1.r321$w.rebased, 0, t3502) {
       let t3506 = (t3504 - t3499) + e4$0.s1.r321$w.rebased
       let t3507 = (t3504 - pc4.min.0) + e4$0.s1.r321$w.rebased
       let t3508 = (t3501 + t3504) + e4$0.s1.r321$w.rebased
       let t3505 = (t3498 + t3504) + e4$0.s1.r321$w.rebased
       for (e4$0.s1.r321$x, 0, nelements) {
        let t3509 = (((e4$0.s1.r321$x + 1)*e4$0.s1.r321$x)*(e4$0.s1.r321$x + 2))/6
        for (e4$0.s1.r321$y, 0, e4$0.s1.r321$x + 1) {
         let t3510 = (((e4$0.s1.r321$y + 1)*e4$0.s1.r321$y)/2) + t3509
         for (e4$0.s1.r321$z, 0, e4$0.s1.r321$y + 1) {
          e4$0[0] = e4$0[0] + ((sumU[((pb4[t3505]*sumU.n.extent_realized) + t3497) + e4$0.s1.r321$y]*(sumU[((pb4[t3506]*sumU.n.extent_realized) + t3497) + e4$0.s1.r321$x]*float64(pc4[t3507])))*(coeff4[((e4$0.s1.r321$z + t3510)*coeff4.stride.2) + ((((((((max(min(ti[t3492], nelements), 1)*coeff4.stride.3) - t3493) - t3494) - t3495) - coeff4.min.0) - coeff4.stride.3) + t3500) + e4$0.s1.r321$4)]*sumU[((pb4[t3508]*sumU.n.extent_realized) + t3497) + e4$0.s1.r321$z]))
         }
        }
       }
      }
     }
    }
   }
  }
  free sumU
 }
 produce e3_o {
  consume e3$0 {
   e3_o[0] = e3$0[0]
  }
  free e3$0
  consume e23$0 {
   e3_o[0] = e3_o[0] + e23$0[0]
  }
  free e23$0
  consume e33$0 {
   e3_o[0] = e3_o[0] + e33$0[0]
  }
  free e33$0
  consume e4$0 {
   e3_o[0] = e3_o[0] + e4$0[0]
  }
  free e4$0
 }
}
}


